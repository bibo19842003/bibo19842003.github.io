<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello Bibo</title>
    <link>https://bibo19842003.github.io/</link>
    <description>Recent content on Hello Bibo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>bibo19842003@163.com (bibo)</managingEditor>
    <webMaster>bibo19842003@163.com (bibo)</webMaster>
    <lastBuildDate>Thu, 28 Mar 2019 15:07:20 +0800</lastBuildDate>
    <atom:link href="https://bibo19842003.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker compose</title>
      <link>https://bibo19842003.github.io/docker/docker-compose/</link>
      <pubDate>Thu, 28 Mar 2019 15:07:20 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-compose/</guid>
      <description>

&lt;h2 id=&#34;compose-简介:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;Compose 简介&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 &lt;code&gt;OpenStack&lt;/code&gt; 中的 &lt;code&gt;Heat&lt;/code&gt; 十分类似。&lt;/p&gt;

&lt;p&gt;其代码目前在 &lt;a href=&#34;https://github.com/docker/compose&#34;&gt;https://github.com/docker/compose&lt;/a&gt; 上开源。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。&lt;/p&gt;

&lt;p&gt;通过第一部分中的介绍，我们知道使用一个 &lt;code&gt;Dockerfile&lt;/code&gt; 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 恰好满足了这样的需求。它允许用户通过一个单独的 &lt;code&gt;docker-compose.yml&lt;/code&gt; 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 中有两个重要的概念：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务 (&lt;code&gt;service&lt;/code&gt;)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;项目 (&lt;code&gt;project&lt;/code&gt;)：由一组关联的应用容器组成的一个完整业务单元，在 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件中定义。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 &lt;code&gt;Compose&lt;/code&gt; 来进行编排管理。&lt;/p&gt;

&lt;h2 id=&#34;安装与卸载:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;安装与卸载&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 支持 Linux、macOS、Windows 10 三大平台。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 可以通过 Python 的包管理工具 &lt;code&gt;pip&lt;/code&gt; 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。&lt;/p&gt;

&lt;p&gt;前两种方式是传统方式，适合本地环境下安装使用；最后一种方式则不破坏系统环境，更适合云计算场景。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Docker for Mac&lt;/code&gt; 、&lt;code&gt;Docker for Windows&lt;/code&gt; 自带 &lt;code&gt;docker-compose&lt;/code&gt; 二进制文件，安装 Docker 之后可以直接使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose --version

docker-compose version 1.17.1, build 6d101fb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Linux 系统请使用以下介绍的方法安装。&lt;/p&gt;

&lt;h3 id=&#34;二进制包:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;二进制包&lt;/h3&gt;

&lt;p&gt;在 Linux 上的也安装十分简单，从 &lt;a href=&#34;https://github.com/docker/compose/releases&#34;&gt;官方 GitHub Release&lt;/a&gt; 处直接下载编译好的二进制文件即可。&lt;/p&gt;

&lt;p&gt;例如，在 Linux 64 位系统上直接下载对应的二进制包。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pip-安装:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;PIP 安装&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;注：&lt;/em&gt; &lt;code&gt;x86_64&lt;/code&gt; 架构的 Linux 建议按照上边的方法下载二进制包进行安装，如果您计算机的架构是 &lt;code&gt;ARM&lt;/code&gt; (例如，树莓派)，再使用 &lt;code&gt;pip&lt;/code&gt; 安装。&lt;/p&gt;

&lt;p&gt;这种方式是将 Compose 当作一个 Python 应用来从 pip 源中安装。&lt;/p&gt;

&lt;p&gt;执行安装命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo pip install -U docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到类似如下输出，说明安装成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Collecting docker-compose
  Downloading docker-compose-1.17.1.tar.gz (149kB): 149kB downloaded
...
Successfully installed docker-compose cached-property requests texttable websocket-client docker-py dockerpty six enum34 backports.ssl-match-hostname ipaddress
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bash-补全命令:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;bash 补全命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://raw.githubusercontent.com/docker/compose/1.8.0/contrib/completion/bash/docker-compose &amp;gt; /etc/bash_completion.d/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;容器中执行:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;容器中执行&lt;/h3&gt;

&lt;p&gt;Compose 既然是一个 Python 应用，自然也可以直接用容器来执行它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://github.com/docker/compose/releases/download/1.8.0/run.sh &amp;gt; /usr/local/bin/docker-compose
$ chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上，查看下载的 &lt;code&gt;run.sh&lt;/code&gt; 脚本内容，如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set -e

VERSION=&amp;quot;1.8.0&amp;quot;
IMAGE=&amp;quot;docker/compose:$VERSION&amp;quot;


# Setup options for connecting to docker host
if [ -z &amp;quot;$DOCKER_HOST&amp;quot; ]; then
    DOCKER_HOST=&amp;quot;/var/run/docker.sock&amp;quot;
fi
if [ -S &amp;quot;$DOCKER_HOST&amp;quot; ]; then
    DOCKER_ADDR=&amp;quot;-v $DOCKER_HOST:$DOCKER_HOST -e DOCKER_HOST&amp;quot;
else
    DOCKER_ADDR=&amp;quot;-e DOCKER_HOST -e DOCKER_TLS_VERIFY -e DOCKER_CERT_PATH&amp;quot;
fi


# Setup volume mounts for compose config and context
if [ &amp;quot;$(pwd)&amp;quot; != &#39;/&#39; ]; then
    VOLUMES=&amp;quot;-v $(pwd):$(pwd)&amp;quot;
fi
if [ -n &amp;quot;$COMPOSE_FILE&amp;quot; ]; then
    compose_dir=$(dirname $COMPOSE_FILE)
fi
# TODO: also check --file argument
if [ -n &amp;quot;$compose_dir&amp;quot; ]; then
    VOLUMES=&amp;quot;$VOLUMES -v $compose_dir:$compose_dir&amp;quot;
fi
if [ -n &amp;quot;$HOME&amp;quot; ]; then
    VOLUMES=&amp;quot;$VOLUMES -v $HOME:$HOME -v $HOME:/root&amp;quot; # mount $HOME in /root to share docker.config
fi

# Only allocate tty if we detect one
if [ -t 1 ]; then
    DOCKER_RUN_OPTIONS=&amp;quot;-t&amp;quot;
fi
if [ -t 0 ]; then
    DOCKER_RUN_OPTIONS=&amp;quot;$DOCKER_RUN_OPTIONS -i&amp;quot;
fi

exec docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_OPTIONS $VOLUMES -w &amp;quot;$(pwd)&amp;quot; $IMAGE &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，它其实是下载了 &lt;code&gt;docker/compose&lt;/code&gt; 镜像并运行。&lt;/p&gt;

&lt;h3 id=&#34;卸载:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;卸载&lt;/h3&gt;

&lt;p&gt;如果是二进制包方式安装的，删除二进制文件即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo rm /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是通过 &lt;code&gt;pip&lt;/code&gt; 安装的，则执行如下命令即可删除。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo pip uninstall docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;使用&lt;/h2&gt;

&lt;h3 id=&#34;术语:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;术语&lt;/h3&gt;

&lt;p&gt;首先介绍几个术语。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务 (&lt;code&gt;service&lt;/code&gt;)：一个应用容器，实际上可以运行多个相同镜像的实例。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;项目 (&lt;code&gt;project&lt;/code&gt;)：由一组关联的应用容器组成的一个完整业务单元。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可见，一个项目可以由多个服务（容器）关联而成，&lt;code&gt;Compose&lt;/code&gt; 面向项目进行管理。&lt;/p&gt;

&lt;h3 id=&#34;场景:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;场景&lt;/h3&gt;

&lt;p&gt;最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。&lt;/p&gt;

&lt;p&gt;下面我们用 &lt;code&gt;Python&lt;/code&gt; 来建立一个能够记录页面访问次数的 web 网站。&lt;/p&gt;

&lt;h4 id=&#34;web-应用:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;web 应用&lt;/h4&gt;

&lt;p&gt;新建文件夹，在该目录中编写 &lt;code&gt;app.py&lt;/code&gt; 文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Flask
from redis import Redis

app = Flask(__name__)
redis = Redis(host=&#39;redis&#39;, port=6379)

@app.route(&#39;/&#39;)
def hello():
    count = redis.incr(&#39;hits&#39;)
    return &#39;Hello World! 该页面已被访问 {} 次。\n&#39;.format(count)

if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(host=&amp;quot;0.0.0.0&amp;quot;, debug=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dockerfile:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;Dockerfile&lt;/h4&gt;

&lt;p&gt;编写 &lt;code&gt;Dockerfile&lt;/code&gt; 文件，内容为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM python:3.6-alpine
ADD . /code
WORKDIR /code
RUN pip install redis flask
CMD [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;docker-compose-yml:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;docker-compose.yml&lt;/h4&gt;

&lt;p&gt;编写 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件，这个是 Compose 使用的主模板文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;
services:

  web:
    build: .
    ports:
     - &amp;quot;5000:5000&amp;quot;

  redis:
    image: &amp;quot;redis:alpine&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;运行-compose-项目:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;运行 compose 项目&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时访问本地 &lt;code&gt;5000&lt;/code&gt; 端口，每次刷新页面，计数就会加 1。&lt;/p&gt;

&lt;h2 id=&#34;compose-命令说明:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;Compose 命令说明&lt;/h2&gt;

&lt;h3 id=&#34;命令对象与格式:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;命令对象与格式&lt;/h3&gt;

&lt;p&gt;对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。&lt;/p&gt;

&lt;p&gt;执行 &lt;code&gt;docker-compose [COMMAND] --help&lt;/code&gt; 或者 &lt;code&gt;docker-compose help [COMMAND]&lt;/code&gt; 可以查看具体某个命令的使用格式。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt; 命令的基本的使用格式是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose [-f=&amp;lt;arg&amp;gt;...] [options] [COMMAND] [ARGS...]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;命令选项:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;命令选项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-f, --file FILE&lt;/code&gt; 指定使用的 Compose 模板文件，默认为 &lt;code&gt;docker-compose.yml&lt;/code&gt;，可以多次指定。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-p, --project-name NAME&lt;/code&gt; 指定项目名称，默认将使用所在目录名称作为项目名。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--x-networking&lt;/code&gt; 使用 Docker 的可拔插网络后端特性&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--x-network-driver DRIVER&lt;/code&gt; 指定网络后端的驱动，默认为 &lt;code&gt;bridge&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--verbose&lt;/code&gt; 输出更多调试信息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-v, --version&lt;/code&gt; 打印版本并退出。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;命令使用说明:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;命令使用说明&lt;/h3&gt;

&lt;h4 id=&#34;build:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose build [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;构建（重新构建）项目中的服务容器。&lt;/p&gt;

&lt;p&gt;服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。&lt;/p&gt;

&lt;p&gt;可以随时在项目目录下运行 &lt;code&gt;docker-compose build&lt;/code&gt; 来重新构建服务。&lt;/p&gt;

&lt;p&gt;选项包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--force-rm&lt;/code&gt; 删除构建过程中的临时容器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--no-cache&lt;/code&gt; 构建镜像过程中不使用 cache（这将加长构建过程）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--pull&lt;/code&gt; 始终尝试通过 pull 来获取更新版本的镜像。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;config:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。&lt;/p&gt;

&lt;h4 id=&#34;down:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;down&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;此命令将会停止 &lt;code&gt;up&lt;/code&gt; 命令所启动的容器，并移除网络&lt;/p&gt;

&lt;h4 id=&#34;exec:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;进入指定的容器。&lt;/p&gt;

&lt;h4 id=&#34;help:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;获得一个命令的帮助。&lt;/p&gt;

&lt;h4 id=&#34;images:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;images&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;列出 Compose 文件中包含的镜像。&lt;/p&gt;

&lt;h4 id=&#34;kill:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;kill&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose kill [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;通过发送 &lt;code&gt;SIGKILL&lt;/code&gt; 信号来强制停止服务容器。&lt;/p&gt;

&lt;p&gt;支持通过 &lt;code&gt;-s&lt;/code&gt; 参数来指定发送的信号，例如通过如下指令发送 &lt;code&gt;SIGINT&lt;/code&gt; 信号。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose kill -s SIGINT
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;logs:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;logs&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose logs [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 &lt;code&gt;--no-color&lt;/code&gt; 来关闭颜色。&lt;/p&gt;

&lt;p&gt;该命令在调试问题的时候十分有用。&lt;/p&gt;

&lt;h4 id=&#34;pause:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;pause&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose pause [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;暂停一个服务容器。&lt;/p&gt;

&lt;h4 id=&#34;port:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;port&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose port [options] SERVICE PRIVATE_PORT&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;打印某个容器端口所映射的公共端口。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--protocol=proto&lt;/code&gt; 指定端口协议，tcp（默认值）或者 udp。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--index=index&lt;/code&gt; 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ps:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;ps&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose ps [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;列出项目中目前的所有容器。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt; 只打印容器的 ID 信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;pull:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;pull&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose pull [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;拉取服务依赖的镜像。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ignore-pull-failures&lt;/code&gt; 忽略拉取镜像过程中的错误。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;push:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;push&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;推送服务依赖的镜像到 Docker 镜像仓库。&lt;/p&gt;

&lt;h4 id=&#34;restart:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;restart&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose restart [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;重启项目中的服务。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 指定重启前停止容器的超时（默认为 10 秒）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;rm:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose rm [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;删除所有（停止状态的）服务容器。推荐先执行 &lt;code&gt;docker-compose stop&lt;/code&gt; 命令来停止容器。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-f, --force&lt;/code&gt; 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; 删除容器所挂载的数据卷。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;run:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在指定服务上执行一个命令。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose run ubuntu ping docker.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将会启动一个 ubuntu 服务容器，并执行 &lt;code&gt;ping docker.com&lt;/code&gt; 命令。&lt;/p&gt;

&lt;p&gt;默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。&lt;/p&gt;

&lt;p&gt;该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。&lt;/p&gt;

&lt;p&gt;两个不同点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定命令将会覆盖原有的自动运行命令；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不会自动创建端口，以避免冲突。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果不希望自动启动关联的容器，可以使用 &lt;code&gt;--no-deps&lt;/code&gt; 选项，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose run --no-deps web python manage.py shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将不会启动 web 容器所关联的其它容器。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; 后台运行容器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--name NAME&lt;/code&gt; 为容器指定一个名字。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--entrypoint CMD&lt;/code&gt; 覆盖默认的容器启动指令。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-e KEY=VAL&lt;/code&gt; 设置环境变量值，可多次使用选项来设置多个环境变量。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-u, --user=&amp;quot;&amp;quot;&lt;/code&gt; 指定运行容器的用户名或者 uid。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--no-deps&lt;/code&gt; 不自动启动关联的服务容器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; 运行命令后自动删除容器，&lt;code&gt;d&lt;/code&gt; 模式下将忽略。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-p, --publish=[]&lt;/code&gt; 映射容器端口到本地主机。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--service-ports&lt;/code&gt; 配置服务端口并映射到本地主机。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-T&lt;/code&gt; 不分配伪 tty，意味着依赖 tty 的指令将无法运行。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;scale:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose scale [options] [SERVICE=NUM...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;设置指定服务运行的容器个数。&lt;/p&gt;

&lt;p&gt;通过 &lt;code&gt;service=num&lt;/code&gt; 的参数来设置数量。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose scale web=3 db=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。&lt;/p&gt;

&lt;p&gt;一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 停止容器时候的超时（默认为 10 秒）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;start:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose start [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;启动已经存在的服务容器。&lt;/p&gt;

&lt;h4 id=&#34;stop:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;stop&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose stop [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;停止已经处于运行状态的容器，但不删除它。通过 &lt;code&gt;docker-compose start&lt;/code&gt; 可以再次启动这些容器。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 停止容器时候的超时（默认为 10 秒）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;top:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;top&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;查看各个服务容器内运行的进程。&lt;/p&gt;

&lt;h4 id=&#34;unpause:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;unpause&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose unpause [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;恢复处于暂停状态中的服务。&lt;/p&gt;

&lt;h4 id=&#34;up:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;up&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose up [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。&lt;/p&gt;

&lt;p&gt;链接的服务都将会被自动启动，除非已经处于运行状态。&lt;/p&gt;

&lt;p&gt;可以说，大部分时候都可以直接通过该命令来启动一个项目。&lt;/p&gt;

&lt;p&gt;默认情况，&lt;code&gt;docker-compose up&lt;/code&gt; 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。&lt;/p&gt;

&lt;p&gt;当通过 &lt;code&gt;Ctrl-C&lt;/code&gt; 停止命令时，所有容器将会停止。&lt;/p&gt;

&lt;p&gt;如果使用 &lt;code&gt;docker-compose up -d&lt;/code&gt;，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。&lt;/p&gt;

&lt;p&gt;默认情况，如果服务容器已经存在，&lt;code&gt;docker-compose up&lt;/code&gt; 将会尝试停止容器，然后重新创建（保持使用 &lt;code&gt;volumes-from&lt;/code&gt; 挂载的卷），以保证新启动的服务匹配 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 &lt;code&gt;docker-compose up --no-recreate&lt;/code&gt;。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 &lt;code&gt;docker-compose up --no-deps -d &amp;lt;SERVICE_NAME&amp;gt;&lt;/code&gt; 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; 在后台运行服务容器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--no-color&lt;/code&gt; 不使用颜色来区分不同的服务的控制台输出。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--no-deps&lt;/code&gt; 不启动服务所链接的容器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--force-recreate&lt;/code&gt; 强制重新创建容器，不能与 &lt;code&gt;--no-recreate&lt;/code&gt; 同时使用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--no-recreate&lt;/code&gt; 如果容器已经存在了，则不重新创建，不能与 &lt;code&gt;--force-recreate&lt;/code&gt; 同时使用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--no-build&lt;/code&gt; 不自动构建缺失的服务镜像。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 停止容器时候的超时（默认为 10 秒）。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;version:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;格式为 &lt;code&gt;docker-compose version&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;打印版本信息。&lt;/p&gt;

&lt;h2 id=&#34;compose-模板文件:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;Compose 模板文件&lt;/h2&gt;

&lt;p&gt;模板文件是使用 &lt;code&gt;Compose&lt;/code&gt; 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 &lt;code&gt;docker run&lt;/code&gt; 相关参数的含义都是类似的。&lt;/p&gt;

&lt;p&gt;默认的模板文件名称为 &lt;code&gt;docker-compose.yml&lt;/code&gt;，格式为 YAML 格式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &amp;quot;3&amp;quot;

services:
  webapp:
    image: examples/web
    ports:
      - &amp;quot;80:80&amp;quot;
    volumes:
      - &amp;quot;/data&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意每个服务都必须通过 &lt;code&gt;image&lt;/code&gt; 指令指定镜像或 &lt;code&gt;build&lt;/code&gt; 指令（需要 Dockerfile）等来自动构建生成镜像。&lt;/p&gt;

&lt;p&gt;如果使用 &lt;code&gt;build&lt;/code&gt; 指令，在 &lt;code&gt;Dockerfile&lt;/code&gt; 中设置的选项(例如：&lt;code&gt;CMD&lt;/code&gt;, &lt;code&gt;EXPOSE&lt;/code&gt;, &lt;code&gt;VOLUME&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt; 等) 将会自动被获取，无需在 &lt;code&gt;docker-compose.yml&lt;/code&gt; 中再次设置。&lt;/p&gt;

&lt;p&gt;下面分别介绍各个指令的用法。&lt;/p&gt;

&lt;h3 id=&#34;build-1:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 &lt;code&gt;Compose&lt;/code&gt; 将会利用它自动构建这个镜像，然后使用这个镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;
services:

  webapp:
    build: ./dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以使用 &lt;code&gt;context&lt;/code&gt; 指令指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在文件夹的路径。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;dockerfile&lt;/code&gt; 指令指定 &lt;code&gt;Dockerfile&lt;/code&gt; 文件名。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;arg&lt;/code&gt; 指令指定构建镜像时的变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;
services:

  webapp:
    build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;cache_from&lt;/code&gt; 指定构建镜像的缓存&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;build:
  context: .
  cache_from:
    - alpine:latest
    - corp/web_app:3.14
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cap-add-cap-drop:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;cap_add, cap_drop&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定容器的内核能力（capacity）分配。&lt;/p&gt;

&lt;p&gt;例如，让容器拥有所有能力可以指定为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cap_add:
  - ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;去掉 NET_ADMIN 能力可以指定为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cap_drop:
  - NET_ADMIN
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;command:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;command&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;覆盖容器启动后默认执行的命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;command: echo &amp;quot;hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configs:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;仅用于 &lt;code&gt;Swarm mode&lt;/code&gt;，详细内容请查看 &lt;a href=&#34;../swarm_mode/&#34;&gt;&lt;code&gt;Swarm mode&lt;/code&gt;&lt;/a&gt; 一节。&lt;/p&gt;

&lt;h3 id=&#34;cgroup-parent:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;cgroup_parent&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定父 &lt;code&gt;cgroup&lt;/code&gt; 组，意味着将继承该组的资源限制。&lt;/p&gt;

&lt;p&gt;例如，创建了一个 cgroup 组名称为 &lt;code&gt;cgroups_1&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cgroup_parent: cgroups_1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;container-name:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;container_name&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定容器名称。默认将会使用 &lt;code&gt;项目名称_服务名称_序号&lt;/code&gt; 这样的格式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;container_name: docker-web-container
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;deploy:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;仅用于 &lt;code&gt;Swarm mode&lt;/code&gt;，详细内容请查看 &lt;a href=&#34;../swarm_mode/&#34;&gt;&lt;code&gt;Swarm mode&lt;/code&gt;&lt;/a&gt; 一节&lt;/p&gt;

&lt;h3 id=&#34;devices:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;devices&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定设备映射关系。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;devices:
  - &amp;quot;/dev/ttyUSB1:/dev/ttyUSB0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;depends-on:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;depends_on&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;解决容器的依赖、启动先后的问题。以下例子中会先启动 &lt;code&gt;redis&lt;/code&gt; &lt;code&gt;db&lt;/code&gt; 再启动 &lt;code&gt;web&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;

services:
  web:
    build: .
    depends_on:
      - db
      - redis

  redis:
    image: redis

  db:
    image: postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;web&lt;/code&gt; 服务不会等待 &lt;code&gt;redis&lt;/code&gt; &lt;code&gt;db&lt;/code&gt; 「完全启动」之后才启动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dns:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;dns&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;自定义 &lt;code&gt;DNS&lt;/code&gt; 服务器。可以是一个值，也可以是一个列表。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dns: 8.8.8.8

dns:
  - 8.8.8.8
  - 114.114.114.114
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dns-search:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;dns_search&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;配置 &lt;code&gt;DNS&lt;/code&gt; 搜索域。可以是一个值，也可以是一个列表。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dns_search: example.com

dns_search:
  - domain1.example.com
  - domain2.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tmpfs:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;tmpfs&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;挂载一个 tmpfs 文件系统到容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tmpfs: /run
tmpfs:
  - /run
  - /tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;env-file:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;env_file&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;从文件中获取环境变量，可以为单独的文件路径或列表。&lt;/p&gt;

&lt;p&gt;如果通过 &lt;code&gt;docker-compose -f FILE&lt;/code&gt; 方式来指定 Compose 模板文件，则 &lt;code&gt;env_file&lt;/code&gt; 中变量的路径会基于模板文件路径。&lt;/p&gt;

&lt;p&gt;如果有变量名称与 &lt;code&gt;environment&lt;/code&gt; 指令冲突，则按照惯例，以后者为准。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env_file: .env

env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;环境变量文件中每一行必须符合格式，支持 &lt;code&gt;#&lt;/code&gt; 开头的注释行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# common.env: Set development environment
PROG_ENV=development
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;environment:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;environment&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;设置环境变量。你可以使用数组或字典两种格式。&lt;/p&gt;

&lt;p&gt;只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:
  RACK_ENV: development
  SESSION_SECRET:

environment:
  - RACK_ENV=development
  - SESSION_SECRET
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果变量名称或者值中用到 &lt;code&gt;true|false，yes|no&lt;/code&gt; 等表达 &lt;a href=&#34;https://yaml.org/type/bool.html&#34;&gt;布尔&lt;/a&gt; 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;expose:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;expose&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;暴露端口，但不映射到宿主机，只被连接的服务访问。&lt;/p&gt;

&lt;p&gt;仅可以指定内部端口为参数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;expose:
 - &amp;quot;3000&amp;quot;
 - &amp;quot;8000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;external-links:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;external_links&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：不建议使用该指令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;链接到 &lt;code&gt;docker-compose.yml&lt;/code&gt; 外部的容器，甚至并非 &lt;code&gt;Compose&lt;/code&gt; 管理的外部容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;external_links:
 - redis_1
 - project_db_1:mysql
 - project_db_1:postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;extra-hosts:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;extra_hosts&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;类似 Docker 中的 &lt;code&gt;--add-host&lt;/code&gt; 参数，指定额外的 host 名称映射信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;extra_hosts:
 - &amp;quot;googledns:8.8.8.8&amp;quot;
 - &amp;quot;dockerhub:52.1.157.61&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会在启动后的服务容器中 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件中添加如下两条条目。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;8.8.8.8 googledns
52.1.157.61 dockerhub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;healthcheck:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;healthcheck&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;通过命令检查容器是否健康运行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;healthcheck:
  test: [&amp;quot;CMD&amp;quot;, &amp;quot;curl&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;http://localhost&amp;quot;]
  interval: 1m30s
  timeout: 10s
  retries: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;image:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;image&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定为镜像名称或镜像 ID。如果镜像在本地不存在，&lt;code&gt;Compose&lt;/code&gt; 将会尝试拉取这个镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;image: ubuntu
image: orchardup/postgresql
image: a4bc65fd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;labels:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;labels:
  com.startupteam.description: &amp;quot;webapp for a startup team&amp;quot;
  com.startupteam.department: &amp;quot;devops department&amp;quot;
  com.startupteam.release: &amp;quot;rc3 for v1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;links:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;links&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：不推荐使用该指令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;logging:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;配置日志选项。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;logging:
  driver: syslog
  options:
    syslog-address: &amp;quot;tcp://192.168.0.42:123&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前支持三种日志驱动类型。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;driver: &amp;quot;json-file&amp;quot;
driver: &amp;quot;syslog&amp;quot;
driver: &amp;quot;none&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;options&lt;/code&gt; 配置日志驱动的相关参数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;options:
  max-size: &amp;quot;200k&amp;quot;
  max-file: &amp;quot;10&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;network-mode:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;network_mode&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;设置网络模式。使用和 &lt;code&gt;docker run&lt;/code&gt; 的 &lt;code&gt;--network&lt;/code&gt; 参数一样的值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;network_mode: &amp;quot;bridge&amp;quot;
network_mode: &amp;quot;host&amp;quot;
network_mode: &amp;quot;none&amp;quot;
network_mode: &amp;quot;service:[service name]&amp;quot;
network_mode: &amp;quot;container:[container name/id]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;networks:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;networks&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;配置容器连接的网络。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &amp;quot;3&amp;quot;
services:

  some-service:
    networks:
     - some-network
     - other-network

networks:
  some-network:
  other-network:
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pid:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;pid&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pid: &amp;quot;host&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ports:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;ports&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;暴露端口信息。&lt;/p&gt;

&lt;p&gt;使用宿主端口：容器端口 &lt;code&gt;(HOST:CONTAINER)&lt;/code&gt; 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ports:
 - &amp;quot;3000&amp;quot;
 - &amp;quot;8000:8000&amp;quot;
 - &amp;quot;49100:22&amp;quot;
 - &amp;quot;127.0.0.1:8001:8001&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：当使用 &lt;code&gt;HOST:CONTAINER&lt;/code&gt; 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 &lt;code&gt;YAML&lt;/code&gt; 会自动解析 &lt;code&gt;xx:yy&lt;/code&gt; 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;secrets:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;存储敏感数据，例如 &lt;code&gt;mysql&lt;/code&gt; 服务密码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &amp;quot;3.1&amp;quot;
services:

mysql:
  image: mysql
  environment:
    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
  secrets:
    - db_root_password
    - my_other_secret

secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;security-opt:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;security_opt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;security_opt:
    - label:user:USER
    - label:role:ROLE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stop-signal:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;stop_signal&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;stop_signal: SIGUSR1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sysctls:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;sysctls&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;配置容器内核参数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sysctls:
  net.core.somaxconn: 1024
  net.ipv4.tcp_syncookies: 0

sysctls:
  - net.core.somaxconn=1024
  - net.ipv4.tcp_syncookies=0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ulimits:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;ulimits&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;指定容器的 ulimits 限制值。&lt;/p&gt;

&lt;p&gt;例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  ulimits:
    nproc: 65535
    nofile:
      soft: 20000
      hard: 40000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;volumes:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;&lt;code&gt;volumes&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;数据卷所挂载路径设置。可以设置宿主机路径 （&lt;code&gt;HOST:CONTAINER&lt;/code&gt;） 或加上访问模式 （&lt;code&gt;HOST:CONTAINER:ro&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;该指令中路径支持相对路径。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:
 - /var/lib/mysql
 - cache/:/tmp/cache
 - ~/configs:/etc/configs/:ro
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其它指令:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;其它指令&lt;/h3&gt;

&lt;p&gt;此外，还有包括 &lt;code&gt;domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir&lt;/code&gt; 等指令，基本跟 &lt;code&gt;docker run&lt;/code&gt; 中对应参数的功能一致。&lt;/p&gt;

&lt;p&gt;指定服务容器启动后执行的入口文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;entrypoint: /code/entrypoint.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定容器中运行应用的用户名。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;user: nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定容器中工作目录。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;working_dir: /code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定容器中搜索域名、主机名、mac 地址等。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;domainname: your_website.com
hostname: test
mac_address: 08-00-27-00-0C-0A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;允许容器中运行一些特权命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;privileged: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 &lt;code&gt;always&lt;/code&gt; 或者 &lt;code&gt;unless-stopped&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;read_only: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开标准输入，可以接受外部输入。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;stdin_open: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模拟一个伪终端。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tty: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;读取变量:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;读取变量&lt;/h3&gt;

&lt;p&gt;Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 &lt;code&gt;.env&lt;/code&gt; 文件中的变量。&lt;/p&gt;

&lt;p&gt;例如，下面的 Compose 文件将从运行它的环境中读取变量 &lt;code&gt;${MONGO_VERSION}&lt;/code&gt; 的值，并写入执行的指令中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &amp;quot;3&amp;quot;
services:

db:
  image: &amp;quot;mongo:${MONGO_VERSION}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果执行 &lt;code&gt;MONGO_VERSION=3.2 docker-compose up&lt;/code&gt; 则会启动一个 &lt;code&gt;mongo:3.2&lt;/code&gt; 镜像的容器；如果执行 &lt;code&gt;MONGO_VERSION=2.8 docker-compose up&lt;/code&gt; 则会启动一个 &lt;code&gt;mongo:2.8&lt;/code&gt; 镜像的容器。&lt;/p&gt;

&lt;p&gt;若当前目录存在 &lt;code&gt;.env&lt;/code&gt; 文件，执行 &lt;code&gt;docker-compose&lt;/code&gt; 命令时将从该文件中读取变量。&lt;/p&gt;

&lt;p&gt;在当前目录新建 &lt;code&gt;.env&lt;/code&gt; 文件并写入以下内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 支持 # 号注释
MONGO_VERSION=3.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行 &lt;code&gt;docker-compose up&lt;/code&gt; 则会启动一个 &lt;code&gt;mongo:3.6&lt;/code&gt; 镜像的容器。&lt;/p&gt;

&lt;h2 id=&#34;使用-django:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;使用 Django&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;本小节内容适合 &lt;code&gt;Python&lt;/code&gt; 开发人员阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们现在将使用 &lt;code&gt;Docker Compose&lt;/code&gt; 配置并运行一个 &lt;code&gt;Django/PostgreSQL&lt;/code&gt; 应用。&lt;/p&gt;

&lt;p&gt;在一切工作开始前，需要先编辑好三个必要的文件。&lt;/p&gt;

&lt;p&gt;第一步，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们可以通过编辑 &lt;code&gt;Dockerfile&lt;/code&gt; 文件来指定 Docker 容器要安装内容。内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM python:3
ENV PYTHONUNBUFFERED 1
RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt
ADD . /code/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上内容指定应用将使用安装了 Python 以及必要依赖包的镜像。更多关于如何编写 &lt;code&gt;Dockerfile&lt;/code&gt; 文件的信息可以查看 &lt;a href=&#34;../image/create.md#利用 Dockerfile 来创建镜像&#34;&gt;镜像创建&lt;/a&gt; 和 &lt;a href=&#34;../dockerfile/README.md&#34;&gt; Dockerfile 使用&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;第二步，在 &lt;code&gt;requirements.txt&lt;/code&gt; 文件里面写明需要安装的具体依赖包名。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Django&amp;gt;=1.8,&amp;lt;2.0
psycopg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第三步，&lt;code&gt;docker-compose.yml&lt;/code&gt; 文件将把所有的东西关联起来。它描述了应用的构成（一个 web 服务和一个数据库）、使用的 Docker 镜像、镜像之间的连接、挂载到容器的卷，以及服务开放的端口。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &amp;quot;3&amp;quot;
services:

  db:
    image: postgres

  web:
    build: .
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - &amp;quot;8000:8000&amp;quot;
    links:
      - db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看 &lt;a href=&#34;yml_ref.md&#34;&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt; 章节&lt;/a&gt; 了解更多详细的工作机制。&lt;/p&gt;

&lt;p&gt;现在我们就可以使用 &lt;code&gt;docker-compose run&lt;/code&gt; 命令启动一个 &lt;code&gt;Django&lt;/code&gt; 应用了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose run web django-admin.py startproject django_example .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compose 会先使用 &lt;code&gt;Dockerfile&lt;/code&gt; 为 web 服务创建一个镜像，接着使用这个镜像在容器里运行 &lt;code&gt;django-admin.py startproject django_example&lt;/code&gt; 指令。&lt;/p&gt;

&lt;p&gt;这将在当前目录生成一个 &lt;code&gt;Django&lt;/code&gt; 应用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls
Dockerfile       docker-compose.yml          django_example       manage.py       requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的系统是 Linux,记得更改文件权限。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chown -R $USER:$USER .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先，我们要为应用设置好数据库的连接信息。用以下内容替换 &lt;code&gt;django_example/settings.py&lt;/code&gt; 文件中 &lt;code&gt;DATABASES = ...&lt;/code&gt; 定义的节点内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql&#39;,
        &#39;NAME&#39;: &#39;postgres&#39;,
        &#39;USER&#39;: &#39;postgres&#39;,
        &#39;HOST&#39;: &#39;db&#39;,
        &#39;PORT&#39;: 5432,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些信息是在 &lt;a href=&#34;https://hub.docker.com/_/postgres/&#34;&gt;postgres&lt;/a&gt; 镜像固定设置好的。然后，运行 &lt;code&gt;docker-compose up&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up

django_db_1 is up-to-date
Creating django_web_1 ...
Creating django_web_1 ... done
Attaching to django_db_1, django_web_1
db_1   | The files belonging to this database system will be owned by user &amp;quot;postgres&amp;quot;.
db_1   | This user must also own the server process.
db_1   |
db_1   | The database cluster will be initialized with locale &amp;quot;en_US.utf8&amp;quot;.
db_1   | The default database encoding has accordingly been set to &amp;quot;UTF8&amp;quot;.
db_1   | The default text search configuration will be set to &amp;quot;english&amp;quot;.

web_1  | Performing system checks...
web_1  |
web_1  | System check identified no issues (0 silenced).
web_1  |
web_1  | November 23, 2017 - 06:21:19
web_1  | Django version 1.11.7, using settings &#39;django_example.settings&#39;
web_1  | Starting development server at http://0.0.0.0:8000/
web_1  | Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 &lt;code&gt;Django&lt;/code&gt; 应用已经开始在你的 Docker 守护进程里监听着 &lt;code&gt;8000&lt;/code&gt; 端口了。打开 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 即可看到 &lt;code&gt;Django&lt;/code&gt; 欢迎页面。&lt;/p&gt;

&lt;p&gt;你还可以在 Docker 上运行其它的管理命令，例如对于同步数据库结构这种事，在运行完 &lt;code&gt;docker-compose up&lt;/code&gt; 后，在另外一个终端进入文件夹运行以下命令即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose run web python manage.py syncdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用-rails:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;使用 Rails&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;本小节内容适合 &lt;code&gt;Ruby&lt;/code&gt; 开发人员阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们现在将使用 &lt;code&gt;Compose&lt;/code&gt; 配置并运行一个 &lt;code&gt;Rails/PostgreSQL&lt;/code&gt; 应用。&lt;/p&gt;

&lt;p&gt;在一切工作开始前，需要先设置好三个必要的文件。&lt;/p&gt;

&lt;p&gt;首先，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们可以通过编辑 &lt;code&gt;Dockerfile&lt;/code&gt; 文件来指定 Docker 容器要安装内容。内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM ruby
RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev
RUN mkdir /myapp
WORKDIR /myapp
ADD Gemfile /myapp/Gemfile
RUN bundle install
ADD . /myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上内容指定应用将使用安装了 Ruby、Bundler 以及其依赖件的镜像。更多关于如何编写 Dockerfile 文件的信息可以查看 &lt;a href=&#34;../image/create.md#利用 Dockerfile 来创建镜像&#34;&gt;镜像创建&lt;/a&gt; 和 &lt;a href=&#34;../dockerfile/README.md&#34;&gt;Dockerfile 使用&lt;/a&gt;。
下一步，我们需要一个引导加载 Rails 的文件 &lt;code&gt;Gemfile&lt;/code&gt; 。 等一会儿它还会被 &lt;code&gt;rails new&lt;/code&gt; 命令覆盖重写。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source &#39;https://rubygems.org&#39;
gem &#39;rails&#39;, &#39;4.0.2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，&lt;code&gt;docker-compose.yml&lt;/code&gt; 文件才是最神奇的地方。 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件将把所有的东西关联起来。它描述了应用的构成（一个 web 服务和一个数据库）、每个镜像的来源（数据库运行在使用预定义的 PostgreSQL 镜像，web 应用侧将从本地目录创建）、镜像之间的连接，以及服务开放的端口。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &amp;quot;3&amp;quot;
services:

  db:
    image: postgres
    ports:
      - &amp;quot;5432&amp;quot;

  web:
    build: .
    command: bundle exec rackup -p 3000
    volumes:
      - .:/myapp
    ports:
      - &amp;quot;3000:3000&amp;quot;
    links:
      - db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有文件就绪后，我们就可以通过使用 &lt;code&gt;docker-compose run&lt;/code&gt; 命令生成应用的骨架了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose run web rails new . --force --database=postgresql --skip-bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 会先使用 &lt;code&gt;Dockerfile&lt;/code&gt; 为 web 服务创建一个镜像，接着使用这个镜像在容器里运行 &lt;code&gt;rails new&lt;/code&gt; 和它之后的命令。一旦这个命令运行完后，应该就可以看一个崭新的应用已经生成了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls
Dockerfile   app          docker-compose.yml      tmp
Gemfile      bin          lib          vendor
Gemfile.lock condocker-compose       log
README.rdoc  condocker-compose.ru    public
Rakefile     db           test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在新的 &lt;code&gt;Gemfile&lt;/code&gt; 文件去掉加载 &lt;code&gt;therubyracer&lt;/code&gt; 的行的注释，这样我们便可以使用 Javascript 运行环境：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem &#39;therubyracer&#39;, platforms: :ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们已经有一个新的 &lt;code&gt;Gemfile&lt;/code&gt; 文件，需要再重新创建镜像。（这个会步骤会改变 Dockerfile 文件本身，所以需要重建一次）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;应用现在就可以启动了，但配置还未完成。Rails 默认读取的数据库目标是 &lt;code&gt;localhost&lt;/code&gt; ，我们需要手动指定容器的 &lt;code&gt;db&lt;/code&gt; 。同样的，还需要把用户名修改成和 postgres 镜像预定的一致。
打开最新生成的 &lt;code&gt;database.yml&lt;/code&gt; 文件。用以下内容替换：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;development: &amp;amp;default
  adapter: postgresql
  encoding: unicode
  database: postgres
  pool: 5
  username: postgres
  password:
  host: db

test:
  &amp;lt;&amp;lt;: *default
  database: myapp_test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在就可以启动应用了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一切正常，你应该可以看到 PostgreSQL 的输出，几秒后可以看到这样的重复信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;myapp_web_1 | [2014-01-17 17:16:29] INFO  WEBrick 1.3.1
myapp_web_1 | [2014-01-17 17:16:29] INFO  ruby 2.0.0 (2013-11-22) [x86_64-linux-gnu]
myapp_web_1 | [2014-01-17 17:16:29] INFO  WEBrick::HTTPServer#start: pid=1 port=3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后， 我们需要做的是创建数据库，打开另一个终端，运行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose run web rake db:create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 web 应用已经开始在你的 docker 守护进程里面监听着 3000 端口了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../_images/docker-compose-rails-screenshot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用-wordpress:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;使用 WordPress&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;本小节内容适合 &lt;code&gt;PHP&lt;/code&gt; 开发人员阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 可以很便捷的让 &lt;code&gt;Wordpress&lt;/code&gt; 运行在一个独立的环境中。&lt;/p&gt;

&lt;h3 id=&#34;创建空文件夹:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;创建空文件夹&lt;/h3&gt;

&lt;p&gt;假设新建一个名为 &lt;code&gt;wordpress&lt;/code&gt; 的文件夹，然后进入这个文件夹。&lt;/p&gt;

&lt;h3 id=&#34;创建-docker-compose-yml-文件:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;创建 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yeasy/docker_practice/blob/master/compose/demo/wordpress/docker-compose.yml&#34;&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt; 文件将开启一个 &lt;code&gt;wordpress&lt;/code&gt; 服务和一个独立的 &lt;code&gt;MySQL&lt;/code&gt; 实例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &amp;quot;3&amp;quot;
services:

   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - &amp;quot;8000:80&amp;quot;
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
volumes:
  db_data:
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;构建并运行项目:e45b139cc9940b249d4f3ed1864fc2b3&#34;&gt;构建并运行项目&lt;/h3&gt;

&lt;p&gt;运行 &lt;code&gt;docker-compose up -d&lt;/code&gt; Compose 就会拉取镜像再创建我们所需要的镜像，然后启动 &lt;code&gt;wordpress&lt;/code&gt; 和数据库容器。 接着浏览器访问 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 端口就能看到 &lt;code&gt;WordPress&lt;/code&gt; 安装界面了。&lt;/p&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dockerfile_best practices</title>
      <link>https://bibo19842003.github.io/docker/dockerfile_best-practices/</link>
      <pubDate>Thu, 28 Mar 2019 15:04:14 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/dockerfile_best-practices/</guid>
      <description>

&lt;h1 id=&#34;dockerfile-最佳实践&#34;&gt;Dockerfile 最佳实践&lt;/h1&gt;

&lt;p&gt;本附录是笔者对 Docker 官方文档中 &lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34;&gt;Best practices for writing Dockerfiles&lt;/a&gt; 的理解与翻译。&lt;/p&gt;

&lt;h2 id=&#34;一般性的指南和建议&#34;&gt;一般性的指南和建议&lt;/h2&gt;

&lt;h3 id=&#34;容器应该是短暂的&#34;&gt;容器应该是短暂的&lt;/h3&gt;

&lt;p&gt;通过 &lt;code&gt;Dockerfile&lt;/code&gt; 构建的镜像所启动的容器应该尽可能短暂（生命周期短）。「短暂」意味着可以停止和销毁容器，并且创建一个新容器并部署好所需的设置和配置工作量应该是极小的。&lt;/p&gt;

&lt;h3 id=&#34;使用-dockerignore-文件&#34;&gt;使用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;Dockerfile&lt;/code&gt; 构建镜像时最好是将 &lt;code&gt;Dockerfile&lt;/code&gt; 放置在一个新建的空目录下。然后将构建镜像所需要的文件添加到该目录中。为了提高构建镜像的效率，你可以在目录下新建一个 &lt;code&gt;.dockerignore&lt;/code&gt; 文件来指定要忽略的文件和目录。&lt;code&gt;.dockerignore&lt;/code&gt; 文件的排除模式语法和 Git 的 &lt;code&gt;.gitignore&lt;/code&gt; 文件相似。&lt;/p&gt;

&lt;h3 id=&#34;使用多阶段构建&#34;&gt;使用多阶段构建&lt;/h3&gt;

&lt;p&gt;在 &lt;code&gt;Docker 17.05&lt;/code&gt; 以上版本中，你可以使用 &lt;a href=&#34;../image/multistage-builds.md&#34;&gt;多阶段构建&lt;/a&gt; 来减少所构建镜像的大小。&lt;/p&gt;

&lt;h3 id=&#34;避免安装不必要的包&#34;&gt;避免安装不必要的包&lt;/h3&gt;

&lt;p&gt;为了降低复杂性、减少依赖、减小文件大小、节约构建时间，你应该避免安装任何不必要的包。例如，不要在数据库镜像中包含一个文本编辑器。&lt;/p&gt;

&lt;h3 id=&#34;一个容器只运行一个进程&#34;&gt;一个容器只运行一个进程&lt;/h3&gt;

&lt;p&gt;应该保证在一个容器中只运行一个进程。将多个应用解耦到不同容器中，保证了容器的横向扩展和复用。例如 web 应用应该包含三个容器：web应用、数据库、缓存。&lt;/p&gt;

&lt;p&gt;如果容器互相依赖，你可以使用 &lt;a href=&#34;../network/linking.md&#34;&gt;Docker 自定义网络&lt;/a&gt; 来把这些容器连接起来。&lt;/p&gt;

&lt;h3 id=&#34;镜像层数尽可能少&#34;&gt;镜像层数尽可能少&lt;/h3&gt;

&lt;p&gt;你需要在 &lt;code&gt;Dockerfile&lt;/code&gt; 可读性（也包括长期的可维护性）和减少层数之间做一个平衡。&lt;/p&gt;

&lt;h3 id=&#34;将多行参数排序&#34;&gt;将多行参数排序&lt;/h3&gt;

&lt;p&gt;将多行参数按字母顺序排序（比如要安装多个包时）。这可以帮助你避免重复包含同一个包，更新包列表时也更容易。也便于 &lt;code&gt;PRs&lt;/code&gt; 阅读和审查。建议在反斜杠符号 &lt;code&gt;\&lt;/code&gt; 之前添加一个空格，以增加可读性。&lt;/p&gt;

&lt;p&gt;下面是来自 &lt;code&gt;buildpack-deps&lt;/code&gt; 镜像的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
  bzr \
  cvs \
  git \
  mercurial \
  subversion
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;构建缓存&#34;&gt;构建缓存&lt;/h3&gt;

&lt;p&gt;在镜像的构建过程中，Docker 会遍历 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中的指令，然后按顺序执行。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。如果你不想在构建过程中使用缓存，你可以在 &lt;code&gt;docker build&lt;/code&gt; 命令中使用 &lt;code&gt;--no-cache=true&lt;/code&gt; 选项。&lt;/p&gt;

&lt;p&gt;但是，如果你想在构建的过程中使用缓存，你得明白什么时候会，什么时候不会找到匹配的镜像，遵循的基本规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从一个基础镜像开始（&lt;code&gt;FROM&lt;/code&gt; 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。&lt;/li&gt;
&lt;li&gt;在大多数情况下，只需要简单地对比 &lt;code&gt;Dockerfile&lt;/code&gt; 中的指令和子镜像。然而，有些指令需要更多的检查和解释。&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。&lt;/li&gt;
&lt;li&gt;除了 &lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 &lt;code&gt;RUN apt-get -y update&lt;/code&gt; 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一旦缓存失效，所有后续的 &lt;code&gt;Dockerfile&lt;/code&gt; 指令都将产生新的镜像，缓存不会被使用。&lt;/p&gt;

&lt;h2 id=&#34;dockerfile-指令&#34;&gt;Dockerfile 指令&lt;/h2&gt;

&lt;p&gt;下面针对 &lt;code&gt;Dockerfile&lt;/code&gt; 中各种指令的最佳编写方式给出建议。&lt;/p&gt;

&lt;h3 id=&#34;from&#34;&gt;FROM&lt;/h3&gt;

&lt;p&gt;尽可能使用当前官方仓库作为你构建镜像的基础。推荐使用 &lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;Alpine&lt;/a&gt; 镜像，因为它被严格控制并保持最小尺寸（目前小于 5 MB），但它仍然是一个完整的发行版。&lt;/p&gt;

&lt;h3 id=&#34;label&#34;&gt;LABEL&lt;/h3&gt;

&lt;p&gt;你可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等。每个标签一行，由 &lt;code&gt;LABEL&lt;/code&gt; 开头加上一个或多个标签对。下面的示例展示了各种不同的可能格式。&lt;code&gt;#&lt;/code&gt; 开头的行是注释内容。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：如果你的字符串中包含空格，必须将字符串放入引号中或者对空格使用转义。如果字符串内容本身就包含引号，必须对引号使用转义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Set one or more individual labels
LABEL com.example.version=&amp;quot;0.0.1-beta&amp;quot;

LABEL vendor=&amp;quot;ACME Incorporated&amp;quot;

LABEL com.example.release-date=&amp;quot;2015-02-12&amp;quot;

LABEL com.example.version.is-production=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个镜像可以包含多个标签，但建议将多个标签放入到一个 &lt;code&gt;LABEL&lt;/code&gt; 指令中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Set multiple labels at once, using line-continuation characters to break long lines
LABEL vendor=ACME\ Incorporated \
      com.example.is-beta= \
      com.example.is-production=&amp;quot;&amp;quot; \
      com.example.version=&amp;quot;0.0.1-beta&amp;quot; \
      com.example.release-date=&amp;quot;2015-02-12&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于标签可以接受的键值对，参考 &lt;a href=&#34;https://docs.docker.com/config/labels-custom-metadata/&#34;&gt;Understanding object labels&lt;/a&gt;。关于查询标签信息，参考 &lt;a href=&#34;https://docs.docker.com/config/labels-custom-metadata/&#34;&gt;Managing labels on objects&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;run&#34;&gt;RUN&lt;/h3&gt;

&lt;p&gt;为了保持 &lt;code&gt;Dockerfile&lt;/code&gt; 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 &lt;code&gt;RUN&lt;/code&gt; 指令用反斜杠 &lt;code&gt;\&lt;/code&gt; 分割成多行。&lt;/p&gt;

&lt;h4 id=&#34;apt-get&#34;&gt;apt-get&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令最常见的用法是安装包用的 &lt;code&gt;apt-get&lt;/code&gt;。因为 &lt;code&gt;RUN apt-get&lt;/code&gt; 指令会安装包，所以有几个问题需要注意。&lt;/p&gt;

&lt;p&gt;不要使用 &lt;code&gt;RUN apt-get upgrade&lt;/code&gt; 或 &lt;code&gt;dist-upgrade&lt;/code&gt;，因为许多基础镜像中的「必须」包不会在一个非特权容器中升级。如果基础镜像中的某个包过时了，你应该联系它的维护者。如果你确定某个特定的包，比如 &lt;code&gt;foo&lt;/code&gt;，需要升级，使用 &lt;code&gt;apt-get install -y foo&lt;/code&gt; 就行，该指令会自动升级 &lt;code&gt;foo&lt;/code&gt; 包。&lt;/p&gt;

&lt;p&gt;永远将 &lt;code&gt;RUN apt-get update&lt;/code&gt; 和 &lt;code&gt;apt-get install&lt;/code&gt; 组合成一条 &lt;code&gt;RUN&lt;/code&gt; 声明，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
        package-bar \
        package-baz \
        package-foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;apt-get update&lt;/code&gt; 放在一条单独的 &lt;code&gt;RUN&lt;/code&gt; 声明中会导致缓存问题以及后续的 &lt;code&gt;apt-get install&lt;/code&gt; 失败。比如，假设你有一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM ubuntu:18.04

RUN apt-get update

RUN apt-get install -y curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建镜像后，所有的层都在 Docker 的缓存中。假设你后来又修改了其中的 &lt;code&gt;apt-get install&lt;/code&gt; 添加了一个包：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM ubuntu:18.04

RUN apt-get update

RUN apt-get install -y curl nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker 发现修改后的 &lt;code&gt;RUN apt-get update&lt;/code&gt; 指令和之前的完全一样。所以，&lt;code&gt;apt-get update&lt;/code&gt; 不会执行，而是使用之前的缓存镜像。因为 &lt;code&gt;apt-get update&lt;/code&gt; 没有运行，后面的 &lt;code&gt;apt-get install&lt;/code&gt; 可能安装的是过时的 &lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;nginx&lt;/code&gt; 版本。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y&lt;/code&gt; 可以确保你的 Dockerfiles 每次安装的都是包的最新的版本，而且这个过程不需要进一步的编码或额外干预。这项技术叫作 &lt;code&gt;cache busting&lt;/code&gt;。你也可以显示指定一个包的版本号来达到 &lt;code&gt;cache-busting&lt;/code&gt;，这就是所谓的固定版本，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    package-bar \
    package-baz \
    package-foo=1.3.*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;固定版本会迫使构建过程检索特定的版本，而不管缓存中有什么。这项技术也可以减少因所需包中未预料到的变化而导致的失败。&lt;/p&gt;

&lt;p&gt;下面是一个 &lt;code&gt;RUN&lt;/code&gt; 指令的示例模板，展示了所有关于 &lt;code&gt;apt-get&lt;/code&gt; 的建议。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    aufs-tools \
    automake \
    build-essential \
    curl \
    dpkg-sig \
    libcap-dev \
    libsqlite3-dev \
    mercurial \
    reprepro \
    ruby1.9.1 \
    ruby1.9.1-dev \
    s3cmd=1.1.* \
 &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;s3cmd&lt;/code&gt; 指令指定了一个版本号 &lt;code&gt;1.1.*&lt;/code&gt;。如果之前的镜像使用的是更旧的版本，指定新的版本会导致 &lt;code&gt;apt-get udpate&lt;/code&gt; 缓存失效并确保安装的是新版本。&lt;/p&gt;

&lt;p&gt;另外，清理掉 apt 缓存 &lt;code&gt;var/lib/apt/lists&lt;/code&gt; 可以减小镜像大小。因为 &lt;code&gt;RUN&lt;/code&gt; 指令的开头为 &lt;code&gt;apt-get udpate&lt;/code&gt;，包缓存总是会在 &lt;code&gt;apt-get install&lt;/code&gt; 之前刷新。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：官方的 Debian 和 Ubuntu 镜像会自动运行 apt-get clean，所以不需要显式的调用 apt-get clean。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;cmd&#34;&gt;CMD&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 指令用于执行目标镜像中包含的软件，可以包含参数。&lt;code&gt;CMD&lt;/code&gt; 大多数情况下都应该以 &lt;code&gt;CMD [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;...]&lt;/code&gt; 的形式使用。因此，如果创建镜像的目的是为了部署某个服务(比如 &lt;code&gt;Apache&lt;/code&gt;)，你可能会执行类似于 &lt;code&gt;CMD [&amp;quot;apache2&amp;quot;, &amp;quot;-DFOREGROUND&amp;quot;]&lt;/code&gt; 形式的命令。我们建议任何服务镜像都使用这种形式的命令。&lt;/p&gt;

&lt;p&gt;多数情况下，&lt;code&gt;CMD&lt;/code&gt; 都需要一个交互式的 &lt;code&gt;shell&lt;/code&gt; (bash, Python, perl 等)，例如 &lt;code&gt;CMD [&amp;quot;perl&amp;quot;, &amp;quot;-de0&amp;quot;]&lt;/code&gt;，或者 &lt;code&gt;CMD [&amp;quot;PHP&amp;quot;, &amp;quot;-a&amp;quot;]&lt;/code&gt;。使用这种形式意味着，当你执行类似 &lt;code&gt;docker run -it python&lt;/code&gt; 时，你会进入一个准备好的 &lt;code&gt;shell&lt;/code&gt; 中。&lt;code&gt;CMD&lt;/code&gt; 应该在极少的情况下才能以 &lt;code&gt;CMD [&amp;quot;param&amp;quot;, &amp;quot;param&amp;quot;]&lt;/code&gt; 的形式与 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 协同使用，除非你和你的镜像使用者都对 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 的工作方式十分熟悉。&lt;/p&gt;

&lt;h3 id=&#34;expose&#34;&gt;EXPOSE&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 指令用于指定容器将要监听的端口。因此，你应该为你的应用程序使用常见的端口。例如，提供 &lt;code&gt;Apache&lt;/code&gt; web 服务的镜像应该使用 &lt;code&gt;EXPOSE 80&lt;/code&gt;，而提供 &lt;code&gt;MongoDB&lt;/code&gt; 服务的镜像使用 &lt;code&gt;EXPOSE 27017&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对于外部访问，用户可以在执行 &lt;code&gt;docker run&lt;/code&gt; 时使用一个标志来指示如何将指定的端口映射到所选择的端口。&lt;/p&gt;

&lt;h3 id=&#34;env&#34;&gt;ENV&lt;/h3&gt;

&lt;p&gt;为了方便新程序运行，你可以使用 &lt;code&gt;ENV&lt;/code&gt; 来为容器中安装的程序更新 &lt;code&gt;PATH&lt;/code&gt; 环境变量。例如使用 &lt;code&gt;ENV PATH /usr/local/nginx/bin:$PATH&lt;/code&gt; 来确保 &lt;code&gt;CMD [&amp;quot;nginx&amp;quot;]&lt;/code&gt; 能正确运行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt; 指令也可用于为你想要容器化的服务提供必要的环境变量，比如 Postgres 需要的 &lt;code&gt;PGDATA&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后，&lt;code&gt;ENV&lt;/code&gt; 也能用于设置常见的版本号，比如下面的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;ENV PG_MAJOR 9.3

ENV PG_VERSION 9.3.4

RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress &amp;amp;&amp;amp; …

ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似于程序中的常量，这种方法可以让你只需改变 &lt;code&gt;ENV&lt;/code&gt; 指令来自动的改变容器中的软件版本。&lt;/p&gt;

&lt;h3 id=&#34;add-和-copy&#34;&gt;ADD 和 COPY&lt;/h3&gt;

&lt;p&gt;虽然 &lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 功能类似，但一般优先使用 &lt;code&gt;COPY&lt;/code&gt;。因为它比 &lt;code&gt;ADD&lt;/code&gt; 更透明。&lt;code&gt;COPY&lt;/code&gt; 只支持简单将本地文件拷贝到容器中，而 &lt;code&gt;ADD&lt;/code&gt; 有一些并不明显的功能（比如本地 tar 提取和远程 URL 支持）。因此，&lt;code&gt;ADD&lt;/code&gt; 的最佳用例是将本地 tar 文件自动提取到镜像中，例如 &lt;code&gt;ADD rootfs.tar.xz&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果你的 &lt;code&gt;Dockerfile&lt;/code&gt; 有多个步骤需要使用上下文中不同的文件。单独 &lt;code&gt;COPY&lt;/code&gt; 每个文件，而不是一次性的 &lt;code&gt;COPY&lt;/code&gt; 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;COPY requirements.txt /tmp/

RUN pip install --requirement /tmp/requirements.txt

COPY . /tmp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果将 &lt;code&gt;COPY . /tmp/&lt;/code&gt; 放置在 &lt;code&gt;RUN&lt;/code&gt; 指令之前，只要 &lt;code&gt;.&lt;/code&gt; 目录中任何一个文件变化，都会导致后续指令的缓存失效。&lt;/p&gt;

&lt;p&gt;为了让镜像尽量小，最好不要使用 &lt;code&gt;ADD&lt;/code&gt; 指令从远程 URL 获取包，而是使用 &lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;wget&lt;/code&gt;。这样你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层。比如尽量避免下面的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;ADD http://example.com/big.tar.xz /usr/src/things/

RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things

RUN make -C /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而是应该使用下面这种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN mkdir -p /usr/src/things \
    &amp;amp;&amp;amp; curl -SL http://example.com/big.tar.xz \
    | tar -xJC /usr/src/things \
    &amp;amp;&amp;amp; make -C /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面使用的管道操作，所以没有中间文件需要删除。&lt;/p&gt;

&lt;p&gt;对于其他不需要 &lt;code&gt;ADD&lt;/code&gt; 的自动提取功能的文件或目录，你应该使用 &lt;code&gt;COPY&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;entrypoint&#34;&gt;ENTRYPOINT&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的最佳用处是设置镜像的主命令，允许将镜像当成命令本身来运行（用 &lt;code&gt;CMD&lt;/code&gt; 提供默认选项）。&lt;/p&gt;

&lt;p&gt;例如，下面的示例镜像提供了命令行工具 &lt;code&gt;s3cmd&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;ENTRYPOINT [&amp;quot;s3cmd&amp;quot;]

CMD [&amp;quot;--help&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在直接运行该镜像创建的容器会显示命令帮助：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run s3cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者提供正确的参数来执行某个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run s3cmd ls s3://mybucket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样镜像名可以当成命令行的参考。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令也可以结合一个辅助脚本使用，和前面命令行风格类似，即使启动工具需要不止一个步骤。&lt;/p&gt;

&lt;p&gt;例如，&lt;code&gt;Postgres&lt;/code&gt; 官方镜像使用下面的脚本作为 &lt;code&gt;ENTRYPOINT&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
set -e

if [ &amp;quot;$1&amp;quot; = &#39;postgres&#39; ]; then
    chown -R postgres &amp;quot;$PGDATA&amp;quot;

    if [ -z &amp;quot;$(ls -A &amp;quot;$PGDATA&amp;quot;)&amp;quot; ]; then
        gosu postgres initdb
    fi

    exec gosu postgres &amp;quot;$@&amp;quot;
fi

exec &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：该脚本使用了 Bash 的内置命令 exec，所以最后运行的进程就是容器的 PID 为 1 的进程。这样，进程就可以接收到任何发送给容器的 Unix 信号了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;该辅助脚本被拷贝到容器，并在容器启动时通过 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;COPY ./docker-entrypoint.sh /

ENTRYPOINT [&amp;quot;/docker-entrypoint.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该脚本可以让用户用几种不同的方式和 &lt;code&gt;Postgres&lt;/code&gt; 交互。&lt;/p&gt;

&lt;p&gt;你可以很简单地启动 &lt;code&gt;Postgres&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以执行 &lt;code&gt;Postgres&lt;/code&gt; 并传递参数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run postgres postgres --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，你还可以启动另外一个完全不同的工具，比如 &lt;code&gt;Bash&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it postgres bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;volume&#34;&gt;VOLUME&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;VOLUME&lt;/code&gt; 指令用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录。强烈建议使用 &lt;code&gt;VOLUME&lt;/code&gt; 来管理镜像中的可变部分和用户可以改变的部分。&lt;/p&gt;

&lt;h3 id=&#34;user&#34;&gt;USER&lt;/h3&gt;

&lt;p&gt;如果某个服务不需要特权执行，建议使用 &lt;code&gt;USER&lt;/code&gt; 指令切换到非 root 用户。先在 &lt;code&gt;Dockerfile&lt;/code&gt; 中使用类似 &lt;code&gt;RUN groupadd -r postgres &amp;amp;&amp;amp; useradd -r -g postgres postgres&lt;/code&gt; 的指令创建用户和用户组。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：在镜像中，用户和用户组每次被分配的 UID/GID 都是不确定的，下次重新构建镜像时被分配到的 UID/GID 可能会不一样。如果要依赖确定的 UID/GID，你应该显示的指定一个 UID/GID。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你应该避免使用 &lt;code&gt;sudo&lt;/code&gt;，因为它不可预期的 TTY 和信号转发行为可能造成的问题比它能解决的问题还多。如果你真的需要和 &lt;code&gt;sudo&lt;/code&gt; 类似的功能（例如，以 root 权限初始化某个守护进程，以非 root 权限执行它），你可以使用 &lt;a href=&#34;https://github.com/tianon/gosu&#34;&gt;gosu&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最后，为了减少层数和复杂度，避免频繁地使用 &lt;code&gt;USER&lt;/code&gt; 来回切换用户。&lt;/p&gt;

&lt;h3 id=&#34;workdir&#34;&gt;WORKDIR&lt;/h3&gt;

&lt;p&gt;为了清晰性和可靠性，你应该总是在 &lt;code&gt;WORKDIR&lt;/code&gt; 中使用绝对路径。另外，你应该使用 &lt;code&gt;WORKDIR&lt;/code&gt; 来替代类似于 &lt;code&gt;RUN cd ... &amp;amp;&amp;amp; do-something&lt;/code&gt; 的指令，后者难以阅读、排错和维护。&lt;/p&gt;

&lt;h2 id=&#34;官方镜像示例&#34;&gt;官方镜像示例&lt;/h2&gt;

&lt;p&gt;这些官方镜像的 Dockerfile 都是参考典范：&lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;https://github.com/docker-library/docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker data management</title>
      <link>https://bibo19842003.github.io/docker/docker-data-management/</link>
      <pubDate>Thu, 28 Mar 2019 14:20:25 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-data-management/</guid>
      <description>

&lt;h1 id=&#34;docker-数据管理:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;Docker 数据管理&lt;/h1&gt;

&lt;p&gt;在容器中管理数据主要有两种方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据卷（Volumes）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;挂载主机目录 (Bind mounts)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;数据卷:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;数据卷&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 可以在容器之间共享和重用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对 &lt;code&gt;数据卷&lt;/code&gt; 的修改会立马生效&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对 &lt;code&gt;数据卷&lt;/code&gt; 的更新，不会影响镜像&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 默认会一直存在，即使容器被删除&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意：&lt;code&gt;数据卷&lt;/code&gt; 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 &lt;code&gt;数据卷&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;创建一个数据卷:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;创建一个数据卷&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume create my-vol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看所有的 &lt;code&gt;数据卷&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume ls

local               my-vol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在主机里使用以下命令可以查看指定 &lt;code&gt;数据卷&lt;/code&gt; 的信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume inspect my-vol
[
    {
        &amp;quot;Driver&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Labels&amp;quot;: {},
        &amp;quot;Mountpoint&amp;quot;: &amp;quot;/var/lib/docker/volumes/my-vol/_data&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;my-vol&amp;quot;,
        &amp;quot;Options&amp;quot;: {},
        &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;启动一个挂载数据卷的容器:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;启动一个挂载数据卷的容器&lt;/h3&gt;

&lt;p&gt;在用 &lt;code&gt;docker run&lt;/code&gt; 命令的时候，使用 &lt;code&gt;--mount&lt;/code&gt; 标记来将 &lt;code&gt;数据卷&lt;/code&gt; 挂载到容器里。在一次 &lt;code&gt;docker run&lt;/code&gt; 中可以挂载多个 &lt;code&gt;数据卷&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面创建一个名为 &lt;code&gt;web&lt;/code&gt; 的容器，并加载一个 &lt;code&gt;数据卷&lt;/code&gt; 到容器的 &lt;code&gt;/webapp&lt;/code&gt; 目录。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -P \
    --name web \
    # -v my-vol:/wepapp \
    --mount source=my-vol,target=/webapp \
    training/webapp \
    python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看数据卷的具体信息:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;查看数据卷的具体信息&lt;/h3&gt;

&lt;p&gt;在主机里使用以下命令可以查看 &lt;code&gt;web&lt;/code&gt; 容器的信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 信息在 &amp;laquo;Mounts&amp;raquo; Key 下面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Mounts&amp;quot;: [
    {
        &amp;quot;Type&amp;quot;: &amp;quot;volume&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;my-vol&amp;quot;,
        &amp;quot;Source&amp;quot;: &amp;quot;/var/lib/docker/volumes/my-vol/_data&amp;quot;,
        &amp;quot;Destination&amp;quot;: &amp;quot;/app&amp;quot;,
        &amp;quot;Driver&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Mode&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;RW&amp;quot;: true,
        &amp;quot;Propagation&amp;quot;: &amp;quot;&amp;quot;
    }
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;删除数据卷:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;删除数据卷&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume rm my-vol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 &lt;code&gt;数据卷&lt;/code&gt;，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 &lt;code&gt;数据卷&lt;/code&gt;。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 &lt;code&gt;docker rm -v&lt;/code&gt; 这个命令。&lt;/p&gt;

&lt;p&gt;无主的数据卷可能会占据很多空间，要清理请使用以下命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume prune
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;挂载主机目录:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;挂载主机目录&lt;/h2&gt;

&lt;h3 id=&#34;挂载一个主机目录作为数据卷:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;挂载一个主机目录作为数据卷&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;--mount&lt;/code&gt; 标记可以指定挂载一个本地主机的目录到容器中去。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -P \
    --name web \
    # -v /src/webapp:/opt/webapp \
    --mount type=bind,source=/src/webapp,target=/opt/webapp \
    training/webapp \
    python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的命令加载主机的 &lt;code&gt;/src/webapp&lt;/code&gt; 目录到容器的 &lt;code&gt;/opt/webapp&lt;/code&gt;目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，以前使用 &lt;code&gt;-v&lt;/code&gt; 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，现在使用 &lt;code&gt;--mount&lt;/code&gt; 参数时如果本地目录不存在，Docker 会报错。&lt;/p&gt;

&lt;p&gt;Docker 挂载主机目录的默认权限是 &lt;code&gt;读写&lt;/code&gt;，用户也可以通过增加 &lt;code&gt;readonly&lt;/code&gt; 指定为 &lt;code&gt;只读&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -P \
    --name web \
    # -v /src/webapp:/opt/webapp:ro \
    --mount type=bind,source=/src/webapp,target=/opt/webapp,readonly \
    training/webapp \
    python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加了 &lt;code&gt;readonly&lt;/code&gt; 之后，就挂载为 &lt;code&gt;只读&lt;/code&gt; 了。如果你在容器内 &lt;code&gt;/opt/webapp&lt;/code&gt; 目录新建文件，会显示如下错误&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/webapp # touch new.txt
touch: new.txt: Read-only file system
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看数据卷的具体信息-1:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;查看数据卷的具体信息&lt;/h3&gt;

&lt;p&gt;在主机里使用以下命令可以查看 &lt;code&gt;web&lt;/code&gt; 容器的信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;挂载主机目录&lt;/code&gt; 的配置信息在 &amp;laquo;Mounts&amp;raquo; Key 下面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Mounts&amp;quot;: [
    {
        &amp;quot;Type&amp;quot;: &amp;quot;bind&amp;quot;,
        &amp;quot;Source&amp;quot;: &amp;quot;/src/webapp&amp;quot;,
        &amp;quot;Destination&amp;quot;: &amp;quot;/opt/webapp&amp;quot;,
        &amp;quot;Mode&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;RW&amp;quot;: true,
        &amp;quot;Propagation&amp;quot;: &amp;quot;rprivate&amp;quot;
    }
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;挂载一个本地主机文件作为数据卷:c37e8a6f813e9f74845d213d5c5f7c4d&#34;&gt;挂载一个本地主机文件作为数据卷&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--mount&lt;/code&gt; 标记也可以从主机挂载单个文件到容器中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it \
   # -v $HOME/.bash_history:/root/.bash_history \
   --mount type=bind,source=$HOME/.bash_history,target=/root/.bash_history \
   ubuntu:18.04 \
   bash

root@2affd44b4667:/# history
1  ls
2  diskutil list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以记录在容器输入过的命令了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker contain</title>
      <link>https://bibo19842003.github.io/docker/docker-contain/</link>
      <pubDate>Thu, 28 Mar 2019 14:10:30 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-contain/</guid>
      <description>

&lt;h1 id=&#34;操作-docker-容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;操作 Docker 容器&lt;/h1&gt;

&lt;p&gt;容器是 Docker 又一核心概念。&lt;/p&gt;

&lt;p&gt;简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。&lt;/p&gt;

&lt;p&gt;本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。&lt;/p&gt;

&lt;h2 id=&#34;启动容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;启动容器&lt;/h2&gt;

&lt;p&gt;启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（&lt;code&gt;stopped&lt;/code&gt;）的容器重新启动。&lt;/p&gt;

&lt;p&gt;因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。&lt;/p&gt;

&lt;h3 id=&#34;新建并启动:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;新建并启动&lt;/h3&gt;

&lt;p&gt;所需要的命令主要为 &lt;code&gt;docker run&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如，下面的命令输出一个 “Hello World”，之后终止容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run ubuntu:18.04 /bin/echo &#39;Hello world&#39;
Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这跟在本地直接执行 &lt;code&gt;/bin/echo &#39;hello world&#39;&lt;/code&gt; 几乎感觉不出任何区别。&lt;/p&gt;

&lt;p&gt;下面的命令则启动一个 bash 终端，允许用户进行交互。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -t -i ubuntu:18.04 /bin/bash
root@af8bae53bdd3:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;-t&lt;/code&gt; 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， &lt;code&gt;-i&lt;/code&gt; 则让容器的标准输入保持打开。&lt;/p&gt;

&lt;p&gt;在交互模式下，用户可以通过所创建的终端来输入命令，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@af8bae53bdd3:/# pwd
/
root@af8bae53bdd3:/# ls
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当利用 &lt;code&gt;docker run&lt;/code&gt; 来创建容器时，Docker 在后台运行的标准操作包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检查本地是否存在指定的镜像，不存在就从公有仓库下载&lt;/li&gt;
&lt;li&gt;利用镜像创建并启动一个容器&lt;/li&gt;
&lt;li&gt;分配一个文件系统，并在只读的镜像层外面挂载一层可读写层&lt;/li&gt;
&lt;li&gt;从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去&lt;/li&gt;
&lt;li&gt;从地址池配置一个 ip 地址给容器&lt;/li&gt;
&lt;li&gt;执行用户指定的应用程序&lt;/li&gt;
&lt;li&gt;执行完毕后容器被终止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;启动已终止容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;启动已终止容器&lt;/h3&gt;

&lt;p&gt;可以利用 &lt;code&gt;docker container start&lt;/code&gt; 命令，直接将一个已经终止的容器启动运行。&lt;/p&gt;

&lt;p&gt;容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 &lt;code&gt;ps&lt;/code&gt; 或 &lt;code&gt;top&lt;/code&gt; 来查看进程信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@ba267838cc1b:/# ps
  PID TTY          TIME CMD
    1 ?        00:00:00 bash
   11 ?        00:00:00 ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。&lt;/p&gt;

&lt;h2 id=&#34;后台运行:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;后台运行&lt;/h2&gt;

&lt;p&gt;更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 &lt;code&gt;-d&lt;/code&gt; 参数来实现。&lt;/p&gt;

&lt;p&gt;下面举两个例子来说明一下。&lt;/p&gt;

&lt;p&gt;如果不使用 &lt;code&gt;-d&lt;/code&gt; 参数运行容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run ubuntu:18.04 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
hello world
hello world
hello world
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容器会把输出的结果 (STDOUT) 打印到宿主机上面&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code&gt;-d&lt;/code&gt; 参数运行容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d ubuntu:18.04 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 &lt;code&gt;docker logs&lt;/code&gt; 查看)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 容器是否会长久运行，是和 &lt;code&gt;docker run&lt;/code&gt; 指定的命令有关，和 &lt;code&gt;-d&lt;/code&gt; 参数无关。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;-d&lt;/code&gt; 参数启动后会返回一个唯一的 id，也可以通过 &lt;code&gt;docker container ls&lt;/code&gt; 命令来查看容器信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker container ls
CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES
77b2dc01fe0f  ubuntu:18.04  /bin/sh -c &#39;while tr  2 minutes ago  Up 1 minute        agitated_wright
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要获取容器的输出信息，可以通过 &lt;code&gt;docker container logs&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container logs [container ID or NAMES]
hello world
hello world
hello world
. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;终止容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;终止容器&lt;/h2&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker container stop&lt;/code&gt; 来终止一个运行中的容器。&lt;/p&gt;

&lt;p&gt;此外，当 Docker 容器中指定的应用终结时，容器也自动终止。&lt;/p&gt;

&lt;p&gt;例如对于上一章节中只启动了一个终端的容器，用户通过 &lt;code&gt;exit&lt;/code&gt; 命令或 &lt;code&gt;Ctrl+d&lt;/code&gt; 来退出终端时，所创建的容器立刻终止。&lt;/p&gt;

&lt;p&gt;终止状态的容器可以用 &lt;code&gt;docker container ls -a&lt;/code&gt; 命令看到。例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container ls -a
CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES
ba267838cc1b        ubuntu:18.04             &amp;quot;/bin/bash&amp;quot;            30 minutes ago      Exited (0) About a minute ago                       trusting_newton
98e5efa7d997        training/webapp:latest   &amp;quot;python app.py&amp;quot;        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;处于终止状态的容器，可以通过 &lt;code&gt;docker container start&lt;/code&gt; 命令来重新启动。&lt;/p&gt;

&lt;p&gt;此外，&lt;code&gt;docker container restart&lt;/code&gt; 命令会将一个运行态的容器终止，然后再重新启动它。&lt;/p&gt;

&lt;h2 id=&#34;进入容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;进入容器&lt;/h2&gt;

&lt;p&gt;在使用 &lt;code&gt;-d&lt;/code&gt; 参数时，容器启动后会进入后台。&lt;/p&gt;

&lt;p&gt;某些时候需要进入容器进行操作，包括使用 &lt;code&gt;docker attach&lt;/code&gt; 命令或 &lt;code&gt;docker exec&lt;/code&gt; 命令，推荐大家使用 &lt;code&gt;docker exec&lt;/code&gt; 命令，原因会在下面说明。&lt;/p&gt;

&lt;h3 id=&#34;attach-命令:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;&lt;code&gt;attach&lt;/code&gt; 命令&lt;/h3&gt;

&lt;p&gt;下面示例如何使用 &lt;code&gt;docker attach&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit ubuntu
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550

$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
243c32535da7        ubuntu:latest       &amp;quot;/bin/bash&amp;quot;         18 seconds ago      Up 17 seconds                           nostalgic_hypatia

$ docker attach 243c
root@243c32535da7:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：&lt;/em&gt; 如果从这个 stdin 中 exit，会导致容器的停止。&lt;/p&gt;

&lt;h3 id=&#34;exec-命令:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;&lt;code&gt;exec&lt;/code&gt; 命令&lt;/h3&gt;

&lt;h4 id=&#34;i-t-参数:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;-i -t 参数&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;docker exec&lt;/code&gt; 后边可以跟多个参数，这里主要说明 &lt;code&gt;-i&lt;/code&gt; &lt;code&gt;-t&lt;/code&gt; 参数。&lt;/p&gt;

&lt;p&gt;只用 &lt;code&gt;-i&lt;/code&gt; 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。&lt;/p&gt;

&lt;p&gt;当 &lt;code&gt;-i&lt;/code&gt; &lt;code&gt;-t&lt;/code&gt; 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit ubuntu
69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6

$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
69d137adef7a        ubuntu:latest       &amp;quot;/bin/bash&amp;quot;         18 seconds ago      Up 17 seconds                           zealous_swirles

$ docker exec -i 69d1 bash
ls
bin
boot
dev
...

$ docker exec -it 69d1 bash
root@69d137adef7a:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 &lt;code&gt;docker exec&lt;/code&gt; 的原因。&lt;/p&gt;

&lt;p&gt;更多参数说明请使用 &lt;code&gt;docker exec --help&lt;/code&gt; 查看。&lt;/p&gt;

&lt;h2 id=&#34;导出和导入容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;导出和导入容器&lt;/h2&gt;

&lt;h3 id=&#34;导出容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;导出容器&lt;/h3&gt;

&lt;p&gt;如果要导出本地某个容器，可以使用 &lt;code&gt;docker export&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
7691a814370e        ubuntu:18.04        &amp;quot;/bin/bash&amp;quot;         36 hours ago        Exited (0) 21 hours ago                       test
$ docker export 7691a814370e &amp;gt; ubuntu.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样将导出容器快照到本地文件。&lt;/p&gt;

&lt;h3 id=&#34;导入容器快照:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;导入容器快照&lt;/h3&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker import&lt;/code&gt; 从容器快照文件中再导入为镜像，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat ubuntu.tar | docker import - test/ubuntu:v1.0
$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
test/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此外，也可以通过指定 URL 或者某个目录来导入，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker import http://example.com/exampleimage.tgz example/imagerepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注：用户既可以使用 &lt;code&gt;docker load&lt;/code&gt; 来导入镜像存储文件到本地镜像库，也可以使用 &lt;code&gt;docker import&lt;/code&gt; 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;删除容器&lt;/h2&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker container rm&lt;/code&gt; 来删除一个处于终止状态的容器。例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container rm  trusting_newton
trusting_newton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要删除一个运行中的容器，可以添加 &lt;code&gt;-f&lt;/code&gt; 参数。Docker 会发送 &lt;code&gt;SIGKILL&lt;/code&gt; 信号给容器。&lt;/p&gt;

&lt;h2 id=&#34;清理所有处于终止状态的容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;清理所有处于终止状态的容器&lt;/h2&gt;

&lt;p&gt;用 &lt;code&gt;docker container ls -a&lt;/code&gt; 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container prune
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker concept</title>
      <link>https://bibo19842003.github.io/docker/docker-concept/</link>
      <pubDate>Thu, 28 Mar 2019 12:00:37 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-concept/</guid>
      <description>

&lt;h1 id=&#34;基本概念&#34;&gt;基本概念&lt;/h1&gt;

&lt;p&gt;Docker 包括三个基本概念
* 镜像（&lt;code&gt;Image&lt;/code&gt;）
* 容器（&lt;code&gt;Container&lt;/code&gt;）
* 仓库（&lt;code&gt;Repository&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;理解了这三个概念，就理解了 Docker 的整个生命周期。&lt;/p&gt;

&lt;h2 id=&#34;docker-镜像&#34;&gt;Docker 镜像&lt;/h2&gt;

&lt;p&gt;我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 &lt;code&gt;root&lt;/code&gt; 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 &lt;code&gt;root&lt;/code&gt; 文件系统。比如官方镜像 &lt;code&gt;ubuntu:18.04&lt;/code&gt; 就包含了完整的一套 Ubuntu 18.04 最小系统的 &lt;code&gt;root&lt;/code&gt; 文件系统。&lt;/p&gt;

&lt;p&gt;Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。&lt;/p&gt;

&lt;h3 id=&#34;分层存储&#34;&gt;分层存储&lt;/h3&gt;

&lt;p&gt;因为镜像包含操作系统完整的 &lt;code&gt;root&lt;/code&gt; 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Union_mount&#34;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。&lt;/p&gt;

&lt;p&gt;镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。&lt;/p&gt;

&lt;p&gt;分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;

&lt;p&gt;关于镜像构建，将会在后续相关章节中做进一步的讲解。&lt;/p&gt;

&lt;h2 id=&#34;docker-容器&#34;&gt;Docker 容器&lt;/h2&gt;

&lt;p&gt;镜像（&lt;code&gt;Image&lt;/code&gt;）和容器（&lt;code&gt;Container&lt;/code&gt;）的关系，就像是面向对象程序设计中的 &lt;code&gt;类&lt;/code&gt; 和 &lt;code&gt;实例&lt;/code&gt; 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。&lt;/p&gt;

&lt;p&gt;容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_namespaces&#34;&gt;命名空间&lt;/a&gt;。因此容器可以拥有自己的 &lt;code&gt;root&lt;/code&gt; 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。&lt;/p&gt;

&lt;p&gt;前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 &lt;strong&gt;容器存储层&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。&lt;/p&gt;

&lt;p&gt;按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 &lt;a href=&#34;../data_management/volume.md&#34;&gt;数据卷（Volume）&lt;/a&gt;、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。&lt;/p&gt;

&lt;p&gt;数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。&lt;/p&gt;

&lt;h2 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h2&gt;

&lt;p&gt;镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，&lt;a href=&#34;../repository/registry.md&#34;&gt;Docker Registry&lt;/a&gt; 就是这样的服务。&lt;/p&gt;

&lt;p&gt;一个 &lt;strong&gt;Docker Registry&lt;/strong&gt; 中可以包含多个 &lt;strong&gt;仓库&lt;/strong&gt;（&lt;code&gt;Repository&lt;/code&gt;）；每个仓库可以包含多个 &lt;strong&gt;标签&lt;/strong&gt;（&lt;code&gt;Tag&lt;/code&gt;）；每个标签对应一个镜像。&lt;/p&gt;

&lt;p&gt;通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;code&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/code&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 &lt;code&gt;latest&lt;/code&gt; 作为默认标签。&lt;/p&gt;

&lt;p&gt;以 &lt;a href=&#34;https://hub.docker.com/_/ubuntu&#34;&gt;Ubuntu 镜像&lt;/a&gt; 为例，&lt;code&gt;ubuntu&lt;/code&gt; 是仓库的名字，其内包含有不同的版本标签，如，&lt;code&gt;16.04&lt;/code&gt;, &lt;code&gt;18.04&lt;/code&gt;。我们可以通过 &lt;code&gt;ubuntu:14.04&lt;/code&gt;，或者 &lt;code&gt;ubuntu:18.04&lt;/code&gt; 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 &lt;code&gt;ubuntu&lt;/code&gt;，那将视为 &lt;code&gt;ubuntu:latest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;仓库名经常以 &lt;em&gt;两段式路径&lt;/em&gt; 形式出现，比如 &lt;code&gt;jwilder/nginx-proxy&lt;/code&gt;，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。&lt;/p&gt;

&lt;h3 id=&#34;docker-registry-公开服务&#34;&gt;Docker Registry 公开服务&lt;/h3&gt;

&lt;p&gt;Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。&lt;/p&gt;

&lt;p&gt;最常使用的 Registry 公开服务是官方的 &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 &lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt; 的 &lt;a href=&#34;https://quay.io/repository/&#34;&gt;Quay.io&lt;/a&gt;，CoreOS 相关的镜像存储在这里；Google 的 &lt;a href=&#34;https://cloud.google.com/container-registry/&#34;&gt;Google Container Registry&lt;/a&gt;，&lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 的镜像使用的就是这个服务。&lt;/p&gt;

&lt;p&gt;由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（&lt;code&gt;Registry Mirror&lt;/code&gt;），这些镜像服务被称为&lt;strong&gt;加速器&lt;/strong&gt;。常见的有 &lt;a href=&#34;https://cr.console.aliyun.com/#/accelerator&#34;&gt;阿里云加速器&lt;/a&gt;、&lt;a href=&#34;https://www.daocloud.io/mirror#accelerator-doc&#34;&gt;DaoCloud 加速器&lt;/a&gt; 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 &lt;a href=&#34;../install/mirror.md&#34;&gt;安装 Docker&lt;/a&gt;  一节中有详细的配置方法。&lt;/p&gt;

&lt;p&gt;国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 &lt;a href=&#34;https://hub.tenxcloud.com/&#34;&gt;时速云镜像仓库&lt;/a&gt;、&lt;a href=&#34;https://c.163.com/hub#/m/library/&#34;&gt;网易云镜像服务&lt;/a&gt;、&lt;a href=&#34;https://hub.daocloud.io/&#34;&gt;DaoCloud 镜像市场&lt;/a&gt;、&lt;a href=&#34;https://cr.console.aliyun.com&#34;&gt;阿里云镜像库&lt;/a&gt; 等。&lt;/p&gt;

&lt;h3 id=&#34;私有-docker-registry&#34;&gt;私有 Docker Registry&lt;/h3&gt;

&lt;p&gt;除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 &lt;a href=&#34;https://hub.docker.com/_/registry/&#34;&gt;Docker Registry&lt;/a&gt; 镜像，可以直接使用做为私有 Registry 服务。在 &lt;a href=&#34;../repository/registry.md&#34;&gt;私有仓库&lt;/a&gt; 一节中，会有进一步的搭建私有 Registry 服务的讲解。&lt;/p&gt;

&lt;p&gt;开源的 Docker Registry 镜像只提供了 &lt;a href=&#34;https://docs.docker.com/registry/spec/api/&#34;&gt;Docker Registry API&lt;/a&gt; 的服务端实现，足以支持 &lt;code&gt;docker&lt;/code&gt; 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 &lt;a href=&#34;https://docs.docker.com/datacenter/dtr/2.0/&#34;&gt;Docker Trusted Registry&lt;/a&gt; 中，提供了这些高级功能。&lt;/p&gt;

&lt;p&gt;除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，&lt;a href=&#34;https://github.com/goharbor/harbor&#34;&gt;Harbor&lt;/a&gt; 和 &lt;a href=&#34;../repository/nexus3_registry.md&#34;&gt;Sonatype Nexus&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;为什么要使用-docker&#34;&gt;为什么要使用 Docker？&lt;/h2&gt;

&lt;p&gt;作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。&lt;/p&gt;

&lt;h3 id=&#34;更高效的利用系统资源&#34;&gt;更高效的利用系统资源&lt;/h3&gt;

&lt;p&gt;由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。&lt;/p&gt;

&lt;h3 id=&#34;更快速的启动时间&#34;&gt;更快速的启动时间&lt;/h3&gt;

&lt;p&gt;传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。&lt;/p&gt;

&lt;h3 id=&#34;一致的运行环境&#34;&gt;一致的运行环境&lt;/h3&gt;

&lt;p&gt;开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 &lt;em&gt;「这段代码在我机器上没问题啊」&lt;/em&gt; 这类问题。&lt;/p&gt;

&lt;h3 id=&#34;持续交付和部署&#34;&gt;持续交付和部署&lt;/h3&gt;

&lt;p&gt;对开发和运维（&lt;a href=&#34;https://zh.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt;）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。&lt;/p&gt;

&lt;p&gt;使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 &lt;a href=&#34;../image/dockerfile/&#34;&gt;Dockerfile&lt;/a&gt; 来进行镜像构建，并结合 &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;持续集成(Continuous Integration)&lt;/a&gt; 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;持续部署(Continuous Delivery/Deployment)&lt;/a&gt; 系统进行自动部署。&lt;/p&gt;

&lt;p&gt;而且使用 &lt;code&gt;Dockerfile&lt;/code&gt; 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。&lt;/p&gt;

&lt;h3 id=&#34;更轻松的迁移&#34;&gt;更轻松的迁移&lt;/h3&gt;

&lt;p&gt;由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。&lt;/p&gt;

&lt;h3 id=&#34;更轻松的维护和扩展&#34;&gt;更轻松的维护和扩展&lt;/h3&gt;

&lt;p&gt;Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 &lt;a href=&#34;https://hub.docker.com/search/?type=image&amp;amp;image_filter=official&#34;&gt;官方镜像&lt;/a&gt;，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。&lt;/p&gt;

&lt;h3 id=&#34;对比传统虚拟机总结&#34;&gt;对比传统虚拟机总结&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;特性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;容器&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;启动&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;秒级&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;硬盘使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;MB&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;GB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;性能&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;接近原生&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弱于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;系统支持量&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dockerfile</title>
      <link>https://bibo19842003.github.io/docker/dockerfile/</link>
      <pubDate>Thu, 28 Mar 2019 09:02:21 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/dockerfile/</guid>
      <description>

&lt;h2 id=&#34;使用-dockerfile-定制镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;使用 Dockerfile 定制镜像&lt;/h2&gt;

&lt;p&gt;从刚才的 &lt;code&gt;docker commit&lt;/code&gt; 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。&lt;/p&gt;

&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的 &lt;strong&gt;指令(Instruction)&lt;/strong&gt;，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。&lt;/p&gt;

&lt;p&gt;还以之前定制 &lt;code&gt;nginx&lt;/code&gt; 镜像为例，这次我们使用 Dockerfile 来定制。&lt;/p&gt;

&lt;p&gt;在一个空白目录中，建立一个文本文件，并命名为 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir mynginx
$ cd mynginx
$ touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM nginx
RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，&lt;code&gt;FROM&lt;/code&gt; 和 &lt;code&gt;RUN&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;from-指定基础镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;FROM 指定基础镜像&lt;/h3&gt;

&lt;p&gt;所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 &lt;code&gt;nginx&lt;/code&gt; 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 &lt;code&gt;FROM&lt;/code&gt; 就是指定 &lt;strong&gt;基础镜像&lt;/strong&gt;，因此一个 &lt;code&gt;Dockerfile&lt;/code&gt; 中 &lt;code&gt;FROM&lt;/code&gt; 是必备的指令，并且必须是第一条指令。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&#34;https://hub.docker.com/search?q=&amp;amp;type=image&amp;amp;image_filter=official&#34;&gt;Docker Hub&lt;/a&gt; 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/redis/&#34;&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/mongo/&#34;&gt;&lt;code&gt;mongo&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/mysql/&#34;&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/httpd/&#34;&gt;&lt;code&gt;httpd&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/php/&#34;&gt;&lt;code&gt;php&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/tomcat/&#34;&gt;&lt;code&gt;tomcat&lt;/code&gt;&lt;/a&gt; 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 &lt;a href=&#34;https://hub.docker.com/_/node&#34;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/openjdk/&#34;&gt;&lt;code&gt;openjdk&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/python/&#34;&gt;&lt;code&gt;python&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/ruby/&#34;&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/golang/&#34;&gt;&lt;code&gt;golang&lt;/code&gt;&lt;/a&gt; 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。&lt;/p&gt;

&lt;p&gt;如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 &lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34;&gt;&lt;code&gt;ubuntu&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/debian/&#34;&gt;&lt;code&gt;debian&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/centos/&#34;&gt;&lt;code&gt;centos&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/fedora/&#34;&gt;&lt;code&gt;fedora&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;&lt;code&gt;alpine&lt;/code&gt;&lt;/a&gt; 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。&lt;/p&gt;

&lt;p&gt;除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 &lt;code&gt;scratch&lt;/code&gt;。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM scratch
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你以 &lt;code&gt;scratch&lt;/code&gt; 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。&lt;/p&gt;

&lt;p&gt;不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 &lt;a href=&#34;https://hub.docker.com/_/swarm/&#34;&gt;&lt;code&gt;swarm&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://quay.io/repository/coreos/etcd&#34;&gt;&lt;code&gt;coreos/etcd&lt;/code&gt;&lt;/a&gt;。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 &lt;code&gt;FROM scratch&lt;/code&gt; 会让镜像体积更加小巧。使用 &lt;a href=&#34;https://golang.org/&#34;&gt;Go 语言&lt;/a&gt; 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。&lt;/p&gt;

&lt;h3 id=&#34;run-执行命令:13a98cce61a7c185eb25fd01e8410188&#34;&gt;RUN 执行命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令是用来执行命令行命令的。由于命令行的强大能力，&lt;code&gt;RUN&lt;/code&gt; 指令在定制镜像时是最常用的指令之一。其格式有两种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;shell&lt;/em&gt; 格式：&lt;code&gt;RUN &amp;lt;命令&amp;gt;&lt;/code&gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 &lt;code&gt;RUN&lt;/code&gt; 指令就是这种格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;exec&lt;/em&gt; 格式：&lt;code&gt;RUN [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;]&lt;/code&gt;，这更像是函数调用中的格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既然 &lt;code&gt;RUN&lt;/code&gt; 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:stretch

RUN apt-get update
RUN apt-get install -y gcc libc6-dev make wget
RUN wget -O redis.tar.gz &amp;quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&amp;quot;
RUN mkdir -p /usr/src/redis
RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
RUN make -C /usr/src/redis
RUN make -C /usr/src/redis install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前说过，Dockerfile 中每一个指令都会建立一层，&lt;code&gt;RUN&lt;/code&gt; 也不例外。每一个 &lt;code&gt;RUN&lt;/code&gt; 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，&lt;code&gt;commit&lt;/code&gt; 这一层的修改，构成新的镜像。&lt;/p&gt;

&lt;p&gt;而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。
这是很多初学 Docker 的人常犯的一个错误。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;上面的 &lt;code&gt;Dockerfile&lt;/code&gt; 正确的写法应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:stretch

RUN buildDeps=&#39;gcc libc6-dev make wget&#39; \
    &amp;amp;&amp;amp; apt-get update \
    &amp;amp;&amp;amp; apt-get install -y $buildDeps \
    &amp;amp;&amp;amp; wget -O redis.tar.gz &amp;quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&amp;quot; \
    &amp;amp;&amp;amp; mkdir -p /usr/src/redis \
    &amp;amp;&amp;amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
    &amp;amp;&amp;amp; make -C /usr/src/redis \
    &amp;amp;&amp;amp; make -C /usr/src/redis install \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \
    &amp;amp;&amp;amp; rm redis.tar.gz \
    &amp;amp;&amp;amp; rm -r /usr/src/redis \
    &amp;amp;&amp;amp; apt-get purge -y --auto-remove $buildDeps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 &lt;code&gt;RUN&lt;/code&gt; 对一一对应不同的命令，而是仅仅使用一个 &lt;code&gt;RUN&lt;/code&gt; 指令，并使用 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。&lt;/p&gt;

&lt;p&gt;并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 &lt;code&gt;\&lt;/code&gt; 的命令换行方式，以及行首 &lt;code&gt;#&lt;/code&gt; 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。&lt;/p&gt;

&lt;p&gt;此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 &lt;code&gt;apt&lt;/code&gt; 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。&lt;/p&gt;

&lt;p&gt;很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。&lt;/p&gt;

&lt;h3 id=&#34;构建镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;构建镜像&lt;/h3&gt;

&lt;p&gt;好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;Dockerfile&lt;/code&gt; 文件所在目录执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM nginx
 ---&amp;gt; e43d811ce2f4
Step 2 : RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
 ---&amp;gt; Running in 9cdc27646c7b
 ---&amp;gt; 44aa4490ce2c
Removing intermediate container 9cdc27646c7b
Successfully built 44aa4490ce2c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 &lt;code&gt;Step 2&lt;/code&gt; 中，如同我们之前所说的那样，&lt;code&gt;RUN&lt;/code&gt; 指令启动了一个容器 &lt;code&gt;9cdc27646c7b&lt;/code&gt;，执行了所要求的命令，并最后提交了这一层 &lt;code&gt;44aa4490ce2c&lt;/code&gt;，随后删除了所用到的这个容器 &lt;code&gt;9cdc27646c7b&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这里我们使用了 &lt;code&gt;docker build&lt;/code&gt; 命令进行镜像构建。其格式为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build [选项] &amp;lt;上下文路径/URL/-&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里我们指定了最终镜像的名称 &lt;code&gt;-t nginx:v3&lt;/code&gt;，构建成功后，我们可以像之前运行 &lt;code&gt;nginx:v2&lt;/code&gt; 那样来运行这个镜像，其结果会和 &lt;code&gt;nginx:v2&lt;/code&gt; 一样。&lt;/p&gt;

&lt;h3 id=&#34;镜像构建上下文-context:13a98cce61a7c185eb25fd01e8410188&#34;&gt;镜像构建上下文（Context）&lt;/h3&gt;

&lt;p&gt;如果注意，会看到 &lt;code&gt;docker build&lt;/code&gt; 命令最后有一个 &lt;code&gt;.&lt;/code&gt;。&lt;code&gt;.&lt;/code&gt; 表示当前目录，而 &lt;code&gt;Dockerfile&lt;/code&gt; 就在当前目录，因此不少初学者以为这个路径是在指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 &lt;strong&gt;上下文路径&lt;/strong&gt;。那么什么是上下文呢？&lt;/p&gt;

&lt;p&gt;首先我们要理解 &lt;code&gt;docker build&lt;/code&gt; 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 &lt;a href=&#34;https://docs.docker.com/develop/sdk/&#34;&gt;Docker Remote API&lt;/a&gt;，而如 &lt;code&gt;docker&lt;/code&gt; 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 &lt;code&gt;docker&lt;/code&gt; 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。&lt;/p&gt;

&lt;p&gt;当我们进行镜像构建的时候，并非所有定制都会通过 &lt;code&gt;RUN&lt;/code&gt; 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 &lt;code&gt;COPY&lt;/code&gt; 指令、&lt;code&gt;ADD&lt;/code&gt; 指令等。而 &lt;code&gt;docker build&lt;/code&gt; 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？&lt;/p&gt;

&lt;p&gt;这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，&lt;code&gt;docker build&lt;/code&gt; 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。&lt;/p&gt;

&lt;p&gt;如果在 &lt;code&gt;Dockerfile&lt;/code&gt; 中这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY ./package.json /app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这并不是要复制执行 &lt;code&gt;docker build&lt;/code&gt; 命令所在的目录下的 &lt;code&gt;package.json&lt;/code&gt;，也不是复制 &lt;code&gt;Dockerfile&lt;/code&gt; 所在目录下的 &lt;code&gt;package.json&lt;/code&gt;，而是复制 &lt;strong&gt;上下文（context）&lt;/strong&gt; 目录下的 &lt;code&gt;package.json&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此，&lt;code&gt;COPY&lt;/code&gt; 这类指令中的源文件的路径都是*相对路径*。这也是初学者经常会问的为什么 &lt;code&gt;COPY ../package.json /app&lt;/code&gt; 或者 &lt;code&gt;COPY /opt/xxxx /app&lt;/code&gt; 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。&lt;/p&gt;

&lt;p&gt;现在就可以理解刚才的命令 &lt;code&gt;docker build -t nginx:v3 .&lt;/code&gt; 中的这个 &lt;code&gt;.&lt;/code&gt;，实际上是在指定上下文的目录，&lt;code&gt;docker build&lt;/code&gt; 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。&lt;/p&gt;

&lt;p&gt;如果观察 &lt;code&gt;docker build&lt;/code&gt; 输出，我们其实已经看到了这个发送上下文的过程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 &lt;code&gt;COPY /opt/xxxx /app&lt;/code&gt; 不工作后，于是干脆将 &lt;code&gt;Dockerfile&lt;/code&gt; 放到了硬盘根目录去构建，结果发现 &lt;code&gt;docker build&lt;/code&gt; 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 &lt;code&gt;docker build&lt;/code&gt; 打包整个硬盘，这显然是使用错误。&lt;/p&gt;

&lt;p&gt;一般来说，应该会将 &lt;code&gt;Dockerfile&lt;/code&gt; 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 &lt;code&gt;.gitignore&lt;/code&gt; 一样的语法写一个 &lt;code&gt;.dockerignore&lt;/code&gt;，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。&lt;/p&gt;

&lt;p&gt;那么为什么会有人误以为 &lt;code&gt;.&lt;/code&gt; 是指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在目录呢？这是因为在默认情况下，如果不额外指定 &lt;code&gt;Dockerfile&lt;/code&gt; 的话，会将上下文目录下的名为 &lt;code&gt;Dockerfile&lt;/code&gt; 的文件作为 Dockerfile。&lt;/p&gt;

&lt;p&gt;这只是默认行为，实际上 &lt;code&gt;Dockerfile&lt;/code&gt; 的文件名并不要求必须为 &lt;code&gt;Dockerfile&lt;/code&gt;，而且并不要求必须位于上下文目录中，比如可以用 &lt;code&gt;-f ../Dockerfile.php&lt;/code&gt; 参数指定某个文件作为 &lt;code&gt;Dockerfile&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当然，一般大家习惯性的会使用默认的文件名 &lt;code&gt;Dockerfile&lt;/code&gt;，以及会将其置于镜像构建上下文目录中。&lt;/p&gt;

&lt;h3 id=&#34;其它-docker-build-的用法:13a98cce61a7c185eb25fd01e8410188&#34;&gt;其它 &lt;code&gt;docker build&lt;/code&gt; 的用法&lt;/h3&gt;

&lt;h4 id=&#34;直接用-git-repo-进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;直接用 Git repo 进行构建&lt;/h4&gt;

&lt;p&gt;或许你已经注意到了，&lt;code&gt;docker build&lt;/code&gt; 还支持从 URL 构建，比如可以直接从 Git repo 中构建：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:11.1

Sending build context to Docker daemon 2.048 kB
Step 1 : FROM gitlab/gitlab-ce:11.1.0-ce.0
11.1.0-ce.0: Pulling from gitlab/gitlab-ce
aed15891ba52: Already exists
773ae8583d14: Already exists
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这行命令指定了构建所需的 Git repo，并且指定默认的 &lt;code&gt;master&lt;/code&gt; 分支，构建目录为 &lt;code&gt;/11.1/&lt;/code&gt;，然后 Docker 就会自己去 &lt;code&gt;git clone&lt;/code&gt; 这个项目、切换到指定分支、并进入到指定目录后开始构建。&lt;/p&gt;

&lt;h4 id=&#34;用给定的-tar-压缩包构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;用给定的 tar 压缩包构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build http://server/context.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果所给出的 URL 不是个 Git repo，而是个 &lt;code&gt;tar&lt;/code&gt; 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。&lt;/p&gt;

&lt;h4 id=&#34;从标准输入中读取-dockerfile-进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;从标准输入中读取 Dockerfile 进行构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build - &amp;lt; Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat Dockerfile | docker build -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果标准输入传入的是文本文件，则将其视为 &lt;code&gt;Dockerfile&lt;/code&gt;，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 &lt;code&gt;COPY&lt;/code&gt; 进镜像之类的事情。&lt;/p&gt;

&lt;h4 id=&#34;从标准输入中读取上下文压缩包进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;从标准输入中读取上下文压缩包进行构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build - &amp;lt; context.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果发现标准输入的文件格式是 &lt;code&gt;gzip&lt;/code&gt;、&lt;code&gt;bzip2&lt;/code&gt; 以及 &lt;code&gt;xz&lt;/code&gt; 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。&lt;/p&gt;

&lt;h2 id=&#34;dockerfile-指令详解:13a98cce61a7c185eb25fd01e8410188&#34;&gt;Dockerfile 指令详解&lt;/h2&gt;

&lt;p&gt;我们已经介绍了 &lt;code&gt;FROM&lt;/code&gt;，&lt;code&gt;RUN&lt;/code&gt;，还提及了 &lt;code&gt;COPY&lt;/code&gt;, &lt;code&gt;ADD&lt;/code&gt;，其实 &lt;code&gt;Dockerfile&lt;/code&gt; 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。&lt;/p&gt;

&lt;h3 id=&#34;copy-复制文件:13a98cce61a7c185eb25fd01e8410188&#34;&gt;COPY 复制文件&lt;/h3&gt;

&lt;p&gt;格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] &amp;lt;源路径&amp;gt;... &amp;lt;目标路径&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] [&amp;quot;&amp;lt;源路径1&amp;gt;&amp;quot;,... &amp;quot;&amp;lt;目标路径&amp;gt;&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和 &lt;code&gt;RUN&lt;/code&gt; 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; 指令将从构建上下文目录中 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 的文件/目录复制到新的一层的镜像内的 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 位置。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY package.json /usr/src/app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 &lt;a href=&#34;https://golang.org/pkg/path/filepath/#Match&#34;&gt;&lt;code&gt;filepath.Match&lt;/code&gt;&lt;/a&gt; 规则，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY hom* /mydir/
COPY hom?.txt /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。&lt;/p&gt;

&lt;p&gt;此外，还需要注意一点，使用 &lt;code&gt;COPY&lt;/code&gt; 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。&lt;/p&gt;

&lt;p&gt;在使用该指令的时候还可以加上 &lt;code&gt;--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;&lt;/code&gt; 选项来改变文件的所属用户及所属组。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY --chown=55:mygroup files* /mydir/
COPY --chown=bin files* /mydir/
COPY --chown=1 files* /mydir/
COPY --chown=10:11 files* /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-更高级的复制文件:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ADD 更高级的复制文件&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; 指令和 &lt;code&gt;COPY&lt;/code&gt; 的格式和性质基本一致。但是在 &lt;code&gt;COPY&lt;/code&gt; 基础上增加了一些功能。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 可以是一个 &lt;code&gt;URL&lt;/code&gt;，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 去。下载后的文件权限自动设置为 &lt;code&gt;600&lt;/code&gt;，如果这并不是想要的权限，那么还需要增加额外的一层 &lt;code&gt;RUN&lt;/code&gt; 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 &lt;code&gt;RUN&lt;/code&gt; 指令进行解压缩。所以不如直接使用 &lt;code&gt;RUN&lt;/code&gt; 指令，然后使用 &lt;code&gt;wget&lt;/code&gt; 或者 &lt;code&gt;curl&lt;/code&gt; 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。&lt;/p&gt;

&lt;p&gt;如果 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 为一个 &lt;code&gt;tar&lt;/code&gt; 压缩文件的话，压缩格式为 &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt; 以及 &lt;code&gt;xz&lt;/code&gt; 的情况下，&lt;code&gt;ADD&lt;/code&gt; 指令将会自动解压缩这个压缩文件到 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 去。&lt;/p&gt;

&lt;p&gt;在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 &lt;code&gt;ubuntu&lt;/code&gt; 中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM scratch
ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 &lt;code&gt;ADD&lt;/code&gt; 命令了。&lt;/p&gt;

&lt;p&gt;在 Docker 官方的 &lt;a href=&#34;../../appendix/best_practices.md&#34;&gt;Dockerfile 最佳实践文档&lt;/a&gt; 中要求，尽可能的使用 &lt;code&gt;COPY&lt;/code&gt;，因为 &lt;code&gt;COPY&lt;/code&gt; 的语义很明确，就是复制文件而已，而 &lt;code&gt;ADD&lt;/code&gt; 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 &lt;code&gt;ADD&lt;/code&gt; 的场合，就是所提及的需要自动解压缩的场合。&lt;/p&gt;

&lt;p&gt;另外需要注意的是，&lt;code&gt;ADD&lt;/code&gt; 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。&lt;/p&gt;

&lt;p&gt;因此在 &lt;code&gt;COPY&lt;/code&gt; 和 &lt;code&gt;ADD&lt;/code&gt; 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 &lt;code&gt;COPY&lt;/code&gt; 指令，仅在需要自动解压缩的场合使用 &lt;code&gt;ADD&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在使用该指令的时候还可以加上 &lt;code&gt;--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;&lt;/code&gt; 选项来改变文件的所属用户及所属组。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ADD --chown=55:mygroup files* /mydir/
ADD --chown=bin files* /mydir/
ADD --chown=1 files* /mydir/
ADD --chown=10:11 files* /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cmd-容器启动命令:13a98cce61a7c185eb25fd01e8410188&#34;&gt;CMD 容器启动命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 指令的格式和 &lt;code&gt;RUN&lt;/code&gt; 相似，也是两种格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&lt;/code&gt; 格式：&lt;code&gt;CMD &amp;lt;命令&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt; 格式：&lt;code&gt;CMD [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数列表格式：&lt;code&gt;CMD [&amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;...]&lt;/code&gt;。在指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令后，用 &lt;code&gt;CMD&lt;/code&gt; 指定具体的参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。&lt;code&gt;CMD&lt;/code&gt; 指令就是用于指定默认的容器主进程的启动命令的。&lt;/p&gt;

&lt;p&gt;在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，&lt;code&gt;ubuntu&lt;/code&gt; 镜像默认的 &lt;code&gt;CMD&lt;/code&gt; 是 &lt;code&gt;/bin/bash&lt;/code&gt;，如果我们直接 &lt;code&gt;docker run -it ubuntu&lt;/code&gt; 的话，会直接进入 &lt;code&gt;bash&lt;/code&gt;。我们也可以在运行时指定运行别的命令，如 &lt;code&gt;docker run -it ubuntu cat /etc/os-release&lt;/code&gt;。这就是用 &lt;code&gt;cat /etc/os-release&lt;/code&gt; 命令替换了默认的 &lt;code&gt;/bin/bash&lt;/code&gt; 命令了，输出了系统版本信息。&lt;/p&gt;

&lt;p&gt;在指令格式上，一般推荐使用 &lt;code&gt;exec&lt;/code&gt; 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &lt;code&gt;&amp;quot;&lt;/code&gt;，而不要使用单引号。&lt;/p&gt;

&lt;p&gt;如果使用 &lt;code&gt;shell&lt;/code&gt; 格式的话，实际的命令会被包装为 &lt;code&gt;sh -c&lt;/code&gt; 的参数的形式进行执行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD echo $HOME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在实际执行中，会将其变更为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD [ &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;echo $HOME&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。&lt;/p&gt;

&lt;p&gt;提到 &lt;code&gt;CMD&lt;/code&gt; 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。&lt;/p&gt;

&lt;p&gt;Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 &lt;code&gt;systemd&lt;/code&gt; 去启动后台服务，容器内没有后台服务的概念。&lt;/p&gt;

&lt;p&gt;一些初学者将 &lt;code&gt;CMD&lt;/code&gt; 写为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后发现容器执行后就立即退出了。甚至在容器内去使用 &lt;code&gt;systemctl&lt;/code&gt; 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。&lt;/p&gt;

&lt;p&gt;对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。&lt;/p&gt;

&lt;p&gt;而使用 &lt;code&gt;service nginx start&lt;/code&gt; 命令，则是希望 upstart 来以后台守护进程形式启动 &lt;code&gt;nginx&lt;/code&gt; 服务。而刚才说了 &lt;code&gt;CMD service nginx start&lt;/code&gt; 会被理解为 &lt;code&gt;CMD [ &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;service nginx start&amp;quot;]&lt;/code&gt;，因此主进程实际上是 &lt;code&gt;sh&lt;/code&gt;。那么当 &lt;code&gt;service nginx start&lt;/code&gt; 命令结束后，&lt;code&gt;sh&lt;/code&gt; 也就结束了，&lt;code&gt;sh&lt;/code&gt; 作为主进程退出了，自然就会令容器退出。&lt;/p&gt;

&lt;p&gt;正确的做法是直接执行 &lt;code&gt;nginx&lt;/code&gt; 可执行文件，并且要求以前台形式运行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;entrypoint-入口点:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ENTRYPOINT 入口点&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的格式和 &lt;code&gt;RUN&lt;/code&gt; 指令格式一样，分为 &lt;code&gt;exec&lt;/code&gt; 格式和 &lt;code&gt;shell&lt;/code&gt; 格式。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的目的和 &lt;code&gt;CMD&lt;/code&gt; 一样，都是在指定容器启动程序及参数。&lt;code&gt;ENTRYPOINT&lt;/code&gt; 在运行时也可以替代，不过比 &lt;code&gt;CMD&lt;/code&gt; 要略显繁琐，需要通过 &lt;code&gt;docker run&lt;/code&gt; 的参数 &lt;code&gt;--entrypoint&lt;/code&gt; 来指定。&lt;/p&gt;

&lt;p&gt;当指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 后，&lt;code&gt;CMD&lt;/code&gt; 的含义就发生了改变，不再是直接的运行其命令，而是将 &lt;code&gt;CMD&lt;/code&gt; 的内容作为参数传给 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令，换句话说实际执行时，将变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;ENTRYPOINT&amp;gt; &amp;quot;&amp;lt;CMD&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么有了 &lt;code&gt;CMD&lt;/code&gt; 后，为什么还要有 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 呢？这种 &lt;code&gt;&amp;lt;ENTRYPOINT&amp;gt; &amp;quot;&amp;lt;CMD&amp;gt;&amp;quot;&lt;/code&gt; 有什么好处么？让我们来看几个场景。&lt;/p&gt;

&lt;h4 id=&#34;场景一-让镜像变成像命令一样使用:13a98cce61a7c185eb25fd01e8410188&#34;&gt;场景一：让镜像变成像命令一样使用&lt;/h4&gt;

&lt;p&gt;假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 &lt;code&gt;CMD&lt;/code&gt; 来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:18.04
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y curl \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
CMD [ &amp;quot;curl&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;https://ip.cn&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假如我们使用 &lt;code&gt;docker build -t myip .&lt;/code&gt; 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 &lt;code&gt;CMD&lt;/code&gt; 中可以看到实质的命令是 &lt;code&gt;curl&lt;/code&gt;，那么如果我们希望显示 HTTP 头信息，就需要加上 &lt;code&gt;-i&lt;/code&gt; 参数。那么我们可以直接加 &lt;code&gt;-i&lt;/code&gt; 参数给 &lt;code&gt;docker run myip&lt;/code&gt; 么？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip -i
docker: Error response from daemon: invalid header field value &amp;quot;oci runtime error: container_linux.go:247: starting container process caused \&amp;quot;exec: \\\&amp;quot;-i\\\&amp;quot;: executable file not found in $PATH\&amp;quot;\n&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到可执行文件找不到的报错，&lt;code&gt;executable file not found&lt;/code&gt;。之前我们说过，跟在镜像名后面的是 &lt;code&gt;command&lt;/code&gt;，运行时会替换 &lt;code&gt;CMD&lt;/code&gt; 的默认值。因此这里的 &lt;code&gt;-i&lt;/code&gt; 替换了原来的 &lt;code&gt;CMD&lt;/code&gt;，而不是添加在原来的 &lt;code&gt;curl -s https://ip.cn&lt;/code&gt; 后面。而 &lt;code&gt;-i&lt;/code&gt; 根本不是命令，所以自然找不到。&lt;/p&gt;

&lt;p&gt;那么如果我们希望加入 &lt;code&gt;-i&lt;/code&gt; 这参数，我们就必须重新完整的输入这个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip curl -s https://ip.cn -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这显然不是很好的解决方案，而使用 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 就可以解决这个问题。现在我们重新用 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 来实现这个镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:18.04
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y curl \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
ENTRYPOINT [ &amp;quot;curl&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;https://ip.cn&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次我们再来尝试直接使用 &lt;code&gt;docker run myip -i&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通

$ docker run myip -i
HTTP/1.1 200 OK
Server: nginx/1.8.0
Date: Tue, 22 Nov 2016 05:12:40 GMT
Content-Type: text/html; charset=UTF-8
Vary: Accept-Encoding
X-Powered-By: PHP/5.6.24-1~dotdeb+7.1
X-Cache: MISS from cache-2
X-Cache-Lookup: MISS from cache-2:80
X-Cache: MISS from proxy-2_6
Transfer-Encoding: chunked
Via: 1.1 cache-2:80, 1.1 proxy-2_6:8006
Connection: keep-alive

当前 IP：61.148.226.66 来自：北京市 联通
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，这次成功了。这是因为当存在 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 后，&lt;code&gt;CMD&lt;/code&gt; 的内容将会作为参数传给 &lt;code&gt;ENTRYPOINT&lt;/code&gt;，而这里 &lt;code&gt;-i&lt;/code&gt; 就是新的 &lt;code&gt;CMD&lt;/code&gt;，因此会作为参数传给 &lt;code&gt;curl&lt;/code&gt;，从而达到了我们预期的效果。&lt;/p&gt;

&lt;h4 id=&#34;场景二-应用运行前的准备工作:13a98cce61a7c185eb25fd01e8410188&#34;&gt;场景二：应用运行前的准备工作&lt;/h4&gt;

&lt;p&gt;启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;mysql&lt;/code&gt; 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。&lt;/p&gt;

&lt;p&gt;此外，可能希望避免使用 &lt;code&gt;root&lt;/code&gt; 用户去启动服务，从而提高安全性，而在启动服务前还需要以 &lt;code&gt;root&lt;/code&gt; 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 &lt;code&gt;root&lt;/code&gt; 身份执行，方便调试等。&lt;/p&gt;

&lt;p&gt;这些准备工作是和容器 &lt;code&gt;CMD&lt;/code&gt; 无关的，无论 &lt;code&gt;CMD&lt;/code&gt; 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 中去执行，而这个脚本会将接到的参数（也就是 &lt;code&gt;&amp;lt;CMD&amp;gt;&lt;/code&gt;）作为命令，在脚本最后执行。比如官方镜像 &lt;code&gt;redis&lt;/code&gt; 中就是这么做的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM alpine:3.4
...
RUN addgroup -S redis &amp;amp;&amp;amp; adduser -S -G redis redis
...
ENTRYPOINT [&amp;quot;docker-entrypoint.sh&amp;quot;]

EXPOSE 6379
CMD [ &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 为 &lt;code&gt;docker-entrypoint.sh&lt;/code&gt; 脚本。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
...
# allow the container to be started with `--user`
if [ &amp;quot;$1&amp;quot; = &#39;redis-server&#39; -a &amp;quot;$(id -u)&amp;quot; = &#39;0&#39; ]; then
	chown -R redis .
	exec su-exec redis &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
fi

exec &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该脚本的内容就是根据 &lt;code&gt;CMD&lt;/code&gt; 的内容来判断，如果是 &lt;code&gt;redis-server&lt;/code&gt; 的话，则切换到 &lt;code&gt;redis&lt;/code&gt; 用户身份启动服务器，否则依旧使用 &lt;code&gt;root&lt;/code&gt; 身份执行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it redis id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;env-设置环境变量:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ENV 设置环境变量&lt;/h3&gt;

&lt;p&gt;格式有两种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENV &amp;lt;key1&amp;gt;=&amp;lt;value1&amp;gt; &amp;lt;key2&amp;gt;=&amp;lt;value2&amp;gt;...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 &lt;code&gt;RUN&lt;/code&gt;，还是运行时的应用，都可以直接使用这里定义的环境变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfie&#34;&gt;ENV VERSION=1.0 DEBUG=on \
    NAME=&amp;quot;Happy Feet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。&lt;/p&gt;

&lt;p&gt;定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 &lt;code&gt;node&lt;/code&gt; 镜像 &lt;code&gt;Dockerfile&lt;/code&gt; 中，就有类似这样的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ENV NODE_VERSION 7.2.0

RUN curl -SLO &amp;quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; \
  &amp;amp;&amp;amp; curl -SLO &amp;quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&amp;quot; \
  &amp;amp;&amp;amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  &amp;amp;&amp;amp; grep &amp;quot; node-v$NODE_VERSION-linux-x64.tar.xz\$&amp;quot; SHASUMS256.txt | sha256sum -c - \
  &amp;amp;&amp;amp; tar -xJf &amp;quot;node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; -C /usr/local --strip-components=1 \
  &amp;amp;&amp;amp; rm &amp;quot;node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; SHASUMS256.txt.asc SHASUMS256.txt \
  &amp;amp;&amp;amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里先定义了环境变量 &lt;code&gt;NODE_VERSION&lt;/code&gt;，其后的 &lt;code&gt;RUN&lt;/code&gt; 这层里，多次使用 &lt;code&gt;$NODE_VERSION&lt;/code&gt; 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 &lt;code&gt;7.2.0&lt;/code&gt; 即可，&lt;code&gt;Dockerfile&lt;/code&gt; 构建维护变得更轻松了。&lt;/p&gt;

&lt;p&gt;下列指令可以支持环境变量展开： &lt;code&gt;ADD&lt;/code&gt;、&lt;code&gt;COPY&lt;/code&gt;、&lt;code&gt;ENV&lt;/code&gt;、&lt;code&gt;EXPOSE&lt;/code&gt;、&lt;code&gt;LABEL&lt;/code&gt;、&lt;code&gt;USER&lt;/code&gt;、&lt;code&gt;WORKDIR&lt;/code&gt;、&lt;code&gt;VOLUME&lt;/code&gt;、&lt;code&gt;STOPSIGNAL&lt;/code&gt;、&lt;code&gt;ONBUILD&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 &lt;code&gt;Dockerfile&lt;/code&gt; 制作更多的镜像，只需使用不同的环境变量即可。&lt;/p&gt;

&lt;h3 id=&#34;arg-构建参数:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ARG 构建参数&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;ARG &amp;lt;参数名&amp;gt;[=&amp;lt;默认值&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;构建参数和 &lt;code&gt;ENV&lt;/code&gt; 的效果一样，都是设置环境变量。所不同的是，&lt;code&gt;ARG&lt;/code&gt; 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 &lt;code&gt;ARG&lt;/code&gt; 保存密码之类的信息，因为 &lt;code&gt;docker history&lt;/code&gt; 还是可以看到所有值的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 中的 &lt;code&gt;ARG&lt;/code&gt; 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 &lt;code&gt;docker build&lt;/code&gt; 中用 &lt;code&gt;--build-arg &amp;lt;参数名&amp;gt;=&amp;lt;值&amp;gt;&lt;/code&gt; 来覆盖。&lt;/p&gt;

&lt;p&gt;在 1.13 之前的版本，要求 &lt;code&gt;--build-arg&lt;/code&gt; 中的参数名，必须在 &lt;code&gt;Dockerfile&lt;/code&gt; 中用 &lt;code&gt;ARG&lt;/code&gt; 定义过了，换句话说，就是 &lt;code&gt;--build-arg&lt;/code&gt; 指定的参数，必须在 &lt;code&gt;Dockerfile&lt;/code&gt; 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 &lt;code&gt;Dockerfile&lt;/code&gt; 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。&lt;/p&gt;

&lt;h3 id=&#34;volume-定义匿名卷:13a98cce61a7c185eb25fd01e8410188&#34;&gt;VOLUME 定义匿名卷&lt;/h3&gt;

&lt;p&gt;格式为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VOLUME [&amp;quot;&amp;lt;路径1&amp;gt;&amp;quot;, &amp;quot;&amp;lt;路径2&amp;gt;&amp;quot;...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VOLUME &amp;lt;路径&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 &lt;code&gt;Dockerfile&lt;/code&gt; 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;VOLUME /data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 &lt;code&gt;/data&lt;/code&gt; 目录就会在运行时自动挂载为匿名卷，任何向 &lt;code&gt;/data&lt;/code&gt; 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -v mydata:/data xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这行命令中，就使用了 &lt;code&gt;mydata&lt;/code&gt; 这个命名卷挂载到了 &lt;code&gt;/data&lt;/code&gt; 这个位置，替代了 &lt;code&gt;Dockerfile&lt;/code&gt; 中定义的匿名卷的挂载配置。&lt;/p&gt;

&lt;h3 id=&#34;expose-声明端口:13a98cce61a7c185eb25fd01e8410188&#34;&gt;EXPOSE 声明端口&lt;/h3&gt;

&lt;p&gt;格式为 &lt;code&gt;EXPOSE &amp;lt;端口1&amp;gt; [&amp;lt;端口2&amp;gt;...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 &lt;code&gt;docker run -P&lt;/code&gt; 时，会自动随机映射 &lt;code&gt;EXPOSE&lt;/code&gt; 的端口。&lt;/p&gt;

&lt;p&gt;要将 &lt;code&gt;EXPOSE&lt;/code&gt; 和在运行时使用 &lt;code&gt;-p &amp;lt;宿主端口&amp;gt;:&amp;lt;容器端口&amp;gt;&lt;/code&gt; 区分开来。&lt;code&gt;-p&lt;/code&gt;，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 &lt;code&gt;EXPOSE&lt;/code&gt; 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。&lt;/p&gt;

&lt;h3 id=&#34;workdir-指定工作目录:13a98cce61a7c185eb25fd01e8410188&#34;&gt;WORKDIR 指定工作目录&lt;/h3&gt;

&lt;p&gt;格式为 &lt;code&gt;WORKDIR &amp;lt;工作目录路径&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，&lt;code&gt;WORKDIR&lt;/code&gt; 会帮你建立目录。&lt;/p&gt;

&lt;p&gt;之前提到一些初学者常犯的错误是把 &lt;code&gt;Dockerfile&lt;/code&gt; 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;RUN cd /app
RUN echo &amp;quot;hello&amp;quot; &amp;gt; world.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果将这个 &lt;code&gt;Dockerfile&lt;/code&gt; 进行构建镜像运行后，会发现找不到 &lt;code&gt;/app/world.txt&lt;/code&gt; 文件，或者其内容不是 &lt;code&gt;hello&lt;/code&gt;。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 &lt;code&gt;Dockerfile&lt;/code&gt; 中，这两行 &lt;code&gt;RUN&lt;/code&gt; 命令的执行环境根本不同，是两个完全不同的容器。这就是对 &lt;code&gt;Dockerfile&lt;/code&gt; 构建分层存储的概念不了解所导致的错误。&lt;/p&gt;

&lt;p&gt;之前说过每一个 &lt;code&gt;RUN&lt;/code&gt; 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 &lt;code&gt;RUN cd /app&lt;/code&gt; 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。&lt;/p&gt;

&lt;p&gt;因此如果需要改变以后各层的工作目录的位置，那么应该使用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令。&lt;/p&gt;

&lt;h3 id=&#34;user-指定当前用户:13a98cce61a7c185eb25fd01e8410188&#34;&gt;USER 指定当前用户&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;USER &amp;lt;用户名&amp;gt;[:&amp;lt;用户组&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;USER&lt;/code&gt; 指令和 &lt;code&gt;WORKDIR&lt;/code&gt; 相似，都是改变环境状态并影响以后的层。&lt;code&gt;WORKDIR&lt;/code&gt; 是改变工作目录，&lt;code&gt;USER&lt;/code&gt; 则是改变之后层的执行 &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt; 以及 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 这类命令的身份。&lt;/p&gt;

&lt;p&gt;当然，和 &lt;code&gt;WORKDIR&lt;/code&gt; 一样，&lt;code&gt;USER&lt;/code&gt; 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN groupadd -r redis &amp;amp;&amp;amp; useradd -r -g redis redis
USER redis
RUN [ &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果以 &lt;code&gt;root&lt;/code&gt; 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 &lt;code&gt;su&lt;/code&gt; 或者 &lt;code&gt;sudo&lt;/code&gt;，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 &lt;a href=&#34;https://github.com/tianon/gosu&#34;&gt;&lt;code&gt;gosu&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# 建立 redis 用户，并使用 gosu 换另一个用户执行命令
RUN groupadd -r redis &amp;amp;&amp;amp; useradd -r -g redis redis
# 下载 gosu
RUN wget -O /usr/local/bin/gosu &amp;quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&amp;quot; \
    &amp;amp;&amp;amp; chmod +x /usr/local/bin/gosu \
    &amp;amp;&amp;amp; gosu nobody true
# 设置 CMD，并以另外的用户执行
CMD [ &amp;quot;exec&amp;quot;, &amp;quot;gosu&amp;quot;, &amp;quot;redis&amp;quot;, &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;healthcheck-健康检查:13a98cce61a7c185eb25fd01e8410188&#34;&gt;HEALTHCHECK 健康检查&lt;/h3&gt;

&lt;p&gt;格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HEALTHCHECK [选项] CMD &amp;lt;命令&amp;gt;&lt;/code&gt;：设置检查容器健康状况的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEALTHCHECK NONE&lt;/code&gt;：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。&lt;/p&gt;

&lt;p&gt;在没有 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。&lt;/p&gt;

&lt;p&gt;而自 1.12 之后，Docker 提供了 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。&lt;/p&gt;

&lt;p&gt;当在一个镜像指定了 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令后，用其启动容器，初始状态会为 &lt;code&gt;starting&lt;/code&gt;，在 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令检查成功后变为 &lt;code&gt;healthy&lt;/code&gt;，如果连续一定次数失败，则会变为 &lt;code&gt;unhealthy&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; 支持下列选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--interval=&amp;lt;间隔&amp;gt;&lt;/code&gt;：两次健康检查的间隔，默认为 30 秒；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--timeout=&amp;lt;时长&amp;gt;&lt;/code&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--retries=&amp;lt;次数&amp;gt;&lt;/code&gt;：当连续失败指定次数后，则将容器状态视为 &lt;code&gt;unhealthy&lt;/code&gt;，默认 3 次。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和 &lt;code&gt;CMD&lt;/code&gt;, &lt;code&gt;ENTRYPOINT&lt;/code&gt; 一样，&lt;code&gt;HEALTHCHECK&lt;/code&gt; 只可以出现一次，如果写了多个，只有最后一个生效。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;HEALTHCHECK [选项] CMD&lt;/code&gt; 后面的命令，格式和 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 一样，分为 &lt;code&gt;shell&lt;/code&gt; 格式，和 &lt;code&gt;exec&lt;/code&gt; 格式。命令的返回值决定了该次健康检查的成功与否：&lt;code&gt;0&lt;/code&gt;：成功；&lt;code&gt;1&lt;/code&gt;：失败；&lt;code&gt;2&lt;/code&gt;：保留，不要使用这个值。&lt;/p&gt;

&lt;p&gt;假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 &lt;code&gt;curl&lt;/code&gt; 来帮助判断，其 &lt;code&gt;Dockerfile&lt;/code&gt; 的 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 可以这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM nginx
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y curl &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=5s --timeout=3s \
  CMD curl -fs http://localhost/ || exit 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 &lt;code&gt;curl -fs http://localhost/ || exit 1&lt;/code&gt; 作为健康检查命令。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;docker build&lt;/code&gt; 来构建这个镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t myweb:v1 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建好了后，我们启动一个容器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --name web -p 80:80 myweb:v1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当运行该镜像后，可以通过 &lt;code&gt;docker container ls&lt;/code&gt; 看到最初的状态为 &lt;code&gt;(health: starting)&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES
03e28eb00bd0        myweb:v1            &amp;quot;nginx -g &#39;daemon off&amp;quot;   3 seconds ago       Up 2 seconds (health: starting)   80/tcp, 443/tcp     web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在等待几秒钟后，再次 &lt;code&gt;docker container ls&lt;/code&gt;，就会看到健康状态变化为了 &lt;code&gt;(healthy)&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES
03e28eb00bd0        myweb:v1            &amp;quot;nginx -g &#39;daemon off&amp;quot;   18 seconds ago      Up 16 seconds (healthy)   80/tcp, 443/tcp     web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果健康检查连续失败超过了重试次数，状态就会变为 &lt;code&gt;(unhealthy)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为了帮助排障，健康检查命令的输出（包括 &lt;code&gt;stdout&lt;/code&gt; 以及 &lt;code&gt;stderr&lt;/code&gt;）都会被存储于健康状态里，可以用 &lt;code&gt;docker inspect&lt;/code&gt; 来查看。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect --format &#39;{{json .State.Health}}&#39; web | python -m json.tool
{
    &amp;quot;FailingStreak&amp;quot;: 0,
    &amp;quot;Log&amp;quot;: [
        {
            &amp;quot;End&amp;quot;: &amp;quot;2016-11-25T14:35:37.940957051Z&amp;quot;,
            &amp;quot;ExitCode&amp;quot;: 0,
            &amp;quot;Output&amp;quot;: &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;\n&amp;lt;style&amp;gt;\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n&amp;lt;/style&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;\n&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&amp;lt;/p&amp;gt;\n\n&amp;lt;p&amp;gt;For online documentation and support please refer to\n&amp;lt;a href=\&amp;quot;http://nginx.org/\&amp;quot;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;\nCommercial support is available at\n&amp;lt;a href=\&amp;quot;http://nginx.com/\&amp;quot;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;\n\n&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you for using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&amp;quot;,
            &amp;quot;Start&amp;quot;: &amp;quot;2016-11-25T14:35:37.780192565Z&amp;quot;
        }
    ],
    &amp;quot;Status&amp;quot;: &amp;quot;healthy&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;onbuild-为他人做嫁衣裳:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ONBUILD 为他人做嫁衣裳&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;ONBUILD &amp;lt;其它指令&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 是一个特殊的指令，它后面跟的是其它指令，比如 &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;COPY&lt;/code&gt; 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 中的其它指令都是为了定制当前镜像而准备的，唯有 &lt;code&gt;ONBUILD&lt;/code&gt; 是为了帮助别人定制自己而准备的。&lt;/p&gt;

&lt;p&gt;假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 &lt;code&gt;npm&lt;/code&gt; 进行包管理，所有依赖、配置、启动信息等会放到 &lt;code&gt;package.json&lt;/code&gt; 文件里。在拿到程序代码后，需要先进行 &lt;code&gt;npm install&lt;/code&gt; 才可以获得所有需要的依赖。然后就可以通过 &lt;code&gt;npm start&lt;/code&gt; 来启动应用。因此，一般来说会这样写 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
COPY ./package.json /app
RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
COPY . /app/
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把这个 &lt;code&gt;Dockerfile&lt;/code&gt; 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 &lt;code&gt;Dockerfile&lt;/code&gt; 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。&lt;/p&gt;

&lt;p&gt;如果第一个 Node.js 项目在开发过程中，发现这个 &lt;code&gt;Dockerfile&lt;/code&gt; 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 &lt;code&gt;Dockerfile&lt;/code&gt;，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 &lt;code&gt;Dockerfile&lt;/code&gt; 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 &lt;code&gt;Dockerfile&lt;/code&gt;，而第二个项目的 &lt;code&gt;Dockerfile&lt;/code&gt; 就会被自动修复。&lt;/p&gt;

&lt;p&gt;那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 &lt;code&gt;Dockerfile&lt;/code&gt; 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 &lt;code&gt;Dockerfile&lt;/code&gt; 就会变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 &lt;code&gt;my-node&lt;/code&gt; 的话，各个项目内的自己的 &lt;code&gt;Dockerfile&lt;/code&gt; 就变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM my-node
COPY ./package.json /app
RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
COPY . /app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基础镜像变化后，各个项目都用这个 &lt;code&gt;Dockerfile&lt;/code&gt; 重新构建镜像，会继承基础镜像的更新。&lt;/p&gt;

&lt;p&gt;那么，问题解决了么？没有。准确说，只解决了一半。如果这个 &lt;code&gt;Dockerfile&lt;/code&gt; 里面有些东西需要调整呢？比如 &lt;code&gt;npm install&lt;/code&gt; 都需要加一些参数，那怎么办？这一行 &lt;code&gt;RUN&lt;/code&gt; 是不可能放入基础镜像的，因为涉及到了当前项目的 &lt;code&gt;./package.json&lt;/code&gt;，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 &lt;code&gt;Dockerfile&lt;/code&gt; 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 可以解决这个问题。让我们用 &lt;code&gt;ONBUILD&lt;/code&gt; 重新写一下基础镜像的 &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
ONBUILD COPY ./package.json /app
ONBUILD RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
ONBUILD COPY . /app/
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次我们回到原始的 &lt;code&gt;Dockerfile&lt;/code&gt;，但是这次将项目相关的指令加上 &lt;code&gt;ONBUILD&lt;/code&gt;，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 &lt;code&gt;Dockerfile&lt;/code&gt; 就变成了简单地：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM my-node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的，只有这么一行。当在各个项目目录中，用这个只有一行的 &lt;code&gt;Dockerfile&lt;/code&gt; 构建镜像时，之前基础镜像的那三行 &lt;code&gt;ONBUILD&lt;/code&gt; 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 &lt;code&gt;npm install&lt;/code&gt;，生成应用镜像。&lt;/p&gt;

&lt;h3 id=&#34;参考文档:13a98cce61a7c185eb25fd01e8410188&#34;&gt;参考文档&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfie&lt;/code&gt; 官方文档：&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 最佳实践文档：&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34;&gt;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 官方镜像 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;https://github.com/docker-library/docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker cmd</title>
      <link>https://bibo19842003.github.io/docker/docker-cmd/</link>
      <pubDate>Tue, 26 Mar 2019 17:52:03 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-cmd/</guid>
      <description>

&lt;h1 id=&#34;docker-命令查询&#34;&gt;Docker 命令查询&lt;/h1&gt;

&lt;h2 id=&#34;基本语法&#34;&gt;基本语法&lt;/h2&gt;

&lt;p&gt;Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;客户端命令：基本命令格式为 &lt;code&gt;docker [OPTIONS] COMMAND [arg...]&lt;/code&gt;；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务端命令：基本命令格式为 &lt;code&gt;dockerd [OPTIONS]&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以通过 &lt;code&gt;man docker&lt;/code&gt; 或 &lt;code&gt;docker help&lt;/code&gt; 来查看这些命令。&lt;/p&gt;

&lt;h2 id=&#34;客户端命令选项&#34;&gt;客户端命令选项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--config=&amp;quot;&amp;quot;&lt;/code&gt;：指定客户端配置文件，默认为 &lt;code&gt;~/.docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D=true|false&lt;/code&gt;：是否使用 debug 模式。默认不开启；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H, --host=[]&lt;/code&gt;：指定命令对应 Docker 守护进程的监听接口，可以为 unix 套接字 &lt;code&gt;unix:///path/to/socket&lt;/code&gt;，文件句柄 &lt;code&gt;fd://socketfd&lt;/code&gt; 或 tcp 套接字 &lt;code&gt;tcp://[host[:port]]&lt;/code&gt;，默认为 &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l, --log-level=&amp;quot;debug|info|warn|error|fatal&amp;quot;&lt;/code&gt;：指定日志输出级别；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tls=true|false&lt;/code&gt;：是否对 Docker 守护进程启用 TLS 安全机制，默认为否；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscacert=/.docker/ca.pem&lt;/code&gt;：TLS CA 签名的可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/cert.pem&lt;/code&gt;：TLS 可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/key.pem&lt;/code&gt;：TLS 密钥文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlsverify=true|false&lt;/code&gt;：启用 TLS 校验，默认为否。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dockerd-命令选项&#34;&gt;dockerd 命令选项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--api-cors-header=&amp;quot;&amp;quot;&lt;/code&gt;：CORS 头部域，默认不允许 CORS，要允许任意的跨域访问，可以指定为 &amp;laquo;*&amp;laquo;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--authorization-plugin=&amp;quot;&amp;quot;&lt;/code&gt;：载入认证的插件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-b=&amp;quot;&amp;quot;&lt;/code&gt;：将容器挂载到一个已存在的网桥上。指定为 &lt;code&gt;none&lt;/code&gt; 时则禁用容器的网络，与 &lt;code&gt;--bip&lt;/code&gt; 选项互斥；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--bip=&amp;quot;&amp;quot;&lt;/code&gt;：让动态创建的 &lt;code&gt;docker0&lt;/code&gt; 网桥采用给定的 CIDR 地址; 与 &lt;code&gt;-b&lt;/code&gt; 选项互斥；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cgroup-parent=&amp;quot;&amp;quot;&lt;/code&gt;：指定 cgroup 的父组，默认 fs cgroup 驱动为 &lt;code&gt;/docker&lt;/code&gt;，systemd cgroup 驱动为 &lt;code&gt;system.slice&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cluster-store=&amp;quot;&amp;quot;&lt;/code&gt;：构成集群（如 &lt;code&gt;Swarm&lt;/code&gt;）时，集群键值数据库服务地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cluster-advertise=&amp;quot;&amp;quot;&lt;/code&gt;：构成集群时，自身的被访问地址，可以为 &lt;code&gt;host:port&lt;/code&gt; 或 &lt;code&gt;interface:port&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cluster-store-opt=&amp;quot;&amp;quot;&lt;/code&gt;：构成集群时，键值数据库的配置选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--config-file=&amp;quot;/etc/docker/daemon.json&amp;quot;&lt;/code&gt;：daemon 配置文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--containerd=&amp;quot;&amp;quot;&lt;/code&gt;：containerd 文件的路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D, --debug=true|false&lt;/code&gt;：是否使用 Debug 模式。缺省为 false；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-gateway=&amp;quot;&amp;quot;&lt;/code&gt;：容器的 IPv4 网关地址，必须在网桥的子网段内；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-gateway-v6=&amp;quot;&amp;quot;&lt;/code&gt;：容器的 IPv6 网关地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-ulimit=[]&lt;/code&gt;：默认的 ulimit 值；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--disable-legacy-registry=true|false&lt;/code&gt;：是否允许访问旧版本的镜像仓库服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dns=&amp;quot;&amp;quot;&lt;/code&gt;：指定容器使用的 DNS 服务器地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dns-opt=&amp;quot;&amp;quot;&lt;/code&gt;：DNS 选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dns-search=[]&lt;/code&gt;：DNS 搜索域；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exec-opt=[]&lt;/code&gt;：运行时的执行选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exec-root=&amp;quot;&amp;quot;&lt;/code&gt;：容器执行状态文件的根路径，默认为 &lt;code&gt;/var/run/docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fixed-cidr=&amp;quot;&amp;quot;&lt;/code&gt;：限定分配 IPv4 地址范围；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fixed-cidr-v6=&amp;quot;&amp;quot;&lt;/code&gt;：限定分配 IPv6 地址范围；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-G, --group=&amp;quot;&amp;quot;&lt;/code&gt;：分配给 unix 套接字的组，默认为 &lt;code&gt;docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g, --graph=&amp;quot;&amp;quot;&lt;/code&gt;：Docker 运行时的根路径，默认为 &lt;code&gt;/var/lib/docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H, --host=[]&lt;/code&gt;：指定命令对应 Docker daemon 的监听接口，可以为 unix 套接字 &lt;code&gt;unix:///path/to/socket&lt;/code&gt;，文件句柄 &lt;code&gt;fd://socketfd&lt;/code&gt; 或 tcp 套接字 &lt;code&gt;tcp://[host[:port]]&lt;/code&gt;，默认为 &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--icc=true|false&lt;/code&gt;：是否启用容器间以及跟 daemon 所在主机的通信。默认为 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--insecure-registry=[]&lt;/code&gt;：允许访问给定的非安全仓库服务；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ip=&amp;quot;&amp;quot;&lt;/code&gt;：绑定容器端口时候的默认 IP 地址。缺省为 &lt;code&gt;0.0.0.0&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ip-forward=true|false&lt;/code&gt;：是否检查启动在 Docker 主机上的启用 IP 转发服务，默认开启。注意关闭该选项将不对系统转发能力进行任何检查修改；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ip-masq=true|false&lt;/code&gt;：是否进行地址伪装，用于容器访问外部网络，默认开启；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--iptables=true|false&lt;/code&gt;：是否允许 Docker 添加 iptables 规则。缺省为 true；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ipv6=true|false&lt;/code&gt;：是否启用 IPv6 支持，默认关闭；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l, --log-level=&amp;quot;debug|info|warn|error|fatal&amp;quot;&lt;/code&gt;：指定日志输出级别；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--label=&amp;quot;[]&amp;quot;&lt;/code&gt;：添加指定的键值对标注；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--log-driver=&amp;quot;json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|none&amp;quot;&lt;/code&gt;：指定日志后端驱动，默认为 &lt;code&gt;json-file&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--log-opt=[]&lt;/code&gt;：日志后端的选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mtu=VALUE&lt;/code&gt;：指定容器网络的 &lt;code&gt;mtu&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p=&amp;quot;&amp;quot;&lt;/code&gt;：指定 daemon 的 PID 文件路径。缺省为 &lt;code&gt;/var/run/docker.pid&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--raw-logs&lt;/code&gt;：输出原始，未加色彩的日志信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--registry-mirror=&amp;lt;scheme&amp;gt;://&amp;lt;host&amp;gt;&lt;/code&gt;：指定 &lt;code&gt;docker pull&lt;/code&gt; 时使用的注册服务器镜像地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s, --storage-driver=&amp;quot;&amp;quot;&lt;/code&gt;：指定使用给定的存储后端；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--selinux-enabled=true|false&lt;/code&gt;：是否启用 SELinux 支持。缺省值为 false。SELinux 目前尚不支持 overlay 存储驱动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--storage-opt=[]&lt;/code&gt;：驱动后端选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tls=true|false&lt;/code&gt;：是否对 Docker daemon 启用 TLS 安全机制，默认为否；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscacert=/.docker/ca.pem&lt;/code&gt;：TLS CA 签名的可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/cert.pem&lt;/code&gt;：TLS 可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/key.pem&lt;/code&gt;：TLS 密钥文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlsverify=true|false&lt;/code&gt;：启用 TLS 校验，默认为否；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--userland-proxy=true|false&lt;/code&gt;：是否使用用户态代理来实现容器间和出容器的回环通信，默认为 true；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--userns-remap=default|uid:gid|user:group|user|uid&lt;/code&gt;：指定容器的用户命名空间，默认是创建新的 UID 和 GID 映射到容器内进程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;客户端命令&#34;&gt;客户端命令&lt;/h2&gt;

&lt;p&gt;可以通过 &lt;code&gt;docker COMMAND --help&lt;/code&gt; 来查看这些命令的具体用法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attach&lt;/code&gt;：依附到一个正在运行的容器中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;：从一个 Dockerfile 创建一个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit&lt;/code&gt;：从一个容器的修改中创建一个新的镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp&lt;/code&gt;：在容器和本地宿主系统之间复制文件中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt;：创建一个新容器，但并不运行它；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff&lt;/code&gt;：检查一个容器内文件系统的修改，包括修改和增加；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt;：从服务端获取实时的事件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt;：在运行的容器内执行命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;：导出容器内容为一个 &lt;code&gt;tar&lt;/code&gt; 包；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;：显示一个镜像的历史信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt;：列出存在的镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;：导入一个文件（典型为 &lt;code&gt;tar&lt;/code&gt; 包）路径或目录来创建一个本地镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;：显示一些相关的系统信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inspect&lt;/code&gt;：显示一个容器的具体配置信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill&lt;/code&gt;：关闭一个运行中的容器 (包括进程和所有相关资源)；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt;：从一个 tar 包中加载一个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;login&lt;/code&gt;：注册或登录到一个 Docker 的仓库服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logout&lt;/code&gt;：从 Docker 的仓库服务器登出；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logs&lt;/code&gt;：获取容器的 log 信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;network&lt;/code&gt;：管理 Docker 的网络，包括查看、创建、删除、挂载、卸载等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node&lt;/code&gt;：管理 swarm 集群中的节点，包括查看、更新、删除、提升/取消管理节点等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pause&lt;/code&gt;：暂停一个容器中的所有进程；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;：查找一个 nat 到一个私有网口的公共口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt;：列出主机上的容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pull&lt;/code&gt;：从一个Docker的仓库服务器下拉一个镜像或仓库；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;：将一个镜像或者仓库推送到一个 Docker 的注册服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rename&lt;/code&gt;：重命名一个容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restart&lt;/code&gt;：重启一个运行中的容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm&lt;/code&gt;：删除给定的若干个容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmi&lt;/code&gt;：删除给定的若干个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;：创建一个新容器，并在其中运行给定命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt;：保存一个镜像为 tar 包文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search&lt;/code&gt;：在 Docker index 中搜索一个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt;：管理 Docker 所启动的应用服务，包括创建、更新、删除等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt;：启动一个容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stats&lt;/code&gt;：输出（一个或多个）容器的资源使用统计信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop&lt;/code&gt;：终止一个运行中的容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swarm&lt;/code&gt;：管理 Docker swarm 集群，包括创建、加入、退出、更新等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt;：为一个镜像打标签；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt;：查看一个容器中的正在运行的进程信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpause&lt;/code&gt;：将一个容器内所有的进程从暂停状态中恢复；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;：更新指定的若干容器的配置信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;：输出 Docker 的版本信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volume&lt;/code&gt;：管理 Docker volume，包括查看、创建、删除等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt;：阻塞直到一个容器终止，然后输出它的退出符。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一张图总结-docker-的命令&#34;&gt;一张图总结 Docker 的命令&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://bibo19842003.github.io/img/docker/cmd_logic.png&#34; alt=&#34;Docker 命令总结&#34; /&gt;&lt;/p&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>