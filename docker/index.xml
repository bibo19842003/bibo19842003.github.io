<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockers on Hello Bibo</title>
    <link>https://bibo19842003.github.io/docker/</link>
    <description>Recent content in Dockers on Hello Bibo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>bibo19842003@163.com (bibo)</managingEditor>
    <webMaster>bibo19842003@163.com (bibo)</webMaster>
    <lastBuildDate>Thu, 28 Mar 2019 14:10:30 +0800</lastBuildDate>
    <atom:link href="https://bibo19842003.github.io/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker contain</title>
      <link>https://bibo19842003.github.io/docker/docker-contain/</link>
      <pubDate>Thu, 28 Mar 2019 14:10:30 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-contain/</guid>
      <description>

&lt;h1 id=&#34;操作-docker-容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;操作 Docker 容器&lt;/h1&gt;

&lt;p&gt;容器是 Docker 又一核心概念。&lt;/p&gt;

&lt;p&gt;简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。&lt;/p&gt;

&lt;p&gt;本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。&lt;/p&gt;

&lt;h2 id=&#34;启动容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;启动容器&lt;/h2&gt;

&lt;p&gt;启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（&lt;code&gt;stopped&lt;/code&gt;）的容器重新启动。&lt;/p&gt;

&lt;p&gt;因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。&lt;/p&gt;

&lt;h3 id=&#34;新建并启动:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;新建并启动&lt;/h3&gt;

&lt;p&gt;所需要的命令主要为 &lt;code&gt;docker run&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如，下面的命令输出一个 “Hello World”，之后终止容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run ubuntu:18.04 /bin/echo &#39;Hello world&#39;
Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这跟在本地直接执行 &lt;code&gt;/bin/echo &#39;hello world&#39;&lt;/code&gt; 几乎感觉不出任何区别。&lt;/p&gt;

&lt;p&gt;下面的命令则启动一个 bash 终端，允许用户进行交互。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -t -i ubuntu:18.04 /bin/bash
root@af8bae53bdd3:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;-t&lt;/code&gt; 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， &lt;code&gt;-i&lt;/code&gt; 则让容器的标准输入保持打开。&lt;/p&gt;

&lt;p&gt;在交互模式下，用户可以通过所创建的终端来输入命令，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@af8bae53bdd3:/# pwd
/
root@af8bae53bdd3:/# ls
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当利用 &lt;code&gt;docker run&lt;/code&gt; 来创建容器时，Docker 在后台运行的标准操作包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检查本地是否存在指定的镜像，不存在就从公有仓库下载&lt;/li&gt;
&lt;li&gt;利用镜像创建并启动一个容器&lt;/li&gt;
&lt;li&gt;分配一个文件系统，并在只读的镜像层外面挂载一层可读写层&lt;/li&gt;
&lt;li&gt;从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去&lt;/li&gt;
&lt;li&gt;从地址池配置一个 ip 地址给容器&lt;/li&gt;
&lt;li&gt;执行用户指定的应用程序&lt;/li&gt;
&lt;li&gt;执行完毕后容器被终止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;启动已终止容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;启动已终止容器&lt;/h3&gt;

&lt;p&gt;可以利用 &lt;code&gt;docker container start&lt;/code&gt; 命令，直接将一个已经终止的容器启动运行。&lt;/p&gt;

&lt;p&gt;容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 &lt;code&gt;ps&lt;/code&gt; 或 &lt;code&gt;top&lt;/code&gt; 来查看进程信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@ba267838cc1b:/# ps
  PID TTY          TIME CMD
    1 ?        00:00:00 bash
   11 ?        00:00:00 ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。&lt;/p&gt;

&lt;h2 id=&#34;后台运行:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;后台运行&lt;/h2&gt;

&lt;p&gt;更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 &lt;code&gt;-d&lt;/code&gt; 参数来实现。&lt;/p&gt;

&lt;p&gt;下面举两个例子来说明一下。&lt;/p&gt;

&lt;p&gt;如果不使用 &lt;code&gt;-d&lt;/code&gt; 参数运行容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run ubuntu:18.04 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
hello world
hello world
hello world
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容器会把输出的结果 (STDOUT) 打印到宿主机上面&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code&gt;-d&lt;/code&gt; 参数运行容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d ubuntu:18.04 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 &lt;code&gt;docker logs&lt;/code&gt; 查看)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 容器是否会长久运行，是和 &lt;code&gt;docker run&lt;/code&gt; 指定的命令有关，和 &lt;code&gt;-d&lt;/code&gt; 参数无关。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;-d&lt;/code&gt; 参数启动后会返回一个唯一的 id，也可以通过 &lt;code&gt;docker container ls&lt;/code&gt; 命令来查看容器信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker container ls
CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES
77b2dc01fe0f  ubuntu:18.04  /bin/sh -c &#39;while tr  2 minutes ago  Up 1 minute        agitated_wright
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要获取容器的输出信息，可以通过 &lt;code&gt;docker container logs&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container logs [container ID or NAMES]
hello world
hello world
hello world
. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;终止容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;终止容器&lt;/h2&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker container stop&lt;/code&gt; 来终止一个运行中的容器。&lt;/p&gt;

&lt;p&gt;此外，当 Docker 容器中指定的应用终结时，容器也自动终止。&lt;/p&gt;

&lt;p&gt;例如对于上一章节中只启动了一个终端的容器，用户通过 &lt;code&gt;exit&lt;/code&gt; 命令或 &lt;code&gt;Ctrl+d&lt;/code&gt; 来退出终端时，所创建的容器立刻终止。&lt;/p&gt;

&lt;p&gt;终止状态的容器可以用 &lt;code&gt;docker container ls -a&lt;/code&gt; 命令看到。例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container ls -a
CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES
ba267838cc1b        ubuntu:18.04             &amp;quot;/bin/bash&amp;quot;            30 minutes ago      Exited (0) About a minute ago                       trusting_newton
98e5efa7d997        training/webapp:latest   &amp;quot;python app.py&amp;quot;        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;处于终止状态的容器，可以通过 &lt;code&gt;docker container start&lt;/code&gt; 命令来重新启动。&lt;/p&gt;

&lt;p&gt;此外，&lt;code&gt;docker container restart&lt;/code&gt; 命令会将一个运行态的容器终止，然后再重新启动它。&lt;/p&gt;

&lt;h2 id=&#34;进入容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;进入容器&lt;/h2&gt;

&lt;p&gt;在使用 &lt;code&gt;-d&lt;/code&gt; 参数时，容器启动后会进入后台。&lt;/p&gt;

&lt;p&gt;某些时候需要进入容器进行操作，包括使用 &lt;code&gt;docker attach&lt;/code&gt; 命令或 &lt;code&gt;docker exec&lt;/code&gt; 命令，推荐大家使用 &lt;code&gt;docker exec&lt;/code&gt; 命令，原因会在下面说明。&lt;/p&gt;

&lt;h3 id=&#34;attach-命令:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;&lt;code&gt;attach&lt;/code&gt; 命令&lt;/h3&gt;

&lt;p&gt;下面示例如何使用 &lt;code&gt;docker attach&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit ubuntu
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550

$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
243c32535da7        ubuntu:latest       &amp;quot;/bin/bash&amp;quot;         18 seconds ago      Up 17 seconds                           nostalgic_hypatia

$ docker attach 243c
root@243c32535da7:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：&lt;/em&gt; 如果从这个 stdin 中 exit，会导致容器的停止。&lt;/p&gt;

&lt;h3 id=&#34;exec-命令:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;&lt;code&gt;exec&lt;/code&gt; 命令&lt;/h3&gt;

&lt;h4 id=&#34;i-t-参数:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;-i -t 参数&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;docker exec&lt;/code&gt; 后边可以跟多个参数，这里主要说明 &lt;code&gt;-i&lt;/code&gt; &lt;code&gt;-t&lt;/code&gt; 参数。&lt;/p&gt;

&lt;p&gt;只用 &lt;code&gt;-i&lt;/code&gt; 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。&lt;/p&gt;

&lt;p&gt;当 &lt;code&gt;-i&lt;/code&gt; &lt;code&gt;-t&lt;/code&gt; 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit ubuntu
69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6

$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
69d137adef7a        ubuntu:latest       &amp;quot;/bin/bash&amp;quot;         18 seconds ago      Up 17 seconds                           zealous_swirles

$ docker exec -i 69d1 bash
ls
bin
boot
dev
...

$ docker exec -it 69d1 bash
root@69d137adef7a:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 &lt;code&gt;docker exec&lt;/code&gt; 的原因。&lt;/p&gt;

&lt;p&gt;更多参数说明请使用 &lt;code&gt;docker exec --help&lt;/code&gt; 查看。&lt;/p&gt;

&lt;h2 id=&#34;导出和导入容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;导出和导入容器&lt;/h2&gt;

&lt;h3 id=&#34;导出容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;导出容器&lt;/h3&gt;

&lt;p&gt;如果要导出本地某个容器，可以使用 &lt;code&gt;docker export&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
7691a814370e        ubuntu:18.04        &amp;quot;/bin/bash&amp;quot;         36 hours ago        Exited (0) 21 hours ago                       test
$ docker export 7691a814370e &amp;gt; ubuntu.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样将导出容器快照到本地文件。&lt;/p&gt;

&lt;h3 id=&#34;导入容器快照:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;导入容器快照&lt;/h3&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker import&lt;/code&gt; 从容器快照文件中再导入为镜像，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat ubuntu.tar | docker import - test/ubuntu:v1.0
$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
test/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此外，也可以通过指定 URL 或者某个目录来导入，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker import http://example.com/exampleimage.tgz example/imagerepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注：用户既可以使用 &lt;code&gt;docker load&lt;/code&gt; 来导入镜像存储文件到本地镜像库，也可以使用 &lt;code&gt;docker import&lt;/code&gt; 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;删除容器&lt;/h2&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker container rm&lt;/code&gt; 来删除一个处于终止状态的容器。例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container rm  trusting_newton
trusting_newton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要删除一个运行中的容器，可以添加 &lt;code&gt;-f&lt;/code&gt; 参数。Docker 会发送 &lt;code&gt;SIGKILL&lt;/code&gt; 信号给容器。&lt;/p&gt;

&lt;h2 id=&#34;清理所有处于终止状态的容器:e466c532c9bc814a929b5fabd2218e4e&#34;&gt;清理所有处于终止状态的容器&lt;/h2&gt;

&lt;p&gt;用 &lt;code&gt;docker container ls -a&lt;/code&gt; 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container prune
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker concept</title>
      <link>https://bibo19842003.github.io/docker/docker-concept/</link>
      <pubDate>Thu, 28 Mar 2019 12:00:37 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-concept/</guid>
      <description>

&lt;h1 id=&#34;基本概念:c1314578dde76a3a394a9042c269f756&#34;&gt;基本概念&lt;/h1&gt;

&lt;p&gt;Docker 包括三个基本概念
* 镜像（&lt;code&gt;Image&lt;/code&gt;）
* 容器（&lt;code&gt;Container&lt;/code&gt;）
* 仓库（&lt;code&gt;Repository&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;理解了这三个概念，就理解了 Docker 的整个生命周期。&lt;/p&gt;

&lt;h2 id=&#34;docker-镜像:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker 镜像&lt;/h2&gt;

&lt;p&gt;我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 &lt;code&gt;root&lt;/code&gt; 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 &lt;code&gt;root&lt;/code&gt; 文件系统。比如官方镜像 &lt;code&gt;ubuntu:18.04&lt;/code&gt; 就包含了完整的一套 Ubuntu 18.04 最小系统的 &lt;code&gt;root&lt;/code&gt; 文件系统。&lt;/p&gt;

&lt;p&gt;Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。&lt;/p&gt;

&lt;h3 id=&#34;分层存储:c1314578dde76a3a394a9042c269f756&#34;&gt;分层存储&lt;/h3&gt;

&lt;p&gt;因为镜像包含操作系统完整的 &lt;code&gt;root&lt;/code&gt; 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Union_mount&#34;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。&lt;/p&gt;

&lt;p&gt;镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。&lt;/p&gt;

&lt;p&gt;分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;

&lt;p&gt;关于镜像构建，将会在后续相关章节中做进一步的讲解。&lt;/p&gt;

&lt;h2 id=&#34;docker-容器:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker 容器&lt;/h2&gt;

&lt;p&gt;镜像（&lt;code&gt;Image&lt;/code&gt;）和容器（&lt;code&gt;Container&lt;/code&gt;）的关系，就像是面向对象程序设计中的 &lt;code&gt;类&lt;/code&gt; 和 &lt;code&gt;实例&lt;/code&gt; 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。&lt;/p&gt;

&lt;p&gt;容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_namespaces&#34;&gt;命名空间&lt;/a&gt;。因此容器可以拥有自己的 &lt;code&gt;root&lt;/code&gt; 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。&lt;/p&gt;

&lt;p&gt;前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 &lt;strong&gt;容器存储层&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。&lt;/p&gt;

&lt;p&gt;按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 &lt;a href=&#34;../data_management/volume.md&#34;&gt;数据卷（Volume）&lt;/a&gt;、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。&lt;/p&gt;

&lt;p&gt;数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。&lt;/p&gt;

&lt;h2 id=&#34;docker-registry:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker Registry&lt;/h2&gt;

&lt;p&gt;镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，&lt;a href=&#34;../repository/registry.md&#34;&gt;Docker Registry&lt;/a&gt; 就是这样的服务。&lt;/p&gt;

&lt;p&gt;一个 &lt;strong&gt;Docker Registry&lt;/strong&gt; 中可以包含多个 &lt;strong&gt;仓库&lt;/strong&gt;（&lt;code&gt;Repository&lt;/code&gt;）；每个仓库可以包含多个 &lt;strong&gt;标签&lt;/strong&gt;（&lt;code&gt;Tag&lt;/code&gt;）；每个标签对应一个镜像。&lt;/p&gt;

&lt;p&gt;通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;code&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/code&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 &lt;code&gt;latest&lt;/code&gt; 作为默认标签。&lt;/p&gt;

&lt;p&gt;以 &lt;a href=&#34;https://hub.docker.com/_/ubuntu&#34;&gt;Ubuntu 镜像&lt;/a&gt; 为例，&lt;code&gt;ubuntu&lt;/code&gt; 是仓库的名字，其内包含有不同的版本标签，如，&lt;code&gt;16.04&lt;/code&gt;, &lt;code&gt;18.04&lt;/code&gt;。我们可以通过 &lt;code&gt;ubuntu:14.04&lt;/code&gt;，或者 &lt;code&gt;ubuntu:18.04&lt;/code&gt; 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 &lt;code&gt;ubuntu&lt;/code&gt;，那将视为 &lt;code&gt;ubuntu:latest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;仓库名经常以 &lt;em&gt;两段式路径&lt;/em&gt; 形式出现，比如 &lt;code&gt;jwilder/nginx-proxy&lt;/code&gt;，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。&lt;/p&gt;

&lt;h3 id=&#34;docker-registry-公开服务:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker Registry 公开服务&lt;/h3&gt;

&lt;p&gt;Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。&lt;/p&gt;

&lt;p&gt;最常使用的 Registry 公开服务是官方的 &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 &lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt; 的 &lt;a href=&#34;https://quay.io/repository/&#34;&gt;Quay.io&lt;/a&gt;，CoreOS 相关的镜像存储在这里；Google 的 &lt;a href=&#34;https://cloud.google.com/container-registry/&#34;&gt;Google Container Registry&lt;/a&gt;，&lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 的镜像使用的就是这个服务。&lt;/p&gt;

&lt;p&gt;由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（&lt;code&gt;Registry Mirror&lt;/code&gt;），这些镜像服务被称为&lt;strong&gt;加速器&lt;/strong&gt;。常见的有 &lt;a href=&#34;https://cr.console.aliyun.com/#/accelerator&#34;&gt;阿里云加速器&lt;/a&gt;、&lt;a href=&#34;https://www.daocloud.io/mirror#accelerator-doc&#34;&gt;DaoCloud 加速器&lt;/a&gt; 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 &lt;a href=&#34;../install/mirror.md&#34;&gt;安装 Docker&lt;/a&gt;  一节中有详细的配置方法。&lt;/p&gt;

&lt;p&gt;国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 &lt;a href=&#34;https://hub.tenxcloud.com/&#34;&gt;时速云镜像仓库&lt;/a&gt;、&lt;a href=&#34;https://c.163.com/hub#/m/library/&#34;&gt;网易云镜像服务&lt;/a&gt;、&lt;a href=&#34;https://hub.daocloud.io/&#34;&gt;DaoCloud 镜像市场&lt;/a&gt;、&lt;a href=&#34;https://cr.console.aliyun.com&#34;&gt;阿里云镜像库&lt;/a&gt; 等。&lt;/p&gt;

&lt;h3 id=&#34;私有-docker-registry:c1314578dde76a3a394a9042c269f756&#34;&gt;私有 Docker Registry&lt;/h3&gt;

&lt;p&gt;除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 &lt;a href=&#34;https://hub.docker.com/_/registry/&#34;&gt;Docker Registry&lt;/a&gt; 镜像，可以直接使用做为私有 Registry 服务。在 &lt;a href=&#34;../repository/registry.md&#34;&gt;私有仓库&lt;/a&gt; 一节中，会有进一步的搭建私有 Registry 服务的讲解。&lt;/p&gt;

&lt;p&gt;开源的 Docker Registry 镜像只提供了 &lt;a href=&#34;https://docs.docker.com/registry/spec/api/&#34;&gt;Docker Registry API&lt;/a&gt; 的服务端实现，足以支持 &lt;code&gt;docker&lt;/code&gt; 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 &lt;a href=&#34;https://docs.docker.com/datacenter/dtr/2.0/&#34;&gt;Docker Trusted Registry&lt;/a&gt; 中，提供了这些高级功能。&lt;/p&gt;

&lt;p&gt;除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，&lt;a href=&#34;https://github.com/goharbor/harbor&#34;&gt;Harbor&lt;/a&gt; 和 &lt;a href=&#34;../repository/nexus3_registry.md&#34;&gt;Sonatype Nexus&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;为什么要使用-docker:c1314578dde76a3a394a9042c269f756&#34;&gt;为什么要使用 Docker？&lt;/h2&gt;

&lt;p&gt;作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。&lt;/p&gt;

&lt;h3 id=&#34;更高效的利用系统资源:c1314578dde76a3a394a9042c269f756&#34;&gt;更高效的利用系统资源&lt;/h3&gt;

&lt;p&gt;由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。&lt;/p&gt;

&lt;h3 id=&#34;更快速的启动时间:c1314578dde76a3a394a9042c269f756&#34;&gt;更快速的启动时间&lt;/h3&gt;

&lt;p&gt;传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。&lt;/p&gt;

&lt;h3 id=&#34;一致的运行环境:c1314578dde76a3a394a9042c269f756&#34;&gt;一致的运行环境&lt;/h3&gt;

&lt;p&gt;开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 &lt;em&gt;「这段代码在我机器上没问题啊」&lt;/em&gt; 这类问题。&lt;/p&gt;

&lt;h3 id=&#34;持续交付和部署:c1314578dde76a3a394a9042c269f756&#34;&gt;持续交付和部署&lt;/h3&gt;

&lt;p&gt;对开发和运维（&lt;a href=&#34;https://zh.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt;）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。&lt;/p&gt;

&lt;p&gt;使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 &lt;a href=&#34;../image/dockerfile/&#34;&gt;Dockerfile&lt;/a&gt; 来进行镜像构建，并结合 &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;持续集成(Continuous Integration)&lt;/a&gt; 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;持续部署(Continuous Delivery/Deployment)&lt;/a&gt; 系统进行自动部署。&lt;/p&gt;

&lt;p&gt;而且使用 &lt;code&gt;Dockerfile&lt;/code&gt; 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。&lt;/p&gt;

&lt;h3 id=&#34;更轻松的迁移:c1314578dde76a3a394a9042c269f756&#34;&gt;更轻松的迁移&lt;/h3&gt;

&lt;p&gt;由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。&lt;/p&gt;

&lt;h3 id=&#34;更轻松的维护和扩展:c1314578dde76a3a394a9042c269f756&#34;&gt;更轻松的维护和扩展&lt;/h3&gt;

&lt;p&gt;Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 &lt;a href=&#34;https://hub.docker.com/search/?type=image&amp;amp;image_filter=official&#34;&gt;官方镜像&lt;/a&gt;，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。&lt;/p&gt;

&lt;h3 id=&#34;对比传统虚拟机总结:c1314578dde76a3a394a9042c269f756&#34;&gt;对比传统虚拟机总结&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;特性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;容器&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;启动&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;秒级&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;硬盘使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;MB&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;GB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;性能&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;接近原生&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弱于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;系统支持量&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dockerfile</title>
      <link>https://bibo19842003.github.io/docker/dockerfile/</link>
      <pubDate>Thu, 28 Mar 2019 09:02:21 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/dockerfile/</guid>
      <description>

&lt;h2 id=&#34;使用-dockerfile-定制镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;使用 Dockerfile 定制镜像&lt;/h2&gt;

&lt;p&gt;从刚才的 &lt;code&gt;docker commit&lt;/code&gt; 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。&lt;/p&gt;

&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的 &lt;strong&gt;指令(Instruction)&lt;/strong&gt;，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。&lt;/p&gt;

&lt;p&gt;还以之前定制 &lt;code&gt;nginx&lt;/code&gt; 镜像为例，这次我们使用 Dockerfile 来定制。&lt;/p&gt;

&lt;p&gt;在一个空白目录中，建立一个文本文件，并命名为 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir mynginx
$ cd mynginx
$ touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM nginx
RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，&lt;code&gt;FROM&lt;/code&gt; 和 &lt;code&gt;RUN&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;from-指定基础镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;FROM 指定基础镜像&lt;/h3&gt;

&lt;p&gt;所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 &lt;code&gt;nginx&lt;/code&gt; 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 &lt;code&gt;FROM&lt;/code&gt; 就是指定 &lt;strong&gt;基础镜像&lt;/strong&gt;，因此一个 &lt;code&gt;Dockerfile&lt;/code&gt; 中 &lt;code&gt;FROM&lt;/code&gt; 是必备的指令，并且必须是第一条指令。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&#34;https://hub.docker.com/search?q=&amp;amp;type=image&amp;amp;image_filter=official&#34;&gt;Docker Hub&lt;/a&gt; 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/redis/&#34;&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/mongo/&#34;&gt;&lt;code&gt;mongo&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/mysql/&#34;&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/httpd/&#34;&gt;&lt;code&gt;httpd&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/php/&#34;&gt;&lt;code&gt;php&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/tomcat/&#34;&gt;&lt;code&gt;tomcat&lt;/code&gt;&lt;/a&gt; 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 &lt;a href=&#34;https://hub.docker.com/_/node&#34;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/openjdk/&#34;&gt;&lt;code&gt;openjdk&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/python/&#34;&gt;&lt;code&gt;python&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/ruby/&#34;&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/golang/&#34;&gt;&lt;code&gt;golang&lt;/code&gt;&lt;/a&gt; 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。&lt;/p&gt;

&lt;p&gt;如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 &lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34;&gt;&lt;code&gt;ubuntu&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/debian/&#34;&gt;&lt;code&gt;debian&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/centos/&#34;&gt;&lt;code&gt;centos&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/fedora/&#34;&gt;&lt;code&gt;fedora&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;&lt;code&gt;alpine&lt;/code&gt;&lt;/a&gt; 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。&lt;/p&gt;

&lt;p&gt;除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 &lt;code&gt;scratch&lt;/code&gt;。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM scratch
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你以 &lt;code&gt;scratch&lt;/code&gt; 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。&lt;/p&gt;

&lt;p&gt;不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 &lt;a href=&#34;https://hub.docker.com/_/swarm/&#34;&gt;&lt;code&gt;swarm&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://quay.io/repository/coreos/etcd&#34;&gt;&lt;code&gt;coreos/etcd&lt;/code&gt;&lt;/a&gt;。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 &lt;code&gt;FROM scratch&lt;/code&gt; 会让镜像体积更加小巧。使用 &lt;a href=&#34;https://golang.org/&#34;&gt;Go 语言&lt;/a&gt; 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。&lt;/p&gt;

&lt;h3 id=&#34;run-执行命令:13a98cce61a7c185eb25fd01e8410188&#34;&gt;RUN 执行命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令是用来执行命令行命令的。由于命令行的强大能力，&lt;code&gt;RUN&lt;/code&gt; 指令在定制镜像时是最常用的指令之一。其格式有两种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;shell&lt;/em&gt; 格式：&lt;code&gt;RUN &amp;lt;命令&amp;gt;&lt;/code&gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 &lt;code&gt;RUN&lt;/code&gt; 指令就是这种格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;exec&lt;/em&gt; 格式：&lt;code&gt;RUN [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;]&lt;/code&gt;，这更像是函数调用中的格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既然 &lt;code&gt;RUN&lt;/code&gt; 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:stretch

RUN apt-get update
RUN apt-get install -y gcc libc6-dev make wget
RUN wget -O redis.tar.gz &amp;quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&amp;quot;
RUN mkdir -p /usr/src/redis
RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
RUN make -C /usr/src/redis
RUN make -C /usr/src/redis install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前说过，Dockerfile 中每一个指令都会建立一层，&lt;code&gt;RUN&lt;/code&gt; 也不例外。每一个 &lt;code&gt;RUN&lt;/code&gt; 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，&lt;code&gt;commit&lt;/code&gt; 这一层的修改，构成新的镜像。&lt;/p&gt;

&lt;p&gt;而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。
这是很多初学 Docker 的人常犯的一个错误。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;上面的 &lt;code&gt;Dockerfile&lt;/code&gt; 正确的写法应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:stretch

RUN buildDeps=&#39;gcc libc6-dev make wget&#39; \
    &amp;amp;&amp;amp; apt-get update \
    &amp;amp;&amp;amp; apt-get install -y $buildDeps \
    &amp;amp;&amp;amp; wget -O redis.tar.gz &amp;quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&amp;quot; \
    &amp;amp;&amp;amp; mkdir -p /usr/src/redis \
    &amp;amp;&amp;amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
    &amp;amp;&amp;amp; make -C /usr/src/redis \
    &amp;amp;&amp;amp; make -C /usr/src/redis install \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \
    &amp;amp;&amp;amp; rm redis.tar.gz \
    &amp;amp;&amp;amp; rm -r /usr/src/redis \
    &amp;amp;&amp;amp; apt-get purge -y --auto-remove $buildDeps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 &lt;code&gt;RUN&lt;/code&gt; 对一一对应不同的命令，而是仅仅使用一个 &lt;code&gt;RUN&lt;/code&gt; 指令，并使用 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。&lt;/p&gt;

&lt;p&gt;并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 &lt;code&gt;\&lt;/code&gt; 的命令换行方式，以及行首 &lt;code&gt;#&lt;/code&gt; 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。&lt;/p&gt;

&lt;p&gt;此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 &lt;code&gt;apt&lt;/code&gt; 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。&lt;/p&gt;

&lt;p&gt;很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。&lt;/p&gt;

&lt;h3 id=&#34;构建镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;构建镜像&lt;/h3&gt;

&lt;p&gt;好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;Dockerfile&lt;/code&gt; 文件所在目录执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM nginx
 ---&amp;gt; e43d811ce2f4
Step 2 : RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
 ---&amp;gt; Running in 9cdc27646c7b
 ---&amp;gt; 44aa4490ce2c
Removing intermediate container 9cdc27646c7b
Successfully built 44aa4490ce2c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 &lt;code&gt;Step 2&lt;/code&gt; 中，如同我们之前所说的那样，&lt;code&gt;RUN&lt;/code&gt; 指令启动了一个容器 &lt;code&gt;9cdc27646c7b&lt;/code&gt;，执行了所要求的命令，并最后提交了这一层 &lt;code&gt;44aa4490ce2c&lt;/code&gt;，随后删除了所用到的这个容器 &lt;code&gt;9cdc27646c7b&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这里我们使用了 &lt;code&gt;docker build&lt;/code&gt; 命令进行镜像构建。其格式为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build [选项] &amp;lt;上下文路径/URL/-&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里我们指定了最终镜像的名称 &lt;code&gt;-t nginx:v3&lt;/code&gt;，构建成功后，我们可以像之前运行 &lt;code&gt;nginx:v2&lt;/code&gt; 那样来运行这个镜像，其结果会和 &lt;code&gt;nginx:v2&lt;/code&gt; 一样。&lt;/p&gt;

&lt;h3 id=&#34;镜像构建上下文-context:13a98cce61a7c185eb25fd01e8410188&#34;&gt;镜像构建上下文（Context）&lt;/h3&gt;

&lt;p&gt;如果注意，会看到 &lt;code&gt;docker build&lt;/code&gt; 命令最后有一个 &lt;code&gt;.&lt;/code&gt;。&lt;code&gt;.&lt;/code&gt; 表示当前目录，而 &lt;code&gt;Dockerfile&lt;/code&gt; 就在当前目录，因此不少初学者以为这个路径是在指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 &lt;strong&gt;上下文路径&lt;/strong&gt;。那么什么是上下文呢？&lt;/p&gt;

&lt;p&gt;首先我们要理解 &lt;code&gt;docker build&lt;/code&gt; 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 &lt;a href=&#34;https://docs.docker.com/develop/sdk/&#34;&gt;Docker Remote API&lt;/a&gt;，而如 &lt;code&gt;docker&lt;/code&gt; 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 &lt;code&gt;docker&lt;/code&gt; 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。&lt;/p&gt;

&lt;p&gt;当我们进行镜像构建的时候，并非所有定制都会通过 &lt;code&gt;RUN&lt;/code&gt; 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 &lt;code&gt;COPY&lt;/code&gt; 指令、&lt;code&gt;ADD&lt;/code&gt; 指令等。而 &lt;code&gt;docker build&lt;/code&gt; 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？&lt;/p&gt;

&lt;p&gt;这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，&lt;code&gt;docker build&lt;/code&gt; 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。&lt;/p&gt;

&lt;p&gt;如果在 &lt;code&gt;Dockerfile&lt;/code&gt; 中这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY ./package.json /app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这并不是要复制执行 &lt;code&gt;docker build&lt;/code&gt; 命令所在的目录下的 &lt;code&gt;package.json&lt;/code&gt;，也不是复制 &lt;code&gt;Dockerfile&lt;/code&gt; 所在目录下的 &lt;code&gt;package.json&lt;/code&gt;，而是复制 &lt;strong&gt;上下文（context）&lt;/strong&gt; 目录下的 &lt;code&gt;package.json&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此，&lt;code&gt;COPY&lt;/code&gt; 这类指令中的源文件的路径都是*相对路径*。这也是初学者经常会问的为什么 &lt;code&gt;COPY ../package.json /app&lt;/code&gt; 或者 &lt;code&gt;COPY /opt/xxxx /app&lt;/code&gt; 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。&lt;/p&gt;

&lt;p&gt;现在就可以理解刚才的命令 &lt;code&gt;docker build -t nginx:v3 .&lt;/code&gt; 中的这个 &lt;code&gt;.&lt;/code&gt;，实际上是在指定上下文的目录，&lt;code&gt;docker build&lt;/code&gt; 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。&lt;/p&gt;

&lt;p&gt;如果观察 &lt;code&gt;docker build&lt;/code&gt; 输出，我们其实已经看到了这个发送上下文的过程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 &lt;code&gt;COPY /opt/xxxx /app&lt;/code&gt; 不工作后，于是干脆将 &lt;code&gt;Dockerfile&lt;/code&gt; 放到了硬盘根目录去构建，结果发现 &lt;code&gt;docker build&lt;/code&gt; 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 &lt;code&gt;docker build&lt;/code&gt; 打包整个硬盘，这显然是使用错误。&lt;/p&gt;

&lt;p&gt;一般来说，应该会将 &lt;code&gt;Dockerfile&lt;/code&gt; 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 &lt;code&gt;.gitignore&lt;/code&gt; 一样的语法写一个 &lt;code&gt;.dockerignore&lt;/code&gt;，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。&lt;/p&gt;

&lt;p&gt;那么为什么会有人误以为 &lt;code&gt;.&lt;/code&gt; 是指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在目录呢？这是因为在默认情况下，如果不额外指定 &lt;code&gt;Dockerfile&lt;/code&gt; 的话，会将上下文目录下的名为 &lt;code&gt;Dockerfile&lt;/code&gt; 的文件作为 Dockerfile。&lt;/p&gt;

&lt;p&gt;这只是默认行为，实际上 &lt;code&gt;Dockerfile&lt;/code&gt; 的文件名并不要求必须为 &lt;code&gt;Dockerfile&lt;/code&gt;，而且并不要求必须位于上下文目录中，比如可以用 &lt;code&gt;-f ../Dockerfile.php&lt;/code&gt; 参数指定某个文件作为 &lt;code&gt;Dockerfile&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当然，一般大家习惯性的会使用默认的文件名 &lt;code&gt;Dockerfile&lt;/code&gt;，以及会将其置于镜像构建上下文目录中。&lt;/p&gt;

&lt;h3 id=&#34;其它-docker-build-的用法:13a98cce61a7c185eb25fd01e8410188&#34;&gt;其它 &lt;code&gt;docker build&lt;/code&gt; 的用法&lt;/h3&gt;

&lt;h4 id=&#34;直接用-git-repo-进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;直接用 Git repo 进行构建&lt;/h4&gt;

&lt;p&gt;或许你已经注意到了，&lt;code&gt;docker build&lt;/code&gt; 还支持从 URL 构建，比如可以直接从 Git repo 中构建：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:11.1

Sending build context to Docker daemon 2.048 kB
Step 1 : FROM gitlab/gitlab-ce:11.1.0-ce.0
11.1.0-ce.0: Pulling from gitlab/gitlab-ce
aed15891ba52: Already exists
773ae8583d14: Already exists
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这行命令指定了构建所需的 Git repo，并且指定默认的 &lt;code&gt;master&lt;/code&gt; 分支，构建目录为 &lt;code&gt;/11.1/&lt;/code&gt;，然后 Docker 就会自己去 &lt;code&gt;git clone&lt;/code&gt; 这个项目、切换到指定分支、并进入到指定目录后开始构建。&lt;/p&gt;

&lt;h4 id=&#34;用给定的-tar-压缩包构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;用给定的 tar 压缩包构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build http://server/context.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果所给出的 URL 不是个 Git repo，而是个 &lt;code&gt;tar&lt;/code&gt; 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。&lt;/p&gt;

&lt;h4 id=&#34;从标准输入中读取-dockerfile-进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;从标准输入中读取 Dockerfile 进行构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build - &amp;lt; Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat Dockerfile | docker build -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果标准输入传入的是文本文件，则将其视为 &lt;code&gt;Dockerfile&lt;/code&gt;，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 &lt;code&gt;COPY&lt;/code&gt; 进镜像之类的事情。&lt;/p&gt;

&lt;h4 id=&#34;从标准输入中读取上下文压缩包进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;从标准输入中读取上下文压缩包进行构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build - &amp;lt; context.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果发现标准输入的文件格式是 &lt;code&gt;gzip&lt;/code&gt;、&lt;code&gt;bzip2&lt;/code&gt; 以及 &lt;code&gt;xz&lt;/code&gt; 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。&lt;/p&gt;

&lt;h2 id=&#34;dockerfile-指令详解:13a98cce61a7c185eb25fd01e8410188&#34;&gt;Dockerfile 指令详解&lt;/h2&gt;

&lt;p&gt;我们已经介绍了 &lt;code&gt;FROM&lt;/code&gt;，&lt;code&gt;RUN&lt;/code&gt;，还提及了 &lt;code&gt;COPY&lt;/code&gt;, &lt;code&gt;ADD&lt;/code&gt;，其实 &lt;code&gt;Dockerfile&lt;/code&gt; 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。&lt;/p&gt;

&lt;h3 id=&#34;copy-复制文件:13a98cce61a7c185eb25fd01e8410188&#34;&gt;COPY 复制文件&lt;/h3&gt;

&lt;p&gt;格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] &amp;lt;源路径&amp;gt;... &amp;lt;目标路径&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] [&amp;quot;&amp;lt;源路径1&amp;gt;&amp;quot;,... &amp;quot;&amp;lt;目标路径&amp;gt;&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和 &lt;code&gt;RUN&lt;/code&gt; 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; 指令将从构建上下文目录中 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 的文件/目录复制到新的一层的镜像内的 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 位置。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY package.json /usr/src/app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 &lt;a href=&#34;https://golang.org/pkg/path/filepath/#Match&#34;&gt;&lt;code&gt;filepath.Match&lt;/code&gt;&lt;/a&gt; 规则，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY hom* /mydir/
COPY hom?.txt /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。&lt;/p&gt;

&lt;p&gt;此外，还需要注意一点，使用 &lt;code&gt;COPY&lt;/code&gt; 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。&lt;/p&gt;

&lt;p&gt;在使用该指令的时候还可以加上 &lt;code&gt;--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;&lt;/code&gt; 选项来改变文件的所属用户及所属组。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY --chown=55:mygroup files* /mydir/
COPY --chown=bin files* /mydir/
COPY --chown=1 files* /mydir/
COPY --chown=10:11 files* /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-更高级的复制文件:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ADD 更高级的复制文件&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; 指令和 &lt;code&gt;COPY&lt;/code&gt; 的格式和性质基本一致。但是在 &lt;code&gt;COPY&lt;/code&gt; 基础上增加了一些功能。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 可以是一个 &lt;code&gt;URL&lt;/code&gt;，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 去。下载后的文件权限自动设置为 &lt;code&gt;600&lt;/code&gt;，如果这并不是想要的权限，那么还需要增加额外的一层 &lt;code&gt;RUN&lt;/code&gt; 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 &lt;code&gt;RUN&lt;/code&gt; 指令进行解压缩。所以不如直接使用 &lt;code&gt;RUN&lt;/code&gt; 指令，然后使用 &lt;code&gt;wget&lt;/code&gt; 或者 &lt;code&gt;curl&lt;/code&gt; 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。&lt;/p&gt;

&lt;p&gt;如果 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 为一个 &lt;code&gt;tar&lt;/code&gt; 压缩文件的话，压缩格式为 &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt; 以及 &lt;code&gt;xz&lt;/code&gt; 的情况下，&lt;code&gt;ADD&lt;/code&gt; 指令将会自动解压缩这个压缩文件到 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 去。&lt;/p&gt;

&lt;p&gt;在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 &lt;code&gt;ubuntu&lt;/code&gt; 中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM scratch
ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 &lt;code&gt;ADD&lt;/code&gt; 命令了。&lt;/p&gt;

&lt;p&gt;在 Docker 官方的 &lt;a href=&#34;../../appendix/best_practices.md&#34;&gt;Dockerfile 最佳实践文档&lt;/a&gt; 中要求，尽可能的使用 &lt;code&gt;COPY&lt;/code&gt;，因为 &lt;code&gt;COPY&lt;/code&gt; 的语义很明确，就是复制文件而已，而 &lt;code&gt;ADD&lt;/code&gt; 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 &lt;code&gt;ADD&lt;/code&gt; 的场合，就是所提及的需要自动解压缩的场合。&lt;/p&gt;

&lt;p&gt;另外需要注意的是，&lt;code&gt;ADD&lt;/code&gt; 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。&lt;/p&gt;

&lt;p&gt;因此在 &lt;code&gt;COPY&lt;/code&gt; 和 &lt;code&gt;ADD&lt;/code&gt; 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 &lt;code&gt;COPY&lt;/code&gt; 指令，仅在需要自动解压缩的场合使用 &lt;code&gt;ADD&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在使用该指令的时候还可以加上 &lt;code&gt;--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;&lt;/code&gt; 选项来改变文件的所属用户及所属组。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ADD --chown=55:mygroup files* /mydir/
ADD --chown=bin files* /mydir/
ADD --chown=1 files* /mydir/
ADD --chown=10:11 files* /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cmd-容器启动命令:13a98cce61a7c185eb25fd01e8410188&#34;&gt;CMD 容器启动命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 指令的格式和 &lt;code&gt;RUN&lt;/code&gt; 相似，也是两种格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&lt;/code&gt; 格式：&lt;code&gt;CMD &amp;lt;命令&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt; 格式：&lt;code&gt;CMD [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数列表格式：&lt;code&gt;CMD [&amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;...]&lt;/code&gt;。在指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令后，用 &lt;code&gt;CMD&lt;/code&gt; 指定具体的参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。&lt;code&gt;CMD&lt;/code&gt; 指令就是用于指定默认的容器主进程的启动命令的。&lt;/p&gt;

&lt;p&gt;在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，&lt;code&gt;ubuntu&lt;/code&gt; 镜像默认的 &lt;code&gt;CMD&lt;/code&gt; 是 &lt;code&gt;/bin/bash&lt;/code&gt;，如果我们直接 &lt;code&gt;docker run -it ubuntu&lt;/code&gt; 的话，会直接进入 &lt;code&gt;bash&lt;/code&gt;。我们也可以在运行时指定运行别的命令，如 &lt;code&gt;docker run -it ubuntu cat /etc/os-release&lt;/code&gt;。这就是用 &lt;code&gt;cat /etc/os-release&lt;/code&gt; 命令替换了默认的 &lt;code&gt;/bin/bash&lt;/code&gt; 命令了，输出了系统版本信息。&lt;/p&gt;

&lt;p&gt;在指令格式上，一般推荐使用 &lt;code&gt;exec&lt;/code&gt; 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &lt;code&gt;&amp;quot;&lt;/code&gt;，而不要使用单引号。&lt;/p&gt;

&lt;p&gt;如果使用 &lt;code&gt;shell&lt;/code&gt; 格式的话，实际的命令会被包装为 &lt;code&gt;sh -c&lt;/code&gt; 的参数的形式进行执行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD echo $HOME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在实际执行中，会将其变更为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD [ &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;echo $HOME&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。&lt;/p&gt;

&lt;p&gt;提到 &lt;code&gt;CMD&lt;/code&gt; 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。&lt;/p&gt;

&lt;p&gt;Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 &lt;code&gt;systemd&lt;/code&gt; 去启动后台服务，容器内没有后台服务的概念。&lt;/p&gt;

&lt;p&gt;一些初学者将 &lt;code&gt;CMD&lt;/code&gt; 写为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后发现容器执行后就立即退出了。甚至在容器内去使用 &lt;code&gt;systemctl&lt;/code&gt; 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。&lt;/p&gt;

&lt;p&gt;对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。&lt;/p&gt;

&lt;p&gt;而使用 &lt;code&gt;service nginx start&lt;/code&gt; 命令，则是希望 upstart 来以后台守护进程形式启动 &lt;code&gt;nginx&lt;/code&gt; 服务。而刚才说了 &lt;code&gt;CMD service nginx start&lt;/code&gt; 会被理解为 &lt;code&gt;CMD [ &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;service nginx start&amp;quot;]&lt;/code&gt;，因此主进程实际上是 &lt;code&gt;sh&lt;/code&gt;。那么当 &lt;code&gt;service nginx start&lt;/code&gt; 命令结束后，&lt;code&gt;sh&lt;/code&gt; 也就结束了，&lt;code&gt;sh&lt;/code&gt; 作为主进程退出了，自然就会令容器退出。&lt;/p&gt;

&lt;p&gt;正确的做法是直接执行 &lt;code&gt;nginx&lt;/code&gt; 可执行文件，并且要求以前台形式运行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;entrypoint-入口点:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ENTRYPOINT 入口点&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的格式和 &lt;code&gt;RUN&lt;/code&gt; 指令格式一样，分为 &lt;code&gt;exec&lt;/code&gt; 格式和 &lt;code&gt;shell&lt;/code&gt; 格式。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的目的和 &lt;code&gt;CMD&lt;/code&gt; 一样，都是在指定容器启动程序及参数。&lt;code&gt;ENTRYPOINT&lt;/code&gt; 在运行时也可以替代，不过比 &lt;code&gt;CMD&lt;/code&gt; 要略显繁琐，需要通过 &lt;code&gt;docker run&lt;/code&gt; 的参数 &lt;code&gt;--entrypoint&lt;/code&gt; 来指定。&lt;/p&gt;

&lt;p&gt;当指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 后，&lt;code&gt;CMD&lt;/code&gt; 的含义就发生了改变，不再是直接的运行其命令，而是将 &lt;code&gt;CMD&lt;/code&gt; 的内容作为参数传给 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令，换句话说实际执行时，将变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;ENTRYPOINT&amp;gt; &amp;quot;&amp;lt;CMD&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么有了 &lt;code&gt;CMD&lt;/code&gt; 后，为什么还要有 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 呢？这种 &lt;code&gt;&amp;lt;ENTRYPOINT&amp;gt; &amp;quot;&amp;lt;CMD&amp;gt;&amp;quot;&lt;/code&gt; 有什么好处么？让我们来看几个场景。&lt;/p&gt;

&lt;h4 id=&#34;场景一-让镜像变成像命令一样使用:13a98cce61a7c185eb25fd01e8410188&#34;&gt;场景一：让镜像变成像命令一样使用&lt;/h4&gt;

&lt;p&gt;假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 &lt;code&gt;CMD&lt;/code&gt; 来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:18.04
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y curl \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
CMD [ &amp;quot;curl&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;https://ip.cn&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假如我们使用 &lt;code&gt;docker build -t myip .&lt;/code&gt; 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 &lt;code&gt;CMD&lt;/code&gt; 中可以看到实质的命令是 &lt;code&gt;curl&lt;/code&gt;，那么如果我们希望显示 HTTP 头信息，就需要加上 &lt;code&gt;-i&lt;/code&gt; 参数。那么我们可以直接加 &lt;code&gt;-i&lt;/code&gt; 参数给 &lt;code&gt;docker run myip&lt;/code&gt; 么？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip -i
docker: Error response from daemon: invalid header field value &amp;quot;oci runtime error: container_linux.go:247: starting container process caused \&amp;quot;exec: \\\&amp;quot;-i\\\&amp;quot;: executable file not found in $PATH\&amp;quot;\n&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到可执行文件找不到的报错，&lt;code&gt;executable file not found&lt;/code&gt;。之前我们说过，跟在镜像名后面的是 &lt;code&gt;command&lt;/code&gt;，运行时会替换 &lt;code&gt;CMD&lt;/code&gt; 的默认值。因此这里的 &lt;code&gt;-i&lt;/code&gt; 替换了原来的 &lt;code&gt;CMD&lt;/code&gt;，而不是添加在原来的 &lt;code&gt;curl -s https://ip.cn&lt;/code&gt; 后面。而 &lt;code&gt;-i&lt;/code&gt; 根本不是命令，所以自然找不到。&lt;/p&gt;

&lt;p&gt;那么如果我们希望加入 &lt;code&gt;-i&lt;/code&gt; 这参数，我们就必须重新完整的输入这个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip curl -s https://ip.cn -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这显然不是很好的解决方案，而使用 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 就可以解决这个问题。现在我们重新用 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 来实现这个镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:18.04
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y curl \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
ENTRYPOINT [ &amp;quot;curl&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;https://ip.cn&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次我们再来尝试直接使用 &lt;code&gt;docker run myip -i&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通

$ docker run myip -i
HTTP/1.1 200 OK
Server: nginx/1.8.0
Date: Tue, 22 Nov 2016 05:12:40 GMT
Content-Type: text/html; charset=UTF-8
Vary: Accept-Encoding
X-Powered-By: PHP/5.6.24-1~dotdeb+7.1
X-Cache: MISS from cache-2
X-Cache-Lookup: MISS from cache-2:80
X-Cache: MISS from proxy-2_6
Transfer-Encoding: chunked
Via: 1.1 cache-2:80, 1.1 proxy-2_6:8006
Connection: keep-alive

当前 IP：61.148.226.66 来自：北京市 联通
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，这次成功了。这是因为当存在 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 后，&lt;code&gt;CMD&lt;/code&gt; 的内容将会作为参数传给 &lt;code&gt;ENTRYPOINT&lt;/code&gt;，而这里 &lt;code&gt;-i&lt;/code&gt; 就是新的 &lt;code&gt;CMD&lt;/code&gt;，因此会作为参数传给 &lt;code&gt;curl&lt;/code&gt;，从而达到了我们预期的效果。&lt;/p&gt;

&lt;h4 id=&#34;场景二-应用运行前的准备工作:13a98cce61a7c185eb25fd01e8410188&#34;&gt;场景二：应用运行前的准备工作&lt;/h4&gt;

&lt;p&gt;启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;mysql&lt;/code&gt; 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。&lt;/p&gt;

&lt;p&gt;此外，可能希望避免使用 &lt;code&gt;root&lt;/code&gt; 用户去启动服务，从而提高安全性，而在启动服务前还需要以 &lt;code&gt;root&lt;/code&gt; 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 &lt;code&gt;root&lt;/code&gt; 身份执行，方便调试等。&lt;/p&gt;

&lt;p&gt;这些准备工作是和容器 &lt;code&gt;CMD&lt;/code&gt; 无关的，无论 &lt;code&gt;CMD&lt;/code&gt; 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 中去执行，而这个脚本会将接到的参数（也就是 &lt;code&gt;&amp;lt;CMD&amp;gt;&lt;/code&gt;）作为命令，在脚本最后执行。比如官方镜像 &lt;code&gt;redis&lt;/code&gt; 中就是这么做的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM alpine:3.4
...
RUN addgroup -S redis &amp;amp;&amp;amp; adduser -S -G redis redis
...
ENTRYPOINT [&amp;quot;docker-entrypoint.sh&amp;quot;]

EXPOSE 6379
CMD [ &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 为 &lt;code&gt;docker-entrypoint.sh&lt;/code&gt; 脚本。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
...
# allow the container to be started with `--user`
if [ &amp;quot;$1&amp;quot; = &#39;redis-server&#39; -a &amp;quot;$(id -u)&amp;quot; = &#39;0&#39; ]; then
	chown -R redis .
	exec su-exec redis &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
fi

exec &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该脚本的内容就是根据 &lt;code&gt;CMD&lt;/code&gt; 的内容来判断，如果是 &lt;code&gt;redis-server&lt;/code&gt; 的话，则切换到 &lt;code&gt;redis&lt;/code&gt; 用户身份启动服务器，否则依旧使用 &lt;code&gt;root&lt;/code&gt; 身份执行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it redis id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;env-设置环境变量:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ENV 设置环境变量&lt;/h3&gt;

&lt;p&gt;格式有两种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENV &amp;lt;key1&amp;gt;=&amp;lt;value1&amp;gt; &amp;lt;key2&amp;gt;=&amp;lt;value2&amp;gt;...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 &lt;code&gt;RUN&lt;/code&gt;，还是运行时的应用，都可以直接使用这里定义的环境变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfie&#34;&gt;ENV VERSION=1.0 DEBUG=on \
    NAME=&amp;quot;Happy Feet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。&lt;/p&gt;

&lt;p&gt;定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 &lt;code&gt;node&lt;/code&gt; 镜像 &lt;code&gt;Dockerfile&lt;/code&gt; 中，就有类似这样的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ENV NODE_VERSION 7.2.0

RUN curl -SLO &amp;quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; \
  &amp;amp;&amp;amp; curl -SLO &amp;quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&amp;quot; \
  &amp;amp;&amp;amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  &amp;amp;&amp;amp; grep &amp;quot; node-v$NODE_VERSION-linux-x64.tar.xz\$&amp;quot; SHASUMS256.txt | sha256sum -c - \
  &amp;amp;&amp;amp; tar -xJf &amp;quot;node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; -C /usr/local --strip-components=1 \
  &amp;amp;&amp;amp; rm &amp;quot;node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; SHASUMS256.txt.asc SHASUMS256.txt \
  &amp;amp;&amp;amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里先定义了环境变量 &lt;code&gt;NODE_VERSION&lt;/code&gt;，其后的 &lt;code&gt;RUN&lt;/code&gt; 这层里，多次使用 &lt;code&gt;$NODE_VERSION&lt;/code&gt; 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 &lt;code&gt;7.2.0&lt;/code&gt; 即可，&lt;code&gt;Dockerfile&lt;/code&gt; 构建维护变得更轻松了。&lt;/p&gt;

&lt;p&gt;下列指令可以支持环境变量展开： &lt;code&gt;ADD&lt;/code&gt;、&lt;code&gt;COPY&lt;/code&gt;、&lt;code&gt;ENV&lt;/code&gt;、&lt;code&gt;EXPOSE&lt;/code&gt;、&lt;code&gt;LABEL&lt;/code&gt;、&lt;code&gt;USER&lt;/code&gt;、&lt;code&gt;WORKDIR&lt;/code&gt;、&lt;code&gt;VOLUME&lt;/code&gt;、&lt;code&gt;STOPSIGNAL&lt;/code&gt;、&lt;code&gt;ONBUILD&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 &lt;code&gt;Dockerfile&lt;/code&gt; 制作更多的镜像，只需使用不同的环境变量即可。&lt;/p&gt;

&lt;h3 id=&#34;arg-构建参数:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ARG 构建参数&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;ARG &amp;lt;参数名&amp;gt;[=&amp;lt;默认值&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;构建参数和 &lt;code&gt;ENV&lt;/code&gt; 的效果一样，都是设置环境变量。所不同的是，&lt;code&gt;ARG&lt;/code&gt; 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 &lt;code&gt;ARG&lt;/code&gt; 保存密码之类的信息，因为 &lt;code&gt;docker history&lt;/code&gt; 还是可以看到所有值的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 中的 &lt;code&gt;ARG&lt;/code&gt; 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 &lt;code&gt;docker build&lt;/code&gt; 中用 &lt;code&gt;--build-arg &amp;lt;参数名&amp;gt;=&amp;lt;值&amp;gt;&lt;/code&gt; 来覆盖。&lt;/p&gt;

&lt;p&gt;在 1.13 之前的版本，要求 &lt;code&gt;--build-arg&lt;/code&gt; 中的参数名，必须在 &lt;code&gt;Dockerfile&lt;/code&gt; 中用 &lt;code&gt;ARG&lt;/code&gt; 定义过了，换句话说，就是 &lt;code&gt;--build-arg&lt;/code&gt; 指定的参数，必须在 &lt;code&gt;Dockerfile&lt;/code&gt; 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 &lt;code&gt;Dockerfile&lt;/code&gt; 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。&lt;/p&gt;

&lt;h3 id=&#34;volume-定义匿名卷:13a98cce61a7c185eb25fd01e8410188&#34;&gt;VOLUME 定义匿名卷&lt;/h3&gt;

&lt;p&gt;格式为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VOLUME [&amp;quot;&amp;lt;路径1&amp;gt;&amp;quot;, &amp;quot;&amp;lt;路径2&amp;gt;&amp;quot;...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VOLUME &amp;lt;路径&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 &lt;code&gt;Dockerfile&lt;/code&gt; 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;VOLUME /data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 &lt;code&gt;/data&lt;/code&gt; 目录就会在运行时自动挂载为匿名卷，任何向 &lt;code&gt;/data&lt;/code&gt; 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -v mydata:/data xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这行命令中，就使用了 &lt;code&gt;mydata&lt;/code&gt; 这个命名卷挂载到了 &lt;code&gt;/data&lt;/code&gt; 这个位置，替代了 &lt;code&gt;Dockerfile&lt;/code&gt; 中定义的匿名卷的挂载配置。&lt;/p&gt;

&lt;h3 id=&#34;expose-声明端口:13a98cce61a7c185eb25fd01e8410188&#34;&gt;EXPOSE 声明端口&lt;/h3&gt;

&lt;p&gt;格式为 &lt;code&gt;EXPOSE &amp;lt;端口1&amp;gt; [&amp;lt;端口2&amp;gt;...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 &lt;code&gt;docker run -P&lt;/code&gt; 时，会自动随机映射 &lt;code&gt;EXPOSE&lt;/code&gt; 的端口。&lt;/p&gt;

&lt;p&gt;要将 &lt;code&gt;EXPOSE&lt;/code&gt; 和在运行时使用 &lt;code&gt;-p &amp;lt;宿主端口&amp;gt;:&amp;lt;容器端口&amp;gt;&lt;/code&gt; 区分开来。&lt;code&gt;-p&lt;/code&gt;，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 &lt;code&gt;EXPOSE&lt;/code&gt; 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。&lt;/p&gt;

&lt;h3 id=&#34;workdir-指定工作目录:13a98cce61a7c185eb25fd01e8410188&#34;&gt;WORKDIR 指定工作目录&lt;/h3&gt;

&lt;p&gt;格式为 &lt;code&gt;WORKDIR &amp;lt;工作目录路径&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，&lt;code&gt;WORKDIR&lt;/code&gt; 会帮你建立目录。&lt;/p&gt;

&lt;p&gt;之前提到一些初学者常犯的错误是把 &lt;code&gt;Dockerfile&lt;/code&gt; 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;RUN cd /app
RUN echo &amp;quot;hello&amp;quot; &amp;gt; world.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果将这个 &lt;code&gt;Dockerfile&lt;/code&gt; 进行构建镜像运行后，会发现找不到 &lt;code&gt;/app/world.txt&lt;/code&gt; 文件，或者其内容不是 &lt;code&gt;hello&lt;/code&gt;。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 &lt;code&gt;Dockerfile&lt;/code&gt; 中，这两行 &lt;code&gt;RUN&lt;/code&gt; 命令的执行环境根本不同，是两个完全不同的容器。这就是对 &lt;code&gt;Dockerfile&lt;/code&gt; 构建分层存储的概念不了解所导致的错误。&lt;/p&gt;

&lt;p&gt;之前说过每一个 &lt;code&gt;RUN&lt;/code&gt; 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 &lt;code&gt;RUN cd /app&lt;/code&gt; 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。&lt;/p&gt;

&lt;p&gt;因此如果需要改变以后各层的工作目录的位置，那么应该使用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令。&lt;/p&gt;

&lt;h3 id=&#34;user-指定当前用户:13a98cce61a7c185eb25fd01e8410188&#34;&gt;USER 指定当前用户&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;USER &amp;lt;用户名&amp;gt;[:&amp;lt;用户组&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;USER&lt;/code&gt; 指令和 &lt;code&gt;WORKDIR&lt;/code&gt; 相似，都是改变环境状态并影响以后的层。&lt;code&gt;WORKDIR&lt;/code&gt; 是改变工作目录，&lt;code&gt;USER&lt;/code&gt; 则是改变之后层的执行 &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt; 以及 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 这类命令的身份。&lt;/p&gt;

&lt;p&gt;当然，和 &lt;code&gt;WORKDIR&lt;/code&gt; 一样，&lt;code&gt;USER&lt;/code&gt; 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN groupadd -r redis &amp;amp;&amp;amp; useradd -r -g redis redis
USER redis
RUN [ &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果以 &lt;code&gt;root&lt;/code&gt; 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 &lt;code&gt;su&lt;/code&gt; 或者 &lt;code&gt;sudo&lt;/code&gt;，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 &lt;a href=&#34;https://github.com/tianon/gosu&#34;&gt;&lt;code&gt;gosu&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# 建立 redis 用户，并使用 gosu 换另一个用户执行命令
RUN groupadd -r redis &amp;amp;&amp;amp; useradd -r -g redis redis
# 下载 gosu
RUN wget -O /usr/local/bin/gosu &amp;quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&amp;quot; \
    &amp;amp;&amp;amp; chmod +x /usr/local/bin/gosu \
    &amp;amp;&amp;amp; gosu nobody true
# 设置 CMD，并以另外的用户执行
CMD [ &amp;quot;exec&amp;quot;, &amp;quot;gosu&amp;quot;, &amp;quot;redis&amp;quot;, &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;healthcheck-健康检查:13a98cce61a7c185eb25fd01e8410188&#34;&gt;HEALTHCHECK 健康检查&lt;/h3&gt;

&lt;p&gt;格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HEALTHCHECK [选项] CMD &amp;lt;命令&amp;gt;&lt;/code&gt;：设置检查容器健康状况的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEALTHCHECK NONE&lt;/code&gt;：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。&lt;/p&gt;

&lt;p&gt;在没有 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。&lt;/p&gt;

&lt;p&gt;而自 1.12 之后，Docker 提供了 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。&lt;/p&gt;

&lt;p&gt;当在一个镜像指定了 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令后，用其启动容器，初始状态会为 &lt;code&gt;starting&lt;/code&gt;，在 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令检查成功后变为 &lt;code&gt;healthy&lt;/code&gt;，如果连续一定次数失败，则会变为 &lt;code&gt;unhealthy&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; 支持下列选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--interval=&amp;lt;间隔&amp;gt;&lt;/code&gt;：两次健康检查的间隔，默认为 30 秒；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--timeout=&amp;lt;时长&amp;gt;&lt;/code&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--retries=&amp;lt;次数&amp;gt;&lt;/code&gt;：当连续失败指定次数后，则将容器状态视为 &lt;code&gt;unhealthy&lt;/code&gt;，默认 3 次。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和 &lt;code&gt;CMD&lt;/code&gt;, &lt;code&gt;ENTRYPOINT&lt;/code&gt; 一样，&lt;code&gt;HEALTHCHECK&lt;/code&gt; 只可以出现一次，如果写了多个，只有最后一个生效。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;HEALTHCHECK [选项] CMD&lt;/code&gt; 后面的命令，格式和 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 一样，分为 &lt;code&gt;shell&lt;/code&gt; 格式，和 &lt;code&gt;exec&lt;/code&gt; 格式。命令的返回值决定了该次健康检查的成功与否：&lt;code&gt;0&lt;/code&gt;：成功；&lt;code&gt;1&lt;/code&gt;：失败；&lt;code&gt;2&lt;/code&gt;：保留，不要使用这个值。&lt;/p&gt;

&lt;p&gt;假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 &lt;code&gt;curl&lt;/code&gt; 来帮助判断，其 &lt;code&gt;Dockerfile&lt;/code&gt; 的 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 可以这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM nginx
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y curl &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=5s --timeout=3s \
  CMD curl -fs http://localhost/ || exit 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 &lt;code&gt;curl -fs http://localhost/ || exit 1&lt;/code&gt; 作为健康检查命令。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;docker build&lt;/code&gt; 来构建这个镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t myweb:v1 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建好了后，我们启动一个容器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --name web -p 80:80 myweb:v1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当运行该镜像后，可以通过 &lt;code&gt;docker container ls&lt;/code&gt; 看到最初的状态为 &lt;code&gt;(health: starting)&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES
03e28eb00bd0        myweb:v1            &amp;quot;nginx -g &#39;daemon off&amp;quot;   3 seconds ago       Up 2 seconds (health: starting)   80/tcp, 443/tcp     web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在等待几秒钟后，再次 &lt;code&gt;docker container ls&lt;/code&gt;，就会看到健康状态变化为了 &lt;code&gt;(healthy)&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES
03e28eb00bd0        myweb:v1            &amp;quot;nginx -g &#39;daemon off&amp;quot;   18 seconds ago      Up 16 seconds (healthy)   80/tcp, 443/tcp     web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果健康检查连续失败超过了重试次数，状态就会变为 &lt;code&gt;(unhealthy)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为了帮助排障，健康检查命令的输出（包括 &lt;code&gt;stdout&lt;/code&gt; 以及 &lt;code&gt;stderr&lt;/code&gt;）都会被存储于健康状态里，可以用 &lt;code&gt;docker inspect&lt;/code&gt; 来查看。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect --format &#39;{{json .State.Health}}&#39; web | python -m json.tool
{
    &amp;quot;FailingStreak&amp;quot;: 0,
    &amp;quot;Log&amp;quot;: [
        {
            &amp;quot;End&amp;quot;: &amp;quot;2016-11-25T14:35:37.940957051Z&amp;quot;,
            &amp;quot;ExitCode&amp;quot;: 0,
            &amp;quot;Output&amp;quot;: &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;\n&amp;lt;style&amp;gt;\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n&amp;lt;/style&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;\n&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&amp;lt;/p&amp;gt;\n\n&amp;lt;p&amp;gt;For online documentation and support please refer to\n&amp;lt;a href=\&amp;quot;http://nginx.org/\&amp;quot;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;\nCommercial support is available at\n&amp;lt;a href=\&amp;quot;http://nginx.com/\&amp;quot;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;\n\n&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you for using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&amp;quot;,
            &amp;quot;Start&amp;quot;: &amp;quot;2016-11-25T14:35:37.780192565Z&amp;quot;
        }
    ],
    &amp;quot;Status&amp;quot;: &amp;quot;healthy&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;onbuild-为他人做嫁衣裳:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ONBUILD 为他人做嫁衣裳&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;ONBUILD &amp;lt;其它指令&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 是一个特殊的指令，它后面跟的是其它指令，比如 &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;COPY&lt;/code&gt; 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 中的其它指令都是为了定制当前镜像而准备的，唯有 &lt;code&gt;ONBUILD&lt;/code&gt; 是为了帮助别人定制自己而准备的。&lt;/p&gt;

&lt;p&gt;假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 &lt;code&gt;npm&lt;/code&gt; 进行包管理，所有依赖、配置、启动信息等会放到 &lt;code&gt;package.json&lt;/code&gt; 文件里。在拿到程序代码后，需要先进行 &lt;code&gt;npm install&lt;/code&gt; 才可以获得所有需要的依赖。然后就可以通过 &lt;code&gt;npm start&lt;/code&gt; 来启动应用。因此，一般来说会这样写 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
COPY ./package.json /app
RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
COPY . /app/
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把这个 &lt;code&gt;Dockerfile&lt;/code&gt; 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 &lt;code&gt;Dockerfile&lt;/code&gt; 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。&lt;/p&gt;

&lt;p&gt;如果第一个 Node.js 项目在开发过程中，发现这个 &lt;code&gt;Dockerfile&lt;/code&gt; 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 &lt;code&gt;Dockerfile&lt;/code&gt;，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 &lt;code&gt;Dockerfile&lt;/code&gt; 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 &lt;code&gt;Dockerfile&lt;/code&gt;，而第二个项目的 &lt;code&gt;Dockerfile&lt;/code&gt; 就会被自动修复。&lt;/p&gt;

&lt;p&gt;那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 &lt;code&gt;Dockerfile&lt;/code&gt; 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 &lt;code&gt;Dockerfile&lt;/code&gt; 就会变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 &lt;code&gt;my-node&lt;/code&gt; 的话，各个项目内的自己的 &lt;code&gt;Dockerfile&lt;/code&gt; 就变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM my-node
COPY ./package.json /app
RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
COPY . /app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基础镜像变化后，各个项目都用这个 &lt;code&gt;Dockerfile&lt;/code&gt; 重新构建镜像，会继承基础镜像的更新。&lt;/p&gt;

&lt;p&gt;那么，问题解决了么？没有。准确说，只解决了一半。如果这个 &lt;code&gt;Dockerfile&lt;/code&gt; 里面有些东西需要调整呢？比如 &lt;code&gt;npm install&lt;/code&gt; 都需要加一些参数，那怎么办？这一行 &lt;code&gt;RUN&lt;/code&gt; 是不可能放入基础镜像的，因为涉及到了当前项目的 &lt;code&gt;./package.json&lt;/code&gt;，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 &lt;code&gt;Dockerfile&lt;/code&gt; 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 可以解决这个问题。让我们用 &lt;code&gt;ONBUILD&lt;/code&gt; 重新写一下基础镜像的 &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
ONBUILD COPY ./package.json /app
ONBUILD RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
ONBUILD COPY . /app/
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次我们回到原始的 &lt;code&gt;Dockerfile&lt;/code&gt;，但是这次将项目相关的指令加上 &lt;code&gt;ONBUILD&lt;/code&gt;，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 &lt;code&gt;Dockerfile&lt;/code&gt; 就变成了简单地：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM my-node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的，只有这么一行。当在各个项目目录中，用这个只有一行的 &lt;code&gt;Dockerfile&lt;/code&gt; 构建镜像时，之前基础镜像的那三行 &lt;code&gt;ONBUILD&lt;/code&gt; 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 &lt;code&gt;npm install&lt;/code&gt;，生成应用镜像。&lt;/p&gt;

&lt;h3 id=&#34;参考文档:13a98cce61a7c185eb25fd01e8410188&#34;&gt;参考文档&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfie&lt;/code&gt; 官方文档：&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 最佳实践文档：&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34;&gt;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 官方镜像 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;https://github.com/docker-library/docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker cmd</title>
      <link>https://bibo19842003.github.io/docker/docker-cmd/</link>
      <pubDate>Tue, 26 Mar 2019 17:52:03 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-cmd/</guid>
      <description>

&lt;h1 id=&#34;docker-命令查询&#34;&gt;Docker 命令查询&lt;/h1&gt;

&lt;h2 id=&#34;基本语法&#34;&gt;基本语法&lt;/h2&gt;

&lt;p&gt;Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;客户端命令：基本命令格式为 &lt;code&gt;docker [OPTIONS] COMMAND [arg...]&lt;/code&gt;；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务端命令：基本命令格式为 &lt;code&gt;dockerd [OPTIONS]&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以通过 &lt;code&gt;man docker&lt;/code&gt; 或 &lt;code&gt;docker help&lt;/code&gt; 来查看这些命令。&lt;/p&gt;

&lt;h2 id=&#34;客户端命令选项&#34;&gt;客户端命令选项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--config=&amp;quot;&amp;quot;&lt;/code&gt;：指定客户端配置文件，默认为 &lt;code&gt;~/.docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D=true|false&lt;/code&gt;：是否使用 debug 模式。默认不开启；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H, --host=[]&lt;/code&gt;：指定命令对应 Docker 守护进程的监听接口，可以为 unix 套接字 &lt;code&gt;unix:///path/to/socket&lt;/code&gt;，文件句柄 &lt;code&gt;fd://socketfd&lt;/code&gt; 或 tcp 套接字 &lt;code&gt;tcp://[host[:port]]&lt;/code&gt;，默认为 &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l, --log-level=&amp;quot;debug|info|warn|error|fatal&amp;quot;&lt;/code&gt;：指定日志输出级别；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tls=true|false&lt;/code&gt;：是否对 Docker 守护进程启用 TLS 安全机制，默认为否；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscacert=/.docker/ca.pem&lt;/code&gt;：TLS CA 签名的可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/cert.pem&lt;/code&gt;：TLS 可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/key.pem&lt;/code&gt;：TLS 密钥文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlsverify=true|false&lt;/code&gt;：启用 TLS 校验，默认为否。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dockerd-命令选项&#34;&gt;dockerd 命令选项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--api-cors-header=&amp;quot;&amp;quot;&lt;/code&gt;：CORS 头部域，默认不允许 CORS，要允许任意的跨域访问，可以指定为 &amp;laquo;*&amp;laquo;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--authorization-plugin=&amp;quot;&amp;quot;&lt;/code&gt;：载入认证的插件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-b=&amp;quot;&amp;quot;&lt;/code&gt;：将容器挂载到一个已存在的网桥上。指定为 &lt;code&gt;none&lt;/code&gt; 时则禁用容器的网络，与 &lt;code&gt;--bip&lt;/code&gt; 选项互斥；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--bip=&amp;quot;&amp;quot;&lt;/code&gt;：让动态创建的 &lt;code&gt;docker0&lt;/code&gt; 网桥采用给定的 CIDR 地址; 与 &lt;code&gt;-b&lt;/code&gt; 选项互斥；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cgroup-parent=&amp;quot;&amp;quot;&lt;/code&gt;：指定 cgroup 的父组，默认 fs cgroup 驱动为 &lt;code&gt;/docker&lt;/code&gt;，systemd cgroup 驱动为 &lt;code&gt;system.slice&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cluster-store=&amp;quot;&amp;quot;&lt;/code&gt;：构成集群（如 &lt;code&gt;Swarm&lt;/code&gt;）时，集群键值数据库服务地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cluster-advertise=&amp;quot;&amp;quot;&lt;/code&gt;：构成集群时，自身的被访问地址，可以为 &lt;code&gt;host:port&lt;/code&gt; 或 &lt;code&gt;interface:port&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cluster-store-opt=&amp;quot;&amp;quot;&lt;/code&gt;：构成集群时，键值数据库的配置选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--config-file=&amp;quot;/etc/docker/daemon.json&amp;quot;&lt;/code&gt;：daemon 配置文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--containerd=&amp;quot;&amp;quot;&lt;/code&gt;：containerd 文件的路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D, --debug=true|false&lt;/code&gt;：是否使用 Debug 模式。缺省为 false；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-gateway=&amp;quot;&amp;quot;&lt;/code&gt;：容器的 IPv4 网关地址，必须在网桥的子网段内；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-gateway-v6=&amp;quot;&amp;quot;&lt;/code&gt;：容器的 IPv6 网关地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-ulimit=[]&lt;/code&gt;：默认的 ulimit 值；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--disable-legacy-registry=true|false&lt;/code&gt;：是否允许访问旧版本的镜像仓库服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dns=&amp;quot;&amp;quot;&lt;/code&gt;：指定容器使用的 DNS 服务器地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dns-opt=&amp;quot;&amp;quot;&lt;/code&gt;：DNS 选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dns-search=[]&lt;/code&gt;：DNS 搜索域；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exec-opt=[]&lt;/code&gt;：运行时的执行选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exec-root=&amp;quot;&amp;quot;&lt;/code&gt;：容器执行状态文件的根路径，默认为 &lt;code&gt;/var/run/docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fixed-cidr=&amp;quot;&amp;quot;&lt;/code&gt;：限定分配 IPv4 地址范围；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fixed-cidr-v6=&amp;quot;&amp;quot;&lt;/code&gt;：限定分配 IPv6 地址范围；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-G, --group=&amp;quot;&amp;quot;&lt;/code&gt;：分配给 unix 套接字的组，默认为 &lt;code&gt;docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g, --graph=&amp;quot;&amp;quot;&lt;/code&gt;：Docker 运行时的根路径，默认为 &lt;code&gt;/var/lib/docker&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H, --host=[]&lt;/code&gt;：指定命令对应 Docker daemon 的监听接口，可以为 unix 套接字 &lt;code&gt;unix:///path/to/socket&lt;/code&gt;，文件句柄 &lt;code&gt;fd://socketfd&lt;/code&gt; 或 tcp 套接字 &lt;code&gt;tcp://[host[:port]]&lt;/code&gt;，默认为 &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--icc=true|false&lt;/code&gt;：是否启用容器间以及跟 daemon 所在主机的通信。默认为 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--insecure-registry=[]&lt;/code&gt;：允许访问给定的非安全仓库服务；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ip=&amp;quot;&amp;quot;&lt;/code&gt;：绑定容器端口时候的默认 IP 地址。缺省为 &lt;code&gt;0.0.0.0&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ip-forward=true|false&lt;/code&gt;：是否检查启动在 Docker 主机上的启用 IP 转发服务，默认开启。注意关闭该选项将不对系统转发能力进行任何检查修改；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ip-masq=true|false&lt;/code&gt;：是否进行地址伪装，用于容器访问外部网络，默认开启；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--iptables=true|false&lt;/code&gt;：是否允许 Docker 添加 iptables 规则。缺省为 true；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ipv6=true|false&lt;/code&gt;：是否启用 IPv6 支持，默认关闭；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l, --log-level=&amp;quot;debug|info|warn|error|fatal&amp;quot;&lt;/code&gt;：指定日志输出级别；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--label=&amp;quot;[]&amp;quot;&lt;/code&gt;：添加指定的键值对标注；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--log-driver=&amp;quot;json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|none&amp;quot;&lt;/code&gt;：指定日志后端驱动，默认为 &lt;code&gt;json-file&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--log-opt=[]&lt;/code&gt;：日志后端的选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mtu=VALUE&lt;/code&gt;：指定容器网络的 &lt;code&gt;mtu&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p=&amp;quot;&amp;quot;&lt;/code&gt;：指定 daemon 的 PID 文件路径。缺省为 &lt;code&gt;/var/run/docker.pid&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--raw-logs&lt;/code&gt;：输出原始，未加色彩的日志信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--registry-mirror=&amp;lt;scheme&amp;gt;://&amp;lt;host&amp;gt;&lt;/code&gt;：指定 &lt;code&gt;docker pull&lt;/code&gt; 时使用的注册服务器镜像地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s, --storage-driver=&amp;quot;&amp;quot;&lt;/code&gt;：指定使用给定的存储后端；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--selinux-enabled=true|false&lt;/code&gt;：是否启用 SELinux 支持。缺省值为 false。SELinux 目前尚不支持 overlay 存储驱动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--storage-opt=[]&lt;/code&gt;：驱动后端选项；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tls=true|false&lt;/code&gt;：是否对 Docker daemon 启用 TLS 安全机制，默认为否；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscacert=/.docker/ca.pem&lt;/code&gt;：TLS CA 签名的可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/cert.pem&lt;/code&gt;：TLS 可信证书文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlscert=/.docker/key.pem&lt;/code&gt;：TLS 密钥文件路径；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tlsverify=true|false&lt;/code&gt;：启用 TLS 校验，默认为否；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--userland-proxy=true|false&lt;/code&gt;：是否使用用户态代理来实现容器间和出容器的回环通信，默认为 true；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--userns-remap=default|uid:gid|user:group|user|uid&lt;/code&gt;：指定容器的用户命名空间，默认是创建新的 UID 和 GID 映射到容器内进程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;客户端命令&#34;&gt;客户端命令&lt;/h2&gt;

&lt;p&gt;可以通过 &lt;code&gt;docker COMMAND --help&lt;/code&gt; 来查看这些命令的具体用法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attach&lt;/code&gt;：依附到一个正在运行的容器中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;：从一个 Dockerfile 创建一个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit&lt;/code&gt;：从一个容器的修改中创建一个新的镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp&lt;/code&gt;：在容器和本地宿主系统之间复制文件中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt;：创建一个新容器，但并不运行它；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff&lt;/code&gt;：检查一个容器内文件系统的修改，包括修改和增加；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt;：从服务端获取实时的事件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt;：在运行的容器内执行命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;：导出容器内容为一个 &lt;code&gt;tar&lt;/code&gt; 包；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;：显示一个镜像的历史信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt;：列出存在的镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;：导入一个文件（典型为 &lt;code&gt;tar&lt;/code&gt; 包）路径或目录来创建一个本地镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;：显示一些相关的系统信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inspect&lt;/code&gt;：显示一个容器的具体配置信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill&lt;/code&gt;：关闭一个运行中的容器 (包括进程和所有相关资源)；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt;：从一个 tar 包中加载一个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;login&lt;/code&gt;：注册或登录到一个 Docker 的仓库服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logout&lt;/code&gt;：从 Docker 的仓库服务器登出；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logs&lt;/code&gt;：获取容器的 log 信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;network&lt;/code&gt;：管理 Docker 的网络，包括查看、创建、删除、挂载、卸载等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node&lt;/code&gt;：管理 swarm 集群中的节点，包括查看、更新、删除、提升/取消管理节点等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pause&lt;/code&gt;：暂停一个容器中的所有进程；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;：查找一个 nat 到一个私有网口的公共口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt;：列出主机上的容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pull&lt;/code&gt;：从一个Docker的仓库服务器下拉一个镜像或仓库；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;：将一个镜像或者仓库推送到一个 Docker 的注册服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rename&lt;/code&gt;：重命名一个容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restart&lt;/code&gt;：重启一个运行中的容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm&lt;/code&gt;：删除给定的若干个容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmi&lt;/code&gt;：删除给定的若干个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;：创建一个新容器，并在其中运行给定命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt;：保存一个镜像为 tar 包文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search&lt;/code&gt;：在 Docker index 中搜索一个镜像；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt;：管理 Docker 所启动的应用服务，包括创建、更新、删除等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt;：启动一个容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stats&lt;/code&gt;：输出（一个或多个）容器的资源使用统计信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop&lt;/code&gt;：终止一个运行中的容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swarm&lt;/code&gt;：管理 Docker swarm 集群，包括创建、加入、退出、更新等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt;：为一个镜像打标签；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt;：查看一个容器中的正在运行的进程信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpause&lt;/code&gt;：将一个容器内所有的进程从暂停状态中恢复；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;：更新指定的若干容器的配置信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;：输出 Docker 的版本信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volume&lt;/code&gt;：管理 Docker volume，包括查看、创建、删除等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt;：阻塞直到一个容器终止，然后输出它的退出符。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一张图总结-docker-的命令&#34;&gt;一张图总结 Docker 的命令&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://bibo19842003.github.io/img/docker/cmd_logic.png&#34; alt=&#34;Docker 命令总结&#34; /&gt;&lt;/p&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>