<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Volume on Hello Bibo</title>
    <link>https://bibo19842003.github.io/tags/volume/</link>
    <description>Recent content in Volume on Hello Bibo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>bibo19842003@163.com (bibo)</managingEditor>
    <webMaster>bibo19842003@163.com (bibo)</webMaster>
    <lastBuildDate>Thu, 28 Mar 2019 14:20:25 +0800</lastBuildDate>
    <atom:link href="https://bibo19842003.github.io/tags/volume/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker data management</title>
      <link>https://bibo19842003.github.io/docker/docker-data-management/</link>
      <pubDate>Thu, 28 Mar 2019 14:20:25 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-data-management/</guid>
      <description>

&lt;h1 id=&#34;docker-数据管理&#34;&gt;Docker 数据管理&lt;/h1&gt;

&lt;p&gt;在容器中管理数据主要有两种方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据卷（Volumes）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;挂载主机目录 (Bind mounts)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;数据卷&#34;&gt;数据卷&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 可以在容器之间共享和重用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对 &lt;code&gt;数据卷&lt;/code&gt; 的修改会立马生效&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对 &lt;code&gt;数据卷&lt;/code&gt; 的更新，不会影响镜像&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 默认会一直存在，即使容器被删除&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意：&lt;code&gt;数据卷&lt;/code&gt; 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 &lt;code&gt;数据卷&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;创建一个数据卷&#34;&gt;创建一个数据卷&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume create my-vol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看所有的 &lt;code&gt;数据卷&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume ls

local               my-vol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在主机里使用以下命令可以查看指定 &lt;code&gt;数据卷&lt;/code&gt; 的信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume inspect my-vol
[
    {
        &amp;quot;Driver&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Labels&amp;quot;: {},
        &amp;quot;Mountpoint&amp;quot;: &amp;quot;/var/lib/docker/volumes/my-vol/_data&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;my-vol&amp;quot;,
        &amp;quot;Options&amp;quot;: {},
        &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;启动一个挂载数据卷的容器&#34;&gt;启动一个挂载数据卷的容器&lt;/h3&gt;

&lt;p&gt;在用 &lt;code&gt;docker run&lt;/code&gt; 命令的时候，使用 &lt;code&gt;--mount&lt;/code&gt; 标记来将 &lt;code&gt;数据卷&lt;/code&gt; 挂载到容器里。在一次 &lt;code&gt;docker run&lt;/code&gt; 中可以挂载多个 &lt;code&gt;数据卷&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面创建一个名为 &lt;code&gt;web&lt;/code&gt; 的容器，并加载一个 &lt;code&gt;数据卷&lt;/code&gt; 到容器的 &lt;code&gt;/webapp&lt;/code&gt; 目录。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -P \
    --name web \
    # -v my-vol:/wepapp \
    --mount source=my-vol,target=/webapp \
    training/webapp \
    python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看数据卷的具体信息&#34;&gt;查看数据卷的具体信息&lt;/h3&gt;

&lt;p&gt;在主机里使用以下命令可以查看 &lt;code&gt;web&lt;/code&gt; 容器的信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 信息在 &amp;laquo;Mounts&amp;raquo; Key 下面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Mounts&amp;quot;: [
    {
        &amp;quot;Type&amp;quot;: &amp;quot;volume&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;my-vol&amp;quot;,
        &amp;quot;Source&amp;quot;: &amp;quot;/var/lib/docker/volumes/my-vol/_data&amp;quot;,
        &amp;quot;Destination&amp;quot;: &amp;quot;/app&amp;quot;,
        &amp;quot;Driver&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Mode&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;RW&amp;quot;: true,
        &amp;quot;Propagation&amp;quot;: &amp;quot;&amp;quot;
    }
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;删除数据卷&#34;&gt;删除数据卷&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume rm my-vol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;数据卷&lt;/code&gt; 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 &lt;code&gt;数据卷&lt;/code&gt;，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 &lt;code&gt;数据卷&lt;/code&gt;。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 &lt;code&gt;docker rm -v&lt;/code&gt; 这个命令。&lt;/p&gt;

&lt;p&gt;无主的数据卷可能会占据很多空间，要清理请使用以下命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker volume prune
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;挂载主机目录&#34;&gt;挂载主机目录&lt;/h2&gt;

&lt;h3 id=&#34;挂载一个主机目录作为数据卷&#34;&gt;挂载一个主机目录作为数据卷&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;--mount&lt;/code&gt; 标记可以指定挂载一个本地主机的目录到容器中去。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -P \
    --name web \
    # -v /src/webapp:/opt/webapp \
    --mount type=bind,source=/src/webapp,target=/opt/webapp \
    training/webapp \
    python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的命令加载主机的 &lt;code&gt;/src/webapp&lt;/code&gt; 目录到容器的 &lt;code&gt;/opt/webapp&lt;/code&gt;目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，以前使用 &lt;code&gt;-v&lt;/code&gt; 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，现在使用 &lt;code&gt;--mount&lt;/code&gt; 参数时如果本地目录不存在，Docker 会报错。&lt;/p&gt;

&lt;p&gt;Docker 挂载主机目录的默认权限是 &lt;code&gt;读写&lt;/code&gt;，用户也可以通过增加 &lt;code&gt;readonly&lt;/code&gt; 指定为 &lt;code&gt;只读&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -P \
    --name web \
    # -v /src/webapp:/opt/webapp:ro \
    --mount type=bind,source=/src/webapp,target=/opt/webapp,readonly \
    training/webapp \
    python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加了 &lt;code&gt;readonly&lt;/code&gt; 之后，就挂载为 &lt;code&gt;只读&lt;/code&gt; 了。如果你在容器内 &lt;code&gt;/opt/webapp&lt;/code&gt; 目录新建文件，会显示如下错误&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/webapp # touch new.txt
touch: new.txt: Read-only file system
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看数据卷的具体信息-1&#34;&gt;查看数据卷的具体信息&lt;/h3&gt;

&lt;p&gt;在主机里使用以下命令可以查看 &lt;code&gt;web&lt;/code&gt; 容器的信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;挂载主机目录&lt;/code&gt; 的配置信息在 &amp;laquo;Mounts&amp;raquo; Key 下面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Mounts&amp;quot;: [
    {
        &amp;quot;Type&amp;quot;: &amp;quot;bind&amp;quot;,
        &amp;quot;Source&amp;quot;: &amp;quot;/src/webapp&amp;quot;,
        &amp;quot;Destination&amp;quot;: &amp;quot;/opt/webapp&amp;quot;,
        &amp;quot;Mode&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;RW&amp;quot;: true,
        &amp;quot;Propagation&amp;quot;: &amp;quot;rprivate&amp;quot;
    }
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;挂载一个本地主机文件作为数据卷&#34;&gt;挂载一个本地主机文件作为数据卷&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--mount&lt;/code&gt; 标记也可以从主机挂载单个文件到容器中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it \
   # -v $HOME/.bash_history:/root/.bash_history \
   --mount type=bind,source=$HOME/.bash_history,target=/root/.bash_history \
   ubuntu:18.04 \
   bash

root@2affd44b4667:/# history
1  ls
2  diskutil list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以记录在容器输入过的命令了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>