<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockerfile on Hello Bibo</title>
    <link>https://bibo19842003.github.io/tags/dockerfile/</link>
    <description>Recent content in Dockerfile on Hello Bibo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>bibo19842003@163.com (bibo)</managingEditor>
    <webMaster>bibo19842003@163.com (bibo)</webMaster>
    <lastBuildDate>Thu, 28 Mar 2019 15:04:14 +0800</lastBuildDate>
    <atom:link href="https://bibo19842003.github.io/tags/dockerfile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>dockerfile_best practices</title>
      <link>https://bibo19842003.github.io/docker/dockerfile_best-practices/</link>
      <pubDate>Thu, 28 Mar 2019 15:04:14 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/dockerfile_best-practices/</guid>
      <description>

&lt;h1 id=&#34;dockerfile-最佳实践&#34;&gt;Dockerfile 最佳实践&lt;/h1&gt;

&lt;p&gt;本附录是笔者对 Docker 官方文档中 &lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34;&gt;Best practices for writing Dockerfiles&lt;/a&gt; 的理解与翻译。&lt;/p&gt;

&lt;h2 id=&#34;一般性的指南和建议&#34;&gt;一般性的指南和建议&lt;/h2&gt;

&lt;h3 id=&#34;容器应该是短暂的&#34;&gt;容器应该是短暂的&lt;/h3&gt;

&lt;p&gt;通过 &lt;code&gt;Dockerfile&lt;/code&gt; 构建的镜像所启动的容器应该尽可能短暂（生命周期短）。「短暂」意味着可以停止和销毁容器，并且创建一个新容器并部署好所需的设置和配置工作量应该是极小的。&lt;/p&gt;

&lt;h3 id=&#34;使用-dockerignore-文件&#34;&gt;使用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;Dockerfile&lt;/code&gt; 构建镜像时最好是将 &lt;code&gt;Dockerfile&lt;/code&gt; 放置在一个新建的空目录下。然后将构建镜像所需要的文件添加到该目录中。为了提高构建镜像的效率，你可以在目录下新建一个 &lt;code&gt;.dockerignore&lt;/code&gt; 文件来指定要忽略的文件和目录。&lt;code&gt;.dockerignore&lt;/code&gt; 文件的排除模式语法和 Git 的 &lt;code&gt;.gitignore&lt;/code&gt; 文件相似。&lt;/p&gt;

&lt;h3 id=&#34;使用多阶段构建&#34;&gt;使用多阶段构建&lt;/h3&gt;

&lt;p&gt;在 &lt;code&gt;Docker 17.05&lt;/code&gt; 以上版本中，你可以使用 &lt;a href=&#34;../image/multistage-builds.md&#34;&gt;多阶段构建&lt;/a&gt; 来减少所构建镜像的大小。&lt;/p&gt;

&lt;h3 id=&#34;避免安装不必要的包&#34;&gt;避免安装不必要的包&lt;/h3&gt;

&lt;p&gt;为了降低复杂性、减少依赖、减小文件大小、节约构建时间，你应该避免安装任何不必要的包。例如，不要在数据库镜像中包含一个文本编辑器。&lt;/p&gt;

&lt;h3 id=&#34;一个容器只运行一个进程&#34;&gt;一个容器只运行一个进程&lt;/h3&gt;

&lt;p&gt;应该保证在一个容器中只运行一个进程。将多个应用解耦到不同容器中，保证了容器的横向扩展和复用。例如 web 应用应该包含三个容器：web应用、数据库、缓存。&lt;/p&gt;

&lt;p&gt;如果容器互相依赖，你可以使用 &lt;a href=&#34;../network/linking.md&#34;&gt;Docker 自定义网络&lt;/a&gt; 来把这些容器连接起来。&lt;/p&gt;

&lt;h3 id=&#34;镜像层数尽可能少&#34;&gt;镜像层数尽可能少&lt;/h3&gt;

&lt;p&gt;你需要在 &lt;code&gt;Dockerfile&lt;/code&gt; 可读性（也包括长期的可维护性）和减少层数之间做一个平衡。&lt;/p&gt;

&lt;h3 id=&#34;将多行参数排序&#34;&gt;将多行参数排序&lt;/h3&gt;

&lt;p&gt;将多行参数按字母顺序排序（比如要安装多个包时）。这可以帮助你避免重复包含同一个包，更新包列表时也更容易。也便于 &lt;code&gt;PRs&lt;/code&gt; 阅读和审查。建议在反斜杠符号 &lt;code&gt;\&lt;/code&gt; 之前添加一个空格，以增加可读性。&lt;/p&gt;

&lt;p&gt;下面是来自 &lt;code&gt;buildpack-deps&lt;/code&gt; 镜像的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
  bzr \
  cvs \
  git \
  mercurial \
  subversion
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;构建缓存&#34;&gt;构建缓存&lt;/h3&gt;

&lt;p&gt;在镜像的构建过程中，Docker 会遍历 &lt;code&gt;Dockerfile&lt;/code&gt; 文件中的指令，然后按顺序执行。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。如果你不想在构建过程中使用缓存，你可以在 &lt;code&gt;docker build&lt;/code&gt; 命令中使用 &lt;code&gt;--no-cache=true&lt;/code&gt; 选项。&lt;/p&gt;

&lt;p&gt;但是，如果你想在构建的过程中使用缓存，你得明白什么时候会，什么时候不会找到匹配的镜像，遵循的基本规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从一个基础镜像开始（&lt;code&gt;FROM&lt;/code&gt; 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。&lt;/li&gt;
&lt;li&gt;在大多数情况下，只需要简单地对比 &lt;code&gt;Dockerfile&lt;/code&gt; 中的指令和子镜像。然而，有些指令需要更多的检查和解释。&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。&lt;/li&gt;
&lt;li&gt;除了 &lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 &lt;code&gt;RUN apt-get -y update&lt;/code&gt; 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一旦缓存失效，所有后续的 &lt;code&gt;Dockerfile&lt;/code&gt; 指令都将产生新的镜像，缓存不会被使用。&lt;/p&gt;

&lt;h2 id=&#34;dockerfile-指令&#34;&gt;Dockerfile 指令&lt;/h2&gt;

&lt;p&gt;下面针对 &lt;code&gt;Dockerfile&lt;/code&gt; 中各种指令的最佳编写方式给出建议。&lt;/p&gt;

&lt;h3 id=&#34;from&#34;&gt;FROM&lt;/h3&gt;

&lt;p&gt;尽可能使用当前官方仓库作为你构建镜像的基础。推荐使用 &lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;Alpine&lt;/a&gt; 镜像，因为它被严格控制并保持最小尺寸（目前小于 5 MB），但它仍然是一个完整的发行版。&lt;/p&gt;

&lt;h3 id=&#34;label&#34;&gt;LABEL&lt;/h3&gt;

&lt;p&gt;你可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等。每个标签一行，由 &lt;code&gt;LABEL&lt;/code&gt; 开头加上一个或多个标签对。下面的示例展示了各种不同的可能格式。&lt;code&gt;#&lt;/code&gt; 开头的行是注释内容。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：如果你的字符串中包含空格，必须将字符串放入引号中或者对空格使用转义。如果字符串内容本身就包含引号，必须对引号使用转义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Set one or more individual labels
LABEL com.example.version=&amp;quot;0.0.1-beta&amp;quot;

LABEL vendor=&amp;quot;ACME Incorporated&amp;quot;

LABEL com.example.release-date=&amp;quot;2015-02-12&amp;quot;

LABEL com.example.version.is-production=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个镜像可以包含多个标签，但建议将多个标签放入到一个 &lt;code&gt;LABEL&lt;/code&gt; 指令中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Set multiple labels at once, using line-continuation characters to break long lines
LABEL vendor=ACME\ Incorporated \
      com.example.is-beta= \
      com.example.is-production=&amp;quot;&amp;quot; \
      com.example.version=&amp;quot;0.0.1-beta&amp;quot; \
      com.example.release-date=&amp;quot;2015-02-12&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于标签可以接受的键值对，参考 &lt;a href=&#34;https://docs.docker.com/config/labels-custom-metadata/&#34;&gt;Understanding object labels&lt;/a&gt;。关于查询标签信息，参考 &lt;a href=&#34;https://docs.docker.com/config/labels-custom-metadata/&#34;&gt;Managing labels on objects&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;run&#34;&gt;RUN&lt;/h3&gt;

&lt;p&gt;为了保持 &lt;code&gt;Dockerfile&lt;/code&gt; 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 &lt;code&gt;RUN&lt;/code&gt; 指令用反斜杠 &lt;code&gt;\&lt;/code&gt; 分割成多行。&lt;/p&gt;

&lt;h4 id=&#34;apt-get&#34;&gt;apt-get&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令最常见的用法是安装包用的 &lt;code&gt;apt-get&lt;/code&gt;。因为 &lt;code&gt;RUN apt-get&lt;/code&gt; 指令会安装包，所以有几个问题需要注意。&lt;/p&gt;

&lt;p&gt;不要使用 &lt;code&gt;RUN apt-get upgrade&lt;/code&gt; 或 &lt;code&gt;dist-upgrade&lt;/code&gt;，因为许多基础镜像中的「必须」包不会在一个非特权容器中升级。如果基础镜像中的某个包过时了，你应该联系它的维护者。如果你确定某个特定的包，比如 &lt;code&gt;foo&lt;/code&gt;，需要升级，使用 &lt;code&gt;apt-get install -y foo&lt;/code&gt; 就行，该指令会自动升级 &lt;code&gt;foo&lt;/code&gt; 包。&lt;/p&gt;

&lt;p&gt;永远将 &lt;code&gt;RUN apt-get update&lt;/code&gt; 和 &lt;code&gt;apt-get install&lt;/code&gt; 组合成一条 &lt;code&gt;RUN&lt;/code&gt; 声明，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
        package-bar \
        package-baz \
        package-foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;apt-get update&lt;/code&gt; 放在一条单独的 &lt;code&gt;RUN&lt;/code&gt; 声明中会导致缓存问题以及后续的 &lt;code&gt;apt-get install&lt;/code&gt; 失败。比如，假设你有一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM ubuntu:18.04

RUN apt-get update

RUN apt-get install -y curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建镜像后，所有的层都在 Docker 的缓存中。假设你后来又修改了其中的 &lt;code&gt;apt-get install&lt;/code&gt; 添加了一个包：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM ubuntu:18.04

RUN apt-get update

RUN apt-get install -y curl nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker 发现修改后的 &lt;code&gt;RUN apt-get update&lt;/code&gt; 指令和之前的完全一样。所以，&lt;code&gt;apt-get update&lt;/code&gt; 不会执行，而是使用之前的缓存镜像。因为 &lt;code&gt;apt-get update&lt;/code&gt; 没有运行，后面的 &lt;code&gt;apt-get install&lt;/code&gt; 可能安装的是过时的 &lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;nginx&lt;/code&gt; 版本。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y&lt;/code&gt; 可以确保你的 Dockerfiles 每次安装的都是包的最新的版本，而且这个过程不需要进一步的编码或额外干预。这项技术叫作 &lt;code&gt;cache busting&lt;/code&gt;。你也可以显示指定一个包的版本号来达到 &lt;code&gt;cache-busting&lt;/code&gt;，这就是所谓的固定版本，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    package-bar \
    package-baz \
    package-foo=1.3.*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;固定版本会迫使构建过程检索特定的版本，而不管缓存中有什么。这项技术也可以减少因所需包中未预料到的变化而导致的失败。&lt;/p&gt;

&lt;p&gt;下面是一个 &lt;code&gt;RUN&lt;/code&gt; 指令的示例模板，展示了所有关于 &lt;code&gt;apt-get&lt;/code&gt; 的建议。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    aufs-tools \
    automake \
    build-essential \
    curl \
    dpkg-sig \
    libcap-dev \
    libsqlite3-dev \
    mercurial \
    reprepro \
    ruby1.9.1 \
    ruby1.9.1-dev \
    s3cmd=1.1.* \
 &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;s3cmd&lt;/code&gt; 指令指定了一个版本号 &lt;code&gt;1.1.*&lt;/code&gt;。如果之前的镜像使用的是更旧的版本，指定新的版本会导致 &lt;code&gt;apt-get udpate&lt;/code&gt; 缓存失效并确保安装的是新版本。&lt;/p&gt;

&lt;p&gt;另外，清理掉 apt 缓存 &lt;code&gt;var/lib/apt/lists&lt;/code&gt; 可以减小镜像大小。因为 &lt;code&gt;RUN&lt;/code&gt; 指令的开头为 &lt;code&gt;apt-get udpate&lt;/code&gt;，包缓存总是会在 &lt;code&gt;apt-get install&lt;/code&gt; 之前刷新。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：官方的 Debian 和 Ubuntu 镜像会自动运行 apt-get clean，所以不需要显式的调用 apt-get clean。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;cmd&#34;&gt;CMD&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 指令用于执行目标镜像中包含的软件，可以包含参数。&lt;code&gt;CMD&lt;/code&gt; 大多数情况下都应该以 &lt;code&gt;CMD [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;...]&lt;/code&gt; 的形式使用。因此，如果创建镜像的目的是为了部署某个服务(比如 &lt;code&gt;Apache&lt;/code&gt;)，你可能会执行类似于 &lt;code&gt;CMD [&amp;quot;apache2&amp;quot;, &amp;quot;-DFOREGROUND&amp;quot;]&lt;/code&gt; 形式的命令。我们建议任何服务镜像都使用这种形式的命令。&lt;/p&gt;

&lt;p&gt;多数情况下，&lt;code&gt;CMD&lt;/code&gt; 都需要一个交互式的 &lt;code&gt;shell&lt;/code&gt; (bash, Python, perl 等)，例如 &lt;code&gt;CMD [&amp;quot;perl&amp;quot;, &amp;quot;-de0&amp;quot;]&lt;/code&gt;，或者 &lt;code&gt;CMD [&amp;quot;PHP&amp;quot;, &amp;quot;-a&amp;quot;]&lt;/code&gt;。使用这种形式意味着，当你执行类似 &lt;code&gt;docker run -it python&lt;/code&gt; 时，你会进入一个准备好的 &lt;code&gt;shell&lt;/code&gt; 中。&lt;code&gt;CMD&lt;/code&gt; 应该在极少的情况下才能以 &lt;code&gt;CMD [&amp;quot;param&amp;quot;, &amp;quot;param&amp;quot;]&lt;/code&gt; 的形式与 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 协同使用，除非你和你的镜像使用者都对 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 的工作方式十分熟悉。&lt;/p&gt;

&lt;h3 id=&#34;expose&#34;&gt;EXPOSE&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 指令用于指定容器将要监听的端口。因此，你应该为你的应用程序使用常见的端口。例如，提供 &lt;code&gt;Apache&lt;/code&gt; web 服务的镜像应该使用 &lt;code&gt;EXPOSE 80&lt;/code&gt;，而提供 &lt;code&gt;MongoDB&lt;/code&gt; 服务的镜像使用 &lt;code&gt;EXPOSE 27017&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对于外部访问，用户可以在执行 &lt;code&gt;docker run&lt;/code&gt; 时使用一个标志来指示如何将指定的端口映射到所选择的端口。&lt;/p&gt;

&lt;h3 id=&#34;env&#34;&gt;ENV&lt;/h3&gt;

&lt;p&gt;为了方便新程序运行，你可以使用 &lt;code&gt;ENV&lt;/code&gt; 来为容器中安装的程序更新 &lt;code&gt;PATH&lt;/code&gt; 环境变量。例如使用 &lt;code&gt;ENV PATH /usr/local/nginx/bin:$PATH&lt;/code&gt; 来确保 &lt;code&gt;CMD [&amp;quot;nginx&amp;quot;]&lt;/code&gt; 能正确运行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt; 指令也可用于为你想要容器化的服务提供必要的环境变量，比如 Postgres 需要的 &lt;code&gt;PGDATA&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后，&lt;code&gt;ENV&lt;/code&gt; 也能用于设置常见的版本号，比如下面的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;ENV PG_MAJOR 9.3

ENV PG_VERSION 9.3.4

RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress &amp;amp;&amp;amp; …

ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似于程序中的常量，这种方法可以让你只需改变 &lt;code&gt;ENV&lt;/code&gt; 指令来自动的改变容器中的软件版本。&lt;/p&gt;

&lt;h3 id=&#34;add-和-copy&#34;&gt;ADD 和 COPY&lt;/h3&gt;

&lt;p&gt;虽然 &lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 功能类似，但一般优先使用 &lt;code&gt;COPY&lt;/code&gt;。因为它比 &lt;code&gt;ADD&lt;/code&gt; 更透明。&lt;code&gt;COPY&lt;/code&gt; 只支持简单将本地文件拷贝到容器中，而 &lt;code&gt;ADD&lt;/code&gt; 有一些并不明显的功能（比如本地 tar 提取和远程 URL 支持）。因此，&lt;code&gt;ADD&lt;/code&gt; 的最佳用例是将本地 tar 文件自动提取到镜像中，例如 &lt;code&gt;ADD rootfs.tar.xz&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果你的 &lt;code&gt;Dockerfile&lt;/code&gt; 有多个步骤需要使用上下文中不同的文件。单独 &lt;code&gt;COPY&lt;/code&gt; 每个文件，而不是一次性的 &lt;code&gt;COPY&lt;/code&gt; 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;COPY requirements.txt /tmp/

RUN pip install --requirement /tmp/requirements.txt

COPY . /tmp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果将 &lt;code&gt;COPY . /tmp/&lt;/code&gt; 放置在 &lt;code&gt;RUN&lt;/code&gt; 指令之前，只要 &lt;code&gt;.&lt;/code&gt; 目录中任何一个文件变化，都会导致后续指令的缓存失效。&lt;/p&gt;

&lt;p&gt;为了让镜像尽量小，最好不要使用 &lt;code&gt;ADD&lt;/code&gt; 指令从远程 URL 获取包，而是使用 &lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;wget&lt;/code&gt;。这样你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层。比如尽量避免下面的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;ADD http://example.com/big.tar.xz /usr/src/things/

RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things

RUN make -C /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而是应该使用下面这种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;RUN mkdir -p /usr/src/things \
    &amp;amp;&amp;amp; curl -SL http://example.com/big.tar.xz \
    | tar -xJC /usr/src/things \
    &amp;amp;&amp;amp; make -C /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面使用的管道操作，所以没有中间文件需要删除。&lt;/p&gt;

&lt;p&gt;对于其他不需要 &lt;code&gt;ADD&lt;/code&gt; 的自动提取功能的文件或目录，你应该使用 &lt;code&gt;COPY&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;entrypoint&#34;&gt;ENTRYPOINT&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的最佳用处是设置镜像的主命令，允许将镜像当成命令本身来运行（用 &lt;code&gt;CMD&lt;/code&gt; 提供默认选项）。&lt;/p&gt;

&lt;p&gt;例如，下面的示例镜像提供了命令行工具 &lt;code&gt;s3cmd&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;ENTRYPOINT [&amp;quot;s3cmd&amp;quot;]

CMD [&amp;quot;--help&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在直接运行该镜像创建的容器会显示命令帮助：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run s3cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者提供正确的参数来执行某个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run s3cmd ls s3://mybucket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样镜像名可以当成命令行的参考。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令也可以结合一个辅助脚本使用，和前面命令行风格类似，即使启动工具需要不止一个步骤。&lt;/p&gt;

&lt;p&gt;例如，&lt;code&gt;Postgres&lt;/code&gt; 官方镜像使用下面的脚本作为 &lt;code&gt;ENTRYPOINT&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
set -e

if [ &amp;quot;$1&amp;quot; = &#39;postgres&#39; ]; then
    chown -R postgres &amp;quot;$PGDATA&amp;quot;

    if [ -z &amp;quot;$(ls -A &amp;quot;$PGDATA&amp;quot;)&amp;quot; ]; then
        gosu postgres initdb
    fi

    exec gosu postgres &amp;quot;$@&amp;quot;
fi

exec &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：该脚本使用了 Bash 的内置命令 exec，所以最后运行的进程就是容器的 PID 为 1 的进程。这样，进程就可以接收到任何发送给容器的 Unix 信号了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;该辅助脚本被拷贝到容器，并在容器启动时通过 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;COPY ./docker-entrypoint.sh /

ENTRYPOINT [&amp;quot;/docker-entrypoint.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该脚本可以让用户用几种不同的方式和 &lt;code&gt;Postgres&lt;/code&gt; 交互。&lt;/p&gt;

&lt;p&gt;你可以很简单地启动 &lt;code&gt;Postgres&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以执行 &lt;code&gt;Postgres&lt;/code&gt; 并传递参数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run postgres postgres --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，你还可以启动另外一个完全不同的工具，比如 &lt;code&gt;Bash&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it postgres bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;volume&#34;&gt;VOLUME&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;VOLUME&lt;/code&gt; 指令用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录。强烈建议使用 &lt;code&gt;VOLUME&lt;/code&gt; 来管理镜像中的可变部分和用户可以改变的部分。&lt;/p&gt;

&lt;h3 id=&#34;user&#34;&gt;USER&lt;/h3&gt;

&lt;p&gt;如果某个服务不需要特权执行，建议使用 &lt;code&gt;USER&lt;/code&gt; 指令切换到非 root 用户。先在 &lt;code&gt;Dockerfile&lt;/code&gt; 中使用类似 &lt;code&gt;RUN groupadd -r postgres &amp;amp;&amp;amp; useradd -r -g postgres postgres&lt;/code&gt; 的指令创建用户和用户组。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：在镜像中，用户和用户组每次被分配的 UID/GID 都是不确定的，下次重新构建镜像时被分配到的 UID/GID 可能会不一样。如果要依赖确定的 UID/GID，你应该显示的指定一个 UID/GID。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你应该避免使用 &lt;code&gt;sudo&lt;/code&gt;，因为它不可预期的 TTY 和信号转发行为可能造成的问题比它能解决的问题还多。如果你真的需要和 &lt;code&gt;sudo&lt;/code&gt; 类似的功能（例如，以 root 权限初始化某个守护进程，以非 root 权限执行它），你可以使用 &lt;a href=&#34;https://github.com/tianon/gosu&#34;&gt;gosu&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最后，为了减少层数和复杂度，避免频繁地使用 &lt;code&gt;USER&lt;/code&gt; 来回切换用户。&lt;/p&gt;

&lt;h3 id=&#34;workdir&#34;&gt;WORKDIR&lt;/h3&gt;

&lt;p&gt;为了清晰性和可靠性，你应该总是在 &lt;code&gt;WORKDIR&lt;/code&gt; 中使用绝对路径。另外，你应该使用 &lt;code&gt;WORKDIR&lt;/code&gt; 来替代类似于 &lt;code&gt;RUN cd ... &amp;amp;&amp;amp; do-something&lt;/code&gt; 的指令，后者难以阅读、排错和维护。&lt;/p&gt;

&lt;h2 id=&#34;官方镜像示例&#34;&gt;官方镜像示例&lt;/h2&gt;

&lt;p&gt;这些官方镜像的 Dockerfile 都是参考典范：&lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;https://github.com/docker-library/docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dockerfile</title>
      <link>https://bibo19842003.github.io/docker/dockerfile/</link>
      <pubDate>Thu, 28 Mar 2019 09:02:21 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/dockerfile/</guid>
      <description>

&lt;h2 id=&#34;使用-dockerfile-定制镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;使用 Dockerfile 定制镜像&lt;/h2&gt;

&lt;p&gt;从刚才的 &lt;code&gt;docker commit&lt;/code&gt; 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。&lt;/p&gt;

&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的 &lt;strong&gt;指令(Instruction)&lt;/strong&gt;，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。&lt;/p&gt;

&lt;p&gt;还以之前定制 &lt;code&gt;nginx&lt;/code&gt; 镜像为例，这次我们使用 Dockerfile 来定制。&lt;/p&gt;

&lt;p&gt;在一个空白目录中，建立一个文本文件，并命名为 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir mynginx
$ cd mynginx
$ touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM nginx
RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，&lt;code&gt;FROM&lt;/code&gt; 和 &lt;code&gt;RUN&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;from-指定基础镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;FROM 指定基础镜像&lt;/h3&gt;

&lt;p&gt;所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 &lt;code&gt;nginx&lt;/code&gt; 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 &lt;code&gt;FROM&lt;/code&gt; 就是指定 &lt;strong&gt;基础镜像&lt;/strong&gt;，因此一个 &lt;code&gt;Dockerfile&lt;/code&gt; 中 &lt;code&gt;FROM&lt;/code&gt; 是必备的指令，并且必须是第一条指令。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&#34;https://hub.docker.com/search?q=&amp;amp;type=image&amp;amp;image_filter=official&#34;&gt;Docker Hub&lt;/a&gt; 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/redis/&#34;&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/mongo/&#34;&gt;&lt;code&gt;mongo&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/mysql/&#34;&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/httpd/&#34;&gt;&lt;code&gt;httpd&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/php/&#34;&gt;&lt;code&gt;php&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/tomcat/&#34;&gt;&lt;code&gt;tomcat&lt;/code&gt;&lt;/a&gt; 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 &lt;a href=&#34;https://hub.docker.com/_/node&#34;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/openjdk/&#34;&gt;&lt;code&gt;openjdk&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/python/&#34;&gt;&lt;code&gt;python&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/ruby/&#34;&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/golang/&#34;&gt;&lt;code&gt;golang&lt;/code&gt;&lt;/a&gt; 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。&lt;/p&gt;

&lt;p&gt;如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 &lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34;&gt;&lt;code&gt;ubuntu&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/debian/&#34;&gt;&lt;code&gt;debian&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/centos/&#34;&gt;&lt;code&gt;centos&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/fedora/&#34;&gt;&lt;code&gt;fedora&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;&lt;code&gt;alpine&lt;/code&gt;&lt;/a&gt; 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。&lt;/p&gt;

&lt;p&gt;除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 &lt;code&gt;scratch&lt;/code&gt;。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM scratch
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你以 &lt;code&gt;scratch&lt;/code&gt; 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。&lt;/p&gt;

&lt;p&gt;不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 &lt;a href=&#34;https://hub.docker.com/_/swarm/&#34;&gt;&lt;code&gt;swarm&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://quay.io/repository/coreos/etcd&#34;&gt;&lt;code&gt;coreos/etcd&lt;/code&gt;&lt;/a&gt;。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 &lt;code&gt;FROM scratch&lt;/code&gt; 会让镜像体积更加小巧。使用 &lt;a href=&#34;https://golang.org/&#34;&gt;Go 语言&lt;/a&gt; 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。&lt;/p&gt;

&lt;h3 id=&#34;run-执行命令:13a98cce61a7c185eb25fd01e8410188&#34;&gt;RUN 执行命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令是用来执行命令行命令的。由于命令行的强大能力，&lt;code&gt;RUN&lt;/code&gt; 指令在定制镜像时是最常用的指令之一。其格式有两种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;shell&lt;/em&gt; 格式：&lt;code&gt;RUN &amp;lt;命令&amp;gt;&lt;/code&gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 &lt;code&gt;RUN&lt;/code&gt; 指令就是这种格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;exec&lt;/em&gt; 格式：&lt;code&gt;RUN [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;]&lt;/code&gt;，这更像是函数调用中的格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既然 &lt;code&gt;RUN&lt;/code&gt; 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:stretch

RUN apt-get update
RUN apt-get install -y gcc libc6-dev make wget
RUN wget -O redis.tar.gz &amp;quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&amp;quot;
RUN mkdir -p /usr/src/redis
RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
RUN make -C /usr/src/redis
RUN make -C /usr/src/redis install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前说过，Dockerfile 中每一个指令都会建立一层，&lt;code&gt;RUN&lt;/code&gt; 也不例外。每一个 &lt;code&gt;RUN&lt;/code&gt; 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，&lt;code&gt;commit&lt;/code&gt; 这一层的修改，构成新的镜像。&lt;/p&gt;

&lt;p&gt;而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。
这是很多初学 Docker 的人常犯的一个错误。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;上面的 &lt;code&gt;Dockerfile&lt;/code&gt; 正确的写法应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:stretch

RUN buildDeps=&#39;gcc libc6-dev make wget&#39; \
    &amp;amp;&amp;amp; apt-get update \
    &amp;amp;&amp;amp; apt-get install -y $buildDeps \
    &amp;amp;&amp;amp; wget -O redis.tar.gz &amp;quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&amp;quot; \
    &amp;amp;&amp;amp; mkdir -p /usr/src/redis \
    &amp;amp;&amp;amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
    &amp;amp;&amp;amp; make -C /usr/src/redis \
    &amp;amp;&amp;amp; make -C /usr/src/redis install \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \
    &amp;amp;&amp;amp; rm redis.tar.gz \
    &amp;amp;&amp;amp; rm -r /usr/src/redis \
    &amp;amp;&amp;amp; apt-get purge -y --auto-remove $buildDeps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 &lt;code&gt;RUN&lt;/code&gt; 对一一对应不同的命令，而是仅仅使用一个 &lt;code&gt;RUN&lt;/code&gt; 指令，并使用 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。&lt;/p&gt;

&lt;p&gt;并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 &lt;code&gt;\&lt;/code&gt; 的命令换行方式，以及行首 &lt;code&gt;#&lt;/code&gt; 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。&lt;/p&gt;

&lt;p&gt;此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 &lt;code&gt;apt&lt;/code&gt; 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。&lt;/p&gt;

&lt;p&gt;很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。&lt;/p&gt;

&lt;h3 id=&#34;构建镜像:13a98cce61a7c185eb25fd01e8410188&#34;&gt;构建镜像&lt;/h3&gt;

&lt;p&gt;好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;Dockerfile&lt;/code&gt; 文件所在目录执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM nginx
 ---&amp;gt; e43d811ce2f4
Step 2 : RUN echo &#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&#39; &amp;gt; /usr/share/nginx/html/index.html
 ---&amp;gt; Running in 9cdc27646c7b
 ---&amp;gt; 44aa4490ce2c
Removing intermediate container 9cdc27646c7b
Successfully built 44aa4490ce2c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 &lt;code&gt;Step 2&lt;/code&gt; 中，如同我们之前所说的那样，&lt;code&gt;RUN&lt;/code&gt; 指令启动了一个容器 &lt;code&gt;9cdc27646c7b&lt;/code&gt;，执行了所要求的命令，并最后提交了这一层 &lt;code&gt;44aa4490ce2c&lt;/code&gt;，随后删除了所用到的这个容器 &lt;code&gt;9cdc27646c7b&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这里我们使用了 &lt;code&gt;docker build&lt;/code&gt; 命令进行镜像构建。其格式为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build [选项] &amp;lt;上下文路径/URL/-&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里我们指定了最终镜像的名称 &lt;code&gt;-t nginx:v3&lt;/code&gt;，构建成功后，我们可以像之前运行 &lt;code&gt;nginx:v2&lt;/code&gt; 那样来运行这个镜像，其结果会和 &lt;code&gt;nginx:v2&lt;/code&gt; 一样。&lt;/p&gt;

&lt;h3 id=&#34;镜像构建上下文-context:13a98cce61a7c185eb25fd01e8410188&#34;&gt;镜像构建上下文（Context）&lt;/h3&gt;

&lt;p&gt;如果注意，会看到 &lt;code&gt;docker build&lt;/code&gt; 命令最后有一个 &lt;code&gt;.&lt;/code&gt;。&lt;code&gt;.&lt;/code&gt; 表示当前目录，而 &lt;code&gt;Dockerfile&lt;/code&gt; 就在当前目录，因此不少初学者以为这个路径是在指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 &lt;strong&gt;上下文路径&lt;/strong&gt;。那么什么是上下文呢？&lt;/p&gt;

&lt;p&gt;首先我们要理解 &lt;code&gt;docker build&lt;/code&gt; 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 &lt;a href=&#34;https://docs.docker.com/develop/sdk/&#34;&gt;Docker Remote API&lt;/a&gt;，而如 &lt;code&gt;docker&lt;/code&gt; 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 &lt;code&gt;docker&lt;/code&gt; 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。&lt;/p&gt;

&lt;p&gt;当我们进行镜像构建的时候，并非所有定制都会通过 &lt;code&gt;RUN&lt;/code&gt; 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 &lt;code&gt;COPY&lt;/code&gt; 指令、&lt;code&gt;ADD&lt;/code&gt; 指令等。而 &lt;code&gt;docker build&lt;/code&gt; 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？&lt;/p&gt;

&lt;p&gt;这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，&lt;code&gt;docker build&lt;/code&gt; 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。&lt;/p&gt;

&lt;p&gt;如果在 &lt;code&gt;Dockerfile&lt;/code&gt; 中这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY ./package.json /app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这并不是要复制执行 &lt;code&gt;docker build&lt;/code&gt; 命令所在的目录下的 &lt;code&gt;package.json&lt;/code&gt;，也不是复制 &lt;code&gt;Dockerfile&lt;/code&gt; 所在目录下的 &lt;code&gt;package.json&lt;/code&gt;，而是复制 &lt;strong&gt;上下文（context）&lt;/strong&gt; 目录下的 &lt;code&gt;package.json&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此，&lt;code&gt;COPY&lt;/code&gt; 这类指令中的源文件的路径都是*相对路径*。这也是初学者经常会问的为什么 &lt;code&gt;COPY ../package.json /app&lt;/code&gt; 或者 &lt;code&gt;COPY /opt/xxxx /app&lt;/code&gt; 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。&lt;/p&gt;

&lt;p&gt;现在就可以理解刚才的命令 &lt;code&gt;docker build -t nginx:v3 .&lt;/code&gt; 中的这个 &lt;code&gt;.&lt;/code&gt;，实际上是在指定上下文的目录，&lt;code&gt;docker build&lt;/code&gt; 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。&lt;/p&gt;

&lt;p&gt;如果观察 &lt;code&gt;docker build&lt;/code&gt; 输出，我们其实已经看到了这个发送上下文的过程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 &lt;code&gt;COPY /opt/xxxx /app&lt;/code&gt; 不工作后，于是干脆将 &lt;code&gt;Dockerfile&lt;/code&gt; 放到了硬盘根目录去构建，结果发现 &lt;code&gt;docker build&lt;/code&gt; 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 &lt;code&gt;docker build&lt;/code&gt; 打包整个硬盘，这显然是使用错误。&lt;/p&gt;

&lt;p&gt;一般来说，应该会将 &lt;code&gt;Dockerfile&lt;/code&gt; 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 &lt;code&gt;.gitignore&lt;/code&gt; 一样的语法写一个 &lt;code&gt;.dockerignore&lt;/code&gt;，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。&lt;/p&gt;

&lt;p&gt;那么为什么会有人误以为 &lt;code&gt;.&lt;/code&gt; 是指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在目录呢？这是因为在默认情况下，如果不额外指定 &lt;code&gt;Dockerfile&lt;/code&gt; 的话，会将上下文目录下的名为 &lt;code&gt;Dockerfile&lt;/code&gt; 的文件作为 Dockerfile。&lt;/p&gt;

&lt;p&gt;这只是默认行为，实际上 &lt;code&gt;Dockerfile&lt;/code&gt; 的文件名并不要求必须为 &lt;code&gt;Dockerfile&lt;/code&gt;，而且并不要求必须位于上下文目录中，比如可以用 &lt;code&gt;-f ../Dockerfile.php&lt;/code&gt; 参数指定某个文件作为 &lt;code&gt;Dockerfile&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当然，一般大家习惯性的会使用默认的文件名 &lt;code&gt;Dockerfile&lt;/code&gt;，以及会将其置于镜像构建上下文目录中。&lt;/p&gt;

&lt;h3 id=&#34;其它-docker-build-的用法:13a98cce61a7c185eb25fd01e8410188&#34;&gt;其它 &lt;code&gt;docker build&lt;/code&gt; 的用法&lt;/h3&gt;

&lt;h4 id=&#34;直接用-git-repo-进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;直接用 Git repo 进行构建&lt;/h4&gt;

&lt;p&gt;或许你已经注意到了，&lt;code&gt;docker build&lt;/code&gt; 还支持从 URL 构建，比如可以直接从 Git repo 中构建：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:11.1

Sending build context to Docker daemon 2.048 kB
Step 1 : FROM gitlab/gitlab-ce:11.1.0-ce.0
11.1.0-ce.0: Pulling from gitlab/gitlab-ce
aed15891ba52: Already exists
773ae8583d14: Already exists
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这行命令指定了构建所需的 Git repo，并且指定默认的 &lt;code&gt;master&lt;/code&gt; 分支，构建目录为 &lt;code&gt;/11.1/&lt;/code&gt;，然后 Docker 就会自己去 &lt;code&gt;git clone&lt;/code&gt; 这个项目、切换到指定分支、并进入到指定目录后开始构建。&lt;/p&gt;

&lt;h4 id=&#34;用给定的-tar-压缩包构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;用给定的 tar 压缩包构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build http://server/context.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果所给出的 URL 不是个 Git repo，而是个 &lt;code&gt;tar&lt;/code&gt; 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。&lt;/p&gt;

&lt;h4 id=&#34;从标准输入中读取-dockerfile-进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;从标准输入中读取 Dockerfile 进行构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build - &amp;lt; Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat Dockerfile | docker build -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果标准输入传入的是文本文件，则将其视为 &lt;code&gt;Dockerfile&lt;/code&gt;，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 &lt;code&gt;COPY&lt;/code&gt; 进镜像之类的事情。&lt;/p&gt;

&lt;h4 id=&#34;从标准输入中读取上下文压缩包进行构建:13a98cce61a7c185eb25fd01e8410188&#34;&gt;从标准输入中读取上下文压缩包进行构建&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build - &amp;lt; context.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果发现标准输入的文件格式是 &lt;code&gt;gzip&lt;/code&gt;、&lt;code&gt;bzip2&lt;/code&gt; 以及 &lt;code&gt;xz&lt;/code&gt; 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。&lt;/p&gt;

&lt;h2 id=&#34;dockerfile-指令详解:13a98cce61a7c185eb25fd01e8410188&#34;&gt;Dockerfile 指令详解&lt;/h2&gt;

&lt;p&gt;我们已经介绍了 &lt;code&gt;FROM&lt;/code&gt;，&lt;code&gt;RUN&lt;/code&gt;，还提及了 &lt;code&gt;COPY&lt;/code&gt;, &lt;code&gt;ADD&lt;/code&gt;，其实 &lt;code&gt;Dockerfile&lt;/code&gt; 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。&lt;/p&gt;

&lt;h3 id=&#34;copy-复制文件:13a98cce61a7c185eb25fd01e8410188&#34;&gt;COPY 复制文件&lt;/h3&gt;

&lt;p&gt;格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] &amp;lt;源路径&amp;gt;... &amp;lt;目标路径&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] [&amp;quot;&amp;lt;源路径1&amp;gt;&amp;quot;,... &amp;quot;&amp;lt;目标路径&amp;gt;&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和 &lt;code&gt;RUN&lt;/code&gt; 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; 指令将从构建上下文目录中 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 的文件/目录复制到新的一层的镜像内的 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 位置。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY package.json /usr/src/app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 &lt;a href=&#34;https://golang.org/pkg/path/filepath/#Match&#34;&gt;&lt;code&gt;filepath.Match&lt;/code&gt;&lt;/a&gt; 规则，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY hom* /mydir/
COPY hom?.txt /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。&lt;/p&gt;

&lt;p&gt;此外，还需要注意一点，使用 &lt;code&gt;COPY&lt;/code&gt; 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。&lt;/p&gt;

&lt;p&gt;在使用该指令的时候还可以加上 &lt;code&gt;--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;&lt;/code&gt; 选项来改变文件的所属用户及所属组。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY --chown=55:mygroup files* /mydir/
COPY --chown=bin files* /mydir/
COPY --chown=1 files* /mydir/
COPY --chown=10:11 files* /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-更高级的复制文件:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ADD 更高级的复制文件&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; 指令和 &lt;code&gt;COPY&lt;/code&gt; 的格式和性质基本一致。但是在 &lt;code&gt;COPY&lt;/code&gt; 基础上增加了一些功能。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 可以是一个 &lt;code&gt;URL&lt;/code&gt;，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 去。下载后的文件权限自动设置为 &lt;code&gt;600&lt;/code&gt;，如果这并不是想要的权限，那么还需要增加额外的一层 &lt;code&gt;RUN&lt;/code&gt; 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 &lt;code&gt;RUN&lt;/code&gt; 指令进行解压缩。所以不如直接使用 &lt;code&gt;RUN&lt;/code&gt; 指令，然后使用 &lt;code&gt;wget&lt;/code&gt; 或者 &lt;code&gt;curl&lt;/code&gt; 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。&lt;/p&gt;

&lt;p&gt;如果 &lt;code&gt;&amp;lt;源路径&amp;gt;&lt;/code&gt; 为一个 &lt;code&gt;tar&lt;/code&gt; 压缩文件的话，压缩格式为 &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt; 以及 &lt;code&gt;xz&lt;/code&gt; 的情况下，&lt;code&gt;ADD&lt;/code&gt; 指令将会自动解压缩这个压缩文件到 &lt;code&gt;&amp;lt;目标路径&amp;gt;&lt;/code&gt; 去。&lt;/p&gt;

&lt;p&gt;在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 &lt;code&gt;ubuntu&lt;/code&gt; 中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM scratch
ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 &lt;code&gt;ADD&lt;/code&gt; 命令了。&lt;/p&gt;

&lt;p&gt;在 Docker 官方的 &lt;a href=&#34;../../appendix/best_practices.md&#34;&gt;Dockerfile 最佳实践文档&lt;/a&gt; 中要求，尽可能的使用 &lt;code&gt;COPY&lt;/code&gt;，因为 &lt;code&gt;COPY&lt;/code&gt; 的语义很明确，就是复制文件而已，而 &lt;code&gt;ADD&lt;/code&gt; 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 &lt;code&gt;ADD&lt;/code&gt; 的场合，就是所提及的需要自动解压缩的场合。&lt;/p&gt;

&lt;p&gt;另外需要注意的是，&lt;code&gt;ADD&lt;/code&gt; 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。&lt;/p&gt;

&lt;p&gt;因此在 &lt;code&gt;COPY&lt;/code&gt; 和 &lt;code&gt;ADD&lt;/code&gt; 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 &lt;code&gt;COPY&lt;/code&gt; 指令，仅在需要自动解压缩的场合使用 &lt;code&gt;ADD&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在使用该指令的时候还可以加上 &lt;code&gt;--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;&lt;/code&gt; 选项来改变文件的所属用户及所属组。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ADD --chown=55:mygroup files* /mydir/
ADD --chown=bin files* /mydir/
ADD --chown=1 files* /mydir/
ADD --chown=10:11 files* /mydir/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cmd-容器启动命令:13a98cce61a7c185eb25fd01e8410188&#34;&gt;CMD 容器启动命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; 指令的格式和 &lt;code&gt;RUN&lt;/code&gt; 相似，也是两种格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&lt;/code&gt; 格式：&lt;code&gt;CMD &amp;lt;命令&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt; 格式：&lt;code&gt;CMD [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数列表格式：&lt;code&gt;CMD [&amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;...]&lt;/code&gt;。在指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令后，用 &lt;code&gt;CMD&lt;/code&gt; 指定具体的参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。&lt;code&gt;CMD&lt;/code&gt; 指令就是用于指定默认的容器主进程的启动命令的。&lt;/p&gt;

&lt;p&gt;在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，&lt;code&gt;ubuntu&lt;/code&gt; 镜像默认的 &lt;code&gt;CMD&lt;/code&gt; 是 &lt;code&gt;/bin/bash&lt;/code&gt;，如果我们直接 &lt;code&gt;docker run -it ubuntu&lt;/code&gt; 的话，会直接进入 &lt;code&gt;bash&lt;/code&gt;。我们也可以在运行时指定运行别的命令，如 &lt;code&gt;docker run -it ubuntu cat /etc/os-release&lt;/code&gt;。这就是用 &lt;code&gt;cat /etc/os-release&lt;/code&gt; 命令替换了默认的 &lt;code&gt;/bin/bash&lt;/code&gt; 命令了，输出了系统版本信息。&lt;/p&gt;

&lt;p&gt;在指令格式上，一般推荐使用 &lt;code&gt;exec&lt;/code&gt; 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &lt;code&gt;&amp;quot;&lt;/code&gt;，而不要使用单引号。&lt;/p&gt;

&lt;p&gt;如果使用 &lt;code&gt;shell&lt;/code&gt; 格式的话，实际的命令会被包装为 &lt;code&gt;sh -c&lt;/code&gt; 的参数的形式进行执行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD echo $HOME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在实际执行中，会将其变更为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD [ &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;echo $HOME&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。&lt;/p&gt;

&lt;p&gt;提到 &lt;code&gt;CMD&lt;/code&gt; 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。&lt;/p&gt;

&lt;p&gt;Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 &lt;code&gt;systemd&lt;/code&gt; 去启动后台服务，容器内没有后台服务的概念。&lt;/p&gt;

&lt;p&gt;一些初学者将 &lt;code&gt;CMD&lt;/code&gt; 写为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后发现容器执行后就立即退出了。甚至在容器内去使用 &lt;code&gt;systemctl&lt;/code&gt; 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。&lt;/p&gt;

&lt;p&gt;对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。&lt;/p&gt;

&lt;p&gt;而使用 &lt;code&gt;service nginx start&lt;/code&gt; 命令，则是希望 upstart 来以后台守护进程形式启动 &lt;code&gt;nginx&lt;/code&gt; 服务。而刚才说了 &lt;code&gt;CMD service nginx start&lt;/code&gt; 会被理解为 &lt;code&gt;CMD [ &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;service nginx start&amp;quot;]&lt;/code&gt;，因此主进程实际上是 &lt;code&gt;sh&lt;/code&gt;。那么当 &lt;code&gt;service nginx start&lt;/code&gt; 命令结束后，&lt;code&gt;sh&lt;/code&gt; 也就结束了，&lt;code&gt;sh&lt;/code&gt; 作为主进程退出了，自然就会令容器退出。&lt;/p&gt;

&lt;p&gt;正确的做法是直接执行 &lt;code&gt;nginx&lt;/code&gt; 可执行文件，并且要求以前台形式运行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;entrypoint-入口点:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ENTRYPOINT 入口点&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的格式和 &lt;code&gt;RUN&lt;/code&gt; 指令格式一样，分为 &lt;code&gt;exec&lt;/code&gt; 格式和 &lt;code&gt;shell&lt;/code&gt; 格式。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 的目的和 &lt;code&gt;CMD&lt;/code&gt; 一样，都是在指定容器启动程序及参数。&lt;code&gt;ENTRYPOINT&lt;/code&gt; 在运行时也可以替代，不过比 &lt;code&gt;CMD&lt;/code&gt; 要略显繁琐，需要通过 &lt;code&gt;docker run&lt;/code&gt; 的参数 &lt;code&gt;--entrypoint&lt;/code&gt; 来指定。&lt;/p&gt;

&lt;p&gt;当指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 后，&lt;code&gt;CMD&lt;/code&gt; 的含义就发生了改变，不再是直接的运行其命令，而是将 &lt;code&gt;CMD&lt;/code&gt; 的内容作为参数传给 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令，换句话说实际执行时，将变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;ENTRYPOINT&amp;gt; &amp;quot;&amp;lt;CMD&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么有了 &lt;code&gt;CMD&lt;/code&gt; 后，为什么还要有 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 呢？这种 &lt;code&gt;&amp;lt;ENTRYPOINT&amp;gt; &amp;quot;&amp;lt;CMD&amp;gt;&amp;quot;&lt;/code&gt; 有什么好处么？让我们来看几个场景。&lt;/p&gt;

&lt;h4 id=&#34;场景一-让镜像变成像命令一样使用:13a98cce61a7c185eb25fd01e8410188&#34;&gt;场景一：让镜像变成像命令一样使用&lt;/h4&gt;

&lt;p&gt;假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 &lt;code&gt;CMD&lt;/code&gt; 来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:18.04
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y curl \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
CMD [ &amp;quot;curl&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;https://ip.cn&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假如我们使用 &lt;code&gt;docker build -t myip .&lt;/code&gt; 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 &lt;code&gt;CMD&lt;/code&gt; 中可以看到实质的命令是 &lt;code&gt;curl&lt;/code&gt;，那么如果我们希望显示 HTTP 头信息，就需要加上 &lt;code&gt;-i&lt;/code&gt; 参数。那么我们可以直接加 &lt;code&gt;-i&lt;/code&gt; 参数给 &lt;code&gt;docker run myip&lt;/code&gt; 么？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip -i
docker: Error response from daemon: invalid header field value &amp;quot;oci runtime error: container_linux.go:247: starting container process caused \&amp;quot;exec: \\\&amp;quot;-i\\\&amp;quot;: executable file not found in $PATH\&amp;quot;\n&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到可执行文件找不到的报错，&lt;code&gt;executable file not found&lt;/code&gt;。之前我们说过，跟在镜像名后面的是 &lt;code&gt;command&lt;/code&gt;，运行时会替换 &lt;code&gt;CMD&lt;/code&gt; 的默认值。因此这里的 &lt;code&gt;-i&lt;/code&gt; 替换了原来的 &lt;code&gt;CMD&lt;/code&gt;，而不是添加在原来的 &lt;code&gt;curl -s https://ip.cn&lt;/code&gt; 后面。而 &lt;code&gt;-i&lt;/code&gt; 根本不是命令，所以自然找不到。&lt;/p&gt;

&lt;p&gt;那么如果我们希望加入 &lt;code&gt;-i&lt;/code&gt; 这参数，我们就必须重新完整的输入这个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip curl -s https://ip.cn -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这显然不是很好的解决方案，而使用 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 就可以解决这个问题。现在我们重新用 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 来实现这个镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:18.04
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y curl \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
ENTRYPOINT [ &amp;quot;curl&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;https://ip.cn&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次我们再来尝试直接使用 &lt;code&gt;docker run myip -i&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通

$ docker run myip -i
HTTP/1.1 200 OK
Server: nginx/1.8.0
Date: Tue, 22 Nov 2016 05:12:40 GMT
Content-Type: text/html; charset=UTF-8
Vary: Accept-Encoding
X-Powered-By: PHP/5.6.24-1~dotdeb+7.1
X-Cache: MISS from cache-2
X-Cache-Lookup: MISS from cache-2:80
X-Cache: MISS from proxy-2_6
Transfer-Encoding: chunked
Via: 1.1 cache-2:80, 1.1 proxy-2_6:8006
Connection: keep-alive

当前 IP：61.148.226.66 来自：北京市 联通
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，这次成功了。这是因为当存在 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 后，&lt;code&gt;CMD&lt;/code&gt; 的内容将会作为参数传给 &lt;code&gt;ENTRYPOINT&lt;/code&gt;，而这里 &lt;code&gt;-i&lt;/code&gt; 就是新的 &lt;code&gt;CMD&lt;/code&gt;，因此会作为参数传给 &lt;code&gt;curl&lt;/code&gt;，从而达到了我们预期的效果。&lt;/p&gt;

&lt;h4 id=&#34;场景二-应用运行前的准备工作:13a98cce61a7c185eb25fd01e8410188&#34;&gt;场景二：应用运行前的准备工作&lt;/h4&gt;

&lt;p&gt;启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;mysql&lt;/code&gt; 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。&lt;/p&gt;

&lt;p&gt;此外，可能希望避免使用 &lt;code&gt;root&lt;/code&gt; 用户去启动服务，从而提高安全性，而在启动服务前还需要以 &lt;code&gt;root&lt;/code&gt; 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 &lt;code&gt;root&lt;/code&gt; 身份执行，方便调试等。&lt;/p&gt;

&lt;p&gt;这些准备工作是和容器 &lt;code&gt;CMD&lt;/code&gt; 无关的，无论 &lt;code&gt;CMD&lt;/code&gt; 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 中去执行，而这个脚本会将接到的参数（也就是 &lt;code&gt;&amp;lt;CMD&amp;gt;&lt;/code&gt;）作为命令，在脚本最后执行。比如官方镜像 &lt;code&gt;redis&lt;/code&gt; 中就是这么做的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM alpine:3.4
...
RUN addgroup -S redis &amp;amp;&amp;amp; adduser -S -G redis redis
...
ENTRYPOINT [&amp;quot;docker-entrypoint.sh&amp;quot;]

EXPOSE 6379
CMD [ &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 为 &lt;code&gt;docker-entrypoint.sh&lt;/code&gt; 脚本。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
...
# allow the container to be started with `--user`
if [ &amp;quot;$1&amp;quot; = &#39;redis-server&#39; -a &amp;quot;$(id -u)&amp;quot; = &#39;0&#39; ]; then
	chown -R redis .
	exec su-exec redis &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
fi

exec &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该脚本的内容就是根据 &lt;code&gt;CMD&lt;/code&gt; 的内容来判断，如果是 &lt;code&gt;redis-server&lt;/code&gt; 的话，则切换到 &lt;code&gt;redis&lt;/code&gt; 用户身份启动服务器，否则依旧使用 &lt;code&gt;root&lt;/code&gt; 身份执行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it redis id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;env-设置环境变量:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ENV 设置环境变量&lt;/h3&gt;

&lt;p&gt;格式有两种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENV &amp;lt;key1&amp;gt;=&amp;lt;value1&amp;gt; &amp;lt;key2&amp;gt;=&amp;lt;value2&amp;gt;...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 &lt;code&gt;RUN&lt;/code&gt;，还是运行时的应用，都可以直接使用这里定义的环境变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfie&#34;&gt;ENV VERSION=1.0 DEBUG=on \
    NAME=&amp;quot;Happy Feet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。&lt;/p&gt;

&lt;p&gt;定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 &lt;code&gt;node&lt;/code&gt; 镜像 &lt;code&gt;Dockerfile&lt;/code&gt; 中，就有类似这样的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ENV NODE_VERSION 7.2.0

RUN curl -SLO &amp;quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; \
  &amp;amp;&amp;amp; curl -SLO &amp;quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&amp;quot; \
  &amp;amp;&amp;amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  &amp;amp;&amp;amp; grep &amp;quot; node-v$NODE_VERSION-linux-x64.tar.xz\$&amp;quot; SHASUMS256.txt | sha256sum -c - \
  &amp;amp;&amp;amp; tar -xJf &amp;quot;node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; -C /usr/local --strip-components=1 \
  &amp;amp;&amp;amp; rm &amp;quot;node-v$NODE_VERSION-linux-x64.tar.xz&amp;quot; SHASUMS256.txt.asc SHASUMS256.txt \
  &amp;amp;&amp;amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里先定义了环境变量 &lt;code&gt;NODE_VERSION&lt;/code&gt;，其后的 &lt;code&gt;RUN&lt;/code&gt; 这层里，多次使用 &lt;code&gt;$NODE_VERSION&lt;/code&gt; 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 &lt;code&gt;7.2.0&lt;/code&gt; 即可，&lt;code&gt;Dockerfile&lt;/code&gt; 构建维护变得更轻松了。&lt;/p&gt;

&lt;p&gt;下列指令可以支持环境变量展开： &lt;code&gt;ADD&lt;/code&gt;、&lt;code&gt;COPY&lt;/code&gt;、&lt;code&gt;ENV&lt;/code&gt;、&lt;code&gt;EXPOSE&lt;/code&gt;、&lt;code&gt;LABEL&lt;/code&gt;、&lt;code&gt;USER&lt;/code&gt;、&lt;code&gt;WORKDIR&lt;/code&gt;、&lt;code&gt;VOLUME&lt;/code&gt;、&lt;code&gt;STOPSIGNAL&lt;/code&gt;、&lt;code&gt;ONBUILD&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 &lt;code&gt;Dockerfile&lt;/code&gt; 制作更多的镜像，只需使用不同的环境变量即可。&lt;/p&gt;

&lt;h3 id=&#34;arg-构建参数:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ARG 构建参数&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;ARG &amp;lt;参数名&amp;gt;[=&amp;lt;默认值&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;构建参数和 &lt;code&gt;ENV&lt;/code&gt; 的效果一样，都是设置环境变量。所不同的是，&lt;code&gt;ARG&lt;/code&gt; 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 &lt;code&gt;ARG&lt;/code&gt; 保存密码之类的信息，因为 &lt;code&gt;docker history&lt;/code&gt; 还是可以看到所有值的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 中的 &lt;code&gt;ARG&lt;/code&gt; 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 &lt;code&gt;docker build&lt;/code&gt; 中用 &lt;code&gt;--build-arg &amp;lt;参数名&amp;gt;=&amp;lt;值&amp;gt;&lt;/code&gt; 来覆盖。&lt;/p&gt;

&lt;p&gt;在 1.13 之前的版本，要求 &lt;code&gt;--build-arg&lt;/code&gt; 中的参数名，必须在 &lt;code&gt;Dockerfile&lt;/code&gt; 中用 &lt;code&gt;ARG&lt;/code&gt; 定义过了，换句话说，就是 &lt;code&gt;--build-arg&lt;/code&gt; 指定的参数，必须在 &lt;code&gt;Dockerfile&lt;/code&gt; 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 &lt;code&gt;Dockerfile&lt;/code&gt; 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。&lt;/p&gt;

&lt;h3 id=&#34;volume-定义匿名卷:13a98cce61a7c185eb25fd01e8410188&#34;&gt;VOLUME 定义匿名卷&lt;/h3&gt;

&lt;p&gt;格式为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VOLUME [&amp;quot;&amp;lt;路径1&amp;gt;&amp;quot;, &amp;quot;&amp;lt;路径2&amp;gt;&amp;quot;...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VOLUME &amp;lt;路径&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 &lt;code&gt;Dockerfile&lt;/code&gt; 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;VOLUME /data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 &lt;code&gt;/data&lt;/code&gt; 目录就会在运行时自动挂载为匿名卷，任何向 &lt;code&gt;/data&lt;/code&gt; 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -v mydata:/data xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这行命令中，就使用了 &lt;code&gt;mydata&lt;/code&gt; 这个命名卷挂载到了 &lt;code&gt;/data&lt;/code&gt; 这个位置，替代了 &lt;code&gt;Dockerfile&lt;/code&gt; 中定义的匿名卷的挂载配置。&lt;/p&gt;

&lt;h3 id=&#34;expose-声明端口:13a98cce61a7c185eb25fd01e8410188&#34;&gt;EXPOSE 声明端口&lt;/h3&gt;

&lt;p&gt;格式为 &lt;code&gt;EXPOSE &amp;lt;端口1&amp;gt; [&amp;lt;端口2&amp;gt;...]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 &lt;code&gt;docker run -P&lt;/code&gt; 时，会自动随机映射 &lt;code&gt;EXPOSE&lt;/code&gt; 的端口。&lt;/p&gt;

&lt;p&gt;要将 &lt;code&gt;EXPOSE&lt;/code&gt; 和在运行时使用 &lt;code&gt;-p &amp;lt;宿主端口&amp;gt;:&amp;lt;容器端口&amp;gt;&lt;/code&gt; 区分开来。&lt;code&gt;-p&lt;/code&gt;，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 &lt;code&gt;EXPOSE&lt;/code&gt; 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。&lt;/p&gt;

&lt;h3 id=&#34;workdir-指定工作目录:13a98cce61a7c185eb25fd01e8410188&#34;&gt;WORKDIR 指定工作目录&lt;/h3&gt;

&lt;p&gt;格式为 &lt;code&gt;WORKDIR &amp;lt;工作目录路径&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，&lt;code&gt;WORKDIR&lt;/code&gt; 会帮你建立目录。&lt;/p&gt;

&lt;p&gt;之前提到一些初学者常犯的错误是把 &lt;code&gt;Dockerfile&lt;/code&gt; 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;RUN cd /app
RUN echo &amp;quot;hello&amp;quot; &amp;gt; world.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果将这个 &lt;code&gt;Dockerfile&lt;/code&gt; 进行构建镜像运行后，会发现找不到 &lt;code&gt;/app/world.txt&lt;/code&gt; 文件，或者其内容不是 &lt;code&gt;hello&lt;/code&gt;。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 &lt;code&gt;Dockerfile&lt;/code&gt; 中，这两行 &lt;code&gt;RUN&lt;/code&gt; 命令的执行环境根本不同，是两个完全不同的容器。这就是对 &lt;code&gt;Dockerfile&lt;/code&gt; 构建分层存储的概念不了解所导致的错误。&lt;/p&gt;

&lt;p&gt;之前说过每一个 &lt;code&gt;RUN&lt;/code&gt; 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 &lt;code&gt;RUN cd /app&lt;/code&gt; 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。&lt;/p&gt;

&lt;p&gt;因此如果需要改变以后各层的工作目录的位置，那么应该使用 &lt;code&gt;WORKDIR&lt;/code&gt; 指令。&lt;/p&gt;

&lt;h3 id=&#34;user-指定当前用户:13a98cce61a7c185eb25fd01e8410188&#34;&gt;USER 指定当前用户&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;USER &amp;lt;用户名&amp;gt;[:&amp;lt;用户组&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;USER&lt;/code&gt; 指令和 &lt;code&gt;WORKDIR&lt;/code&gt; 相似，都是改变环境状态并影响以后的层。&lt;code&gt;WORKDIR&lt;/code&gt; 是改变工作目录，&lt;code&gt;USER&lt;/code&gt; 则是改变之后层的执行 &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt; 以及 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 这类命令的身份。&lt;/p&gt;

&lt;p&gt;当然，和 &lt;code&gt;WORKDIR&lt;/code&gt; 一样，&lt;code&gt;USER&lt;/code&gt; 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN groupadd -r redis &amp;amp;&amp;amp; useradd -r -g redis redis
USER redis
RUN [ &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果以 &lt;code&gt;root&lt;/code&gt; 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 &lt;code&gt;su&lt;/code&gt; 或者 &lt;code&gt;sudo&lt;/code&gt;，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 &lt;a href=&#34;https://github.com/tianon/gosu&#34;&gt;&lt;code&gt;gosu&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# 建立 redis 用户，并使用 gosu 换另一个用户执行命令
RUN groupadd -r redis &amp;amp;&amp;amp; useradd -r -g redis redis
# 下载 gosu
RUN wget -O /usr/local/bin/gosu &amp;quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&amp;quot; \
    &amp;amp;&amp;amp; chmod +x /usr/local/bin/gosu \
    &amp;amp;&amp;amp; gosu nobody true
# 设置 CMD，并以另外的用户执行
CMD [ &amp;quot;exec&amp;quot;, &amp;quot;gosu&amp;quot;, &amp;quot;redis&amp;quot;, &amp;quot;redis-server&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;healthcheck-健康检查:13a98cce61a7c185eb25fd01e8410188&#34;&gt;HEALTHCHECK 健康检查&lt;/h3&gt;

&lt;p&gt;格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HEALTHCHECK [选项] CMD &amp;lt;命令&amp;gt;&lt;/code&gt;：设置检查容器健康状况的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEALTHCHECK NONE&lt;/code&gt;：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。&lt;/p&gt;

&lt;p&gt;在没有 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。&lt;/p&gt;

&lt;p&gt;而自 1.12 之后，Docker 提供了 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。&lt;/p&gt;

&lt;p&gt;当在一个镜像指定了 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令后，用其启动容器，初始状态会为 &lt;code&gt;starting&lt;/code&gt;，在 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 指令检查成功后变为 &lt;code&gt;healthy&lt;/code&gt;，如果连续一定次数失败，则会变为 &lt;code&gt;unhealthy&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; 支持下列选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--interval=&amp;lt;间隔&amp;gt;&lt;/code&gt;：两次健康检查的间隔，默认为 30 秒；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--timeout=&amp;lt;时长&amp;gt;&lt;/code&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--retries=&amp;lt;次数&amp;gt;&lt;/code&gt;：当连续失败指定次数后，则将容器状态视为 &lt;code&gt;unhealthy&lt;/code&gt;，默认 3 次。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和 &lt;code&gt;CMD&lt;/code&gt;, &lt;code&gt;ENTRYPOINT&lt;/code&gt; 一样，&lt;code&gt;HEALTHCHECK&lt;/code&gt; 只可以出现一次，如果写了多个，只有最后一个生效。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;HEALTHCHECK [选项] CMD&lt;/code&gt; 后面的命令，格式和 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 一样，分为 &lt;code&gt;shell&lt;/code&gt; 格式，和 &lt;code&gt;exec&lt;/code&gt; 格式。命令的返回值决定了该次健康检查的成功与否：&lt;code&gt;0&lt;/code&gt;：成功；&lt;code&gt;1&lt;/code&gt;：失败；&lt;code&gt;2&lt;/code&gt;：保留，不要使用这个值。&lt;/p&gt;

&lt;p&gt;假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 &lt;code&gt;curl&lt;/code&gt; 来帮助判断，其 &lt;code&gt;Dockerfile&lt;/code&gt; 的 &lt;code&gt;HEALTHCHECK&lt;/code&gt; 可以这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM nginx
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y curl &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=5s --timeout=3s \
  CMD curl -fs http://localhost/ || exit 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 &lt;code&gt;curl -fs http://localhost/ || exit 1&lt;/code&gt; 作为健康检查命令。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;docker build&lt;/code&gt; 来构建这个镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t myweb:v1 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建好了后，我们启动一个容器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --name web -p 80:80 myweb:v1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当运行该镜像后，可以通过 &lt;code&gt;docker container ls&lt;/code&gt; 看到最初的状态为 &lt;code&gt;(health: starting)&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES
03e28eb00bd0        myweb:v1            &amp;quot;nginx -g &#39;daemon off&amp;quot;   3 seconds ago       Up 2 seconds (health: starting)   80/tcp, 443/tcp     web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在等待几秒钟后，再次 &lt;code&gt;docker container ls&lt;/code&gt;，就会看到健康状态变化为了 &lt;code&gt;(healthy)&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES
03e28eb00bd0        myweb:v1            &amp;quot;nginx -g &#39;daemon off&amp;quot;   18 seconds ago      Up 16 seconds (healthy)   80/tcp, 443/tcp     web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果健康检查连续失败超过了重试次数，状态就会变为 &lt;code&gt;(unhealthy)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为了帮助排障，健康检查命令的输出（包括 &lt;code&gt;stdout&lt;/code&gt; 以及 &lt;code&gt;stderr&lt;/code&gt;）都会被存储于健康状态里，可以用 &lt;code&gt;docker inspect&lt;/code&gt; 来查看。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect --format &#39;{{json .State.Health}}&#39; web | python -m json.tool
{
    &amp;quot;FailingStreak&amp;quot;: 0,
    &amp;quot;Log&amp;quot;: [
        {
            &amp;quot;End&amp;quot;: &amp;quot;2016-11-25T14:35:37.940957051Z&amp;quot;,
            &amp;quot;ExitCode&amp;quot;: 0,
            &amp;quot;Output&amp;quot;: &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;\n&amp;lt;style&amp;gt;\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n&amp;lt;/style&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;\n&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&amp;lt;/p&amp;gt;\n\n&amp;lt;p&amp;gt;For online documentation and support please refer to\n&amp;lt;a href=\&amp;quot;http://nginx.org/\&amp;quot;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;\nCommercial support is available at\n&amp;lt;a href=\&amp;quot;http://nginx.com/\&amp;quot;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;\n\n&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you for using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&amp;quot;,
            &amp;quot;Start&amp;quot;: &amp;quot;2016-11-25T14:35:37.780192565Z&amp;quot;
        }
    ],
    &amp;quot;Status&amp;quot;: &amp;quot;healthy&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;onbuild-为他人做嫁衣裳:13a98cce61a7c185eb25fd01e8410188&#34;&gt;ONBUILD 为他人做嫁衣裳&lt;/h3&gt;

&lt;p&gt;格式：&lt;code&gt;ONBUILD &amp;lt;其它指令&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 是一个特殊的指令，它后面跟的是其它指令，比如 &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;COPY&lt;/code&gt; 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 中的其它指令都是为了定制当前镜像而准备的，唯有 &lt;code&gt;ONBUILD&lt;/code&gt; 是为了帮助别人定制自己而准备的。&lt;/p&gt;

&lt;p&gt;假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 &lt;code&gt;npm&lt;/code&gt; 进行包管理，所有依赖、配置、启动信息等会放到 &lt;code&gt;package.json&lt;/code&gt; 文件里。在拿到程序代码后，需要先进行 &lt;code&gt;npm install&lt;/code&gt; 才可以获得所有需要的依赖。然后就可以通过 &lt;code&gt;npm start&lt;/code&gt; 来启动应用。因此，一般来说会这样写 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
COPY ./package.json /app
RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
COPY . /app/
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把这个 &lt;code&gt;Dockerfile&lt;/code&gt; 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 &lt;code&gt;Dockerfile&lt;/code&gt; 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。&lt;/p&gt;

&lt;p&gt;如果第一个 Node.js 项目在开发过程中，发现这个 &lt;code&gt;Dockerfile&lt;/code&gt; 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 &lt;code&gt;Dockerfile&lt;/code&gt;，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 &lt;code&gt;Dockerfile&lt;/code&gt; 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 &lt;code&gt;Dockerfile&lt;/code&gt;，而第二个项目的 &lt;code&gt;Dockerfile&lt;/code&gt; 就会被自动修复。&lt;/p&gt;

&lt;p&gt;那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 &lt;code&gt;Dockerfile&lt;/code&gt; 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 &lt;code&gt;Dockerfile&lt;/code&gt; 就会变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 &lt;code&gt;my-node&lt;/code&gt; 的话，各个项目内的自己的 &lt;code&gt;Dockerfile&lt;/code&gt; 就变为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM my-node
COPY ./package.json /app
RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
COPY . /app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基础镜像变化后，各个项目都用这个 &lt;code&gt;Dockerfile&lt;/code&gt; 重新构建镜像，会继承基础镜像的更新。&lt;/p&gt;

&lt;p&gt;那么，问题解决了么？没有。准确说，只解决了一半。如果这个 &lt;code&gt;Dockerfile&lt;/code&gt; 里面有些东西需要调整呢？比如 &lt;code&gt;npm install&lt;/code&gt; 都需要加一些参数，那怎么办？这一行 &lt;code&gt;RUN&lt;/code&gt; 是不可能放入基础镜像的，因为涉及到了当前项目的 &lt;code&gt;./package.json&lt;/code&gt;，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 &lt;code&gt;Dockerfile&lt;/code&gt; 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ONBUILD&lt;/code&gt; 可以解决这个问题。让我们用 &lt;code&gt;ONBUILD&lt;/code&gt; 重新写一下基础镜像的 &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:slim
RUN mkdir /app
WORKDIR /app
ONBUILD COPY ./package.json /app
ONBUILD RUN [ &amp;quot;npm&amp;quot;, &amp;quot;install&amp;quot; ]
ONBUILD COPY . /app/
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次我们回到原始的 &lt;code&gt;Dockerfile&lt;/code&gt;，但是这次将项目相关的指令加上 &lt;code&gt;ONBUILD&lt;/code&gt;，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 &lt;code&gt;Dockerfile&lt;/code&gt; 就变成了简单地：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM my-node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的，只有这么一行。当在各个项目目录中，用这个只有一行的 &lt;code&gt;Dockerfile&lt;/code&gt; 构建镜像时，之前基础镜像的那三行 &lt;code&gt;ONBUILD&lt;/code&gt; 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 &lt;code&gt;npm install&lt;/code&gt;，生成应用镜像。&lt;/p&gt;

&lt;h3 id=&#34;参考文档:13a98cce61a7c185eb25fd01e8410188&#34;&gt;参考文档&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfie&lt;/code&gt; 官方文档：&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 最佳实践文档：&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34;&gt;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 官方镜像 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;https://github.com/docker-library/docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>