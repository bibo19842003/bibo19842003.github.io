<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concept on Hello Bibo</title>
    <link>https://bibo19842003.github.io/tags/concept/</link>
    <description>Recent content in Concept on Hello Bibo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>bibo19842003@163.com (bibo)</managingEditor>
    <webMaster>bibo19842003@163.com (bibo)</webMaster>
    <lastBuildDate>Thu, 28 Mar 2019 12:00:37 +0800</lastBuildDate>
    <atom:link href="https://bibo19842003.github.io/tags/concept/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker concept</title>
      <link>https://bibo19842003.github.io/docker/docker-concept/</link>
      <pubDate>Thu, 28 Mar 2019 12:00:37 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-concept/</guid>
      <description>

&lt;h1 id=&#34;基本概念:c1314578dde76a3a394a9042c269f756&#34;&gt;基本概念&lt;/h1&gt;

&lt;p&gt;Docker 包括三个基本概念
* 镜像（&lt;code&gt;Image&lt;/code&gt;）
* 容器（&lt;code&gt;Container&lt;/code&gt;）
* 仓库（&lt;code&gt;Repository&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;理解了这三个概念，就理解了 Docker 的整个生命周期。&lt;/p&gt;

&lt;h2 id=&#34;docker-镜像:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker 镜像&lt;/h2&gt;

&lt;p&gt;我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 &lt;code&gt;root&lt;/code&gt; 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 &lt;code&gt;root&lt;/code&gt; 文件系统。比如官方镜像 &lt;code&gt;ubuntu:18.04&lt;/code&gt; 就包含了完整的一套 Ubuntu 18.04 最小系统的 &lt;code&gt;root&lt;/code&gt; 文件系统。&lt;/p&gt;

&lt;p&gt;Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。&lt;/p&gt;

&lt;h3 id=&#34;分层存储:c1314578dde76a3a394a9042c269f756&#34;&gt;分层存储&lt;/h3&gt;

&lt;p&gt;因为镜像包含操作系统完整的 &lt;code&gt;root&lt;/code&gt; 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Union_mount&#34;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。&lt;/p&gt;

&lt;p&gt;镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。&lt;/p&gt;

&lt;p&gt;分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;

&lt;p&gt;关于镜像构建，将会在后续相关章节中做进一步的讲解。&lt;/p&gt;

&lt;h2 id=&#34;docker-容器:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker 容器&lt;/h2&gt;

&lt;p&gt;镜像（&lt;code&gt;Image&lt;/code&gt;）和容器（&lt;code&gt;Container&lt;/code&gt;）的关系，就像是面向对象程序设计中的 &lt;code&gt;类&lt;/code&gt; 和 &lt;code&gt;实例&lt;/code&gt; 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。&lt;/p&gt;

&lt;p&gt;容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_namespaces&#34;&gt;命名空间&lt;/a&gt;。因此容器可以拥有自己的 &lt;code&gt;root&lt;/code&gt; 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。&lt;/p&gt;

&lt;p&gt;前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 &lt;strong&gt;容器存储层&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。&lt;/p&gt;

&lt;p&gt;按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 &lt;a href=&#34;../data_management/volume.md&#34;&gt;数据卷（Volume）&lt;/a&gt;、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。&lt;/p&gt;

&lt;p&gt;数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。&lt;/p&gt;

&lt;h2 id=&#34;docker-registry:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker Registry&lt;/h2&gt;

&lt;p&gt;镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，&lt;a href=&#34;../repository/registry.md&#34;&gt;Docker Registry&lt;/a&gt; 就是这样的服务。&lt;/p&gt;

&lt;p&gt;一个 &lt;strong&gt;Docker Registry&lt;/strong&gt; 中可以包含多个 &lt;strong&gt;仓库&lt;/strong&gt;（&lt;code&gt;Repository&lt;/code&gt;）；每个仓库可以包含多个 &lt;strong&gt;标签&lt;/strong&gt;（&lt;code&gt;Tag&lt;/code&gt;）；每个标签对应一个镜像。&lt;/p&gt;

&lt;p&gt;通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;code&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/code&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 &lt;code&gt;latest&lt;/code&gt; 作为默认标签。&lt;/p&gt;

&lt;p&gt;以 &lt;a href=&#34;https://hub.docker.com/_/ubuntu&#34;&gt;Ubuntu 镜像&lt;/a&gt; 为例，&lt;code&gt;ubuntu&lt;/code&gt; 是仓库的名字，其内包含有不同的版本标签，如，&lt;code&gt;16.04&lt;/code&gt;, &lt;code&gt;18.04&lt;/code&gt;。我们可以通过 &lt;code&gt;ubuntu:14.04&lt;/code&gt;，或者 &lt;code&gt;ubuntu:18.04&lt;/code&gt; 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 &lt;code&gt;ubuntu&lt;/code&gt;，那将视为 &lt;code&gt;ubuntu:latest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;仓库名经常以 &lt;em&gt;两段式路径&lt;/em&gt; 形式出现，比如 &lt;code&gt;jwilder/nginx-proxy&lt;/code&gt;，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。&lt;/p&gt;

&lt;h3 id=&#34;docker-registry-公开服务:c1314578dde76a3a394a9042c269f756&#34;&gt;Docker Registry 公开服务&lt;/h3&gt;

&lt;p&gt;Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。&lt;/p&gt;

&lt;p&gt;最常使用的 Registry 公开服务是官方的 &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 &lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt; 的 &lt;a href=&#34;https://quay.io/repository/&#34;&gt;Quay.io&lt;/a&gt;，CoreOS 相关的镜像存储在这里；Google 的 &lt;a href=&#34;https://cloud.google.com/container-registry/&#34;&gt;Google Container Registry&lt;/a&gt;，&lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 的镜像使用的就是这个服务。&lt;/p&gt;

&lt;p&gt;由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（&lt;code&gt;Registry Mirror&lt;/code&gt;），这些镜像服务被称为&lt;strong&gt;加速器&lt;/strong&gt;。常见的有 &lt;a href=&#34;https://cr.console.aliyun.com/#/accelerator&#34;&gt;阿里云加速器&lt;/a&gt;、&lt;a href=&#34;https://www.daocloud.io/mirror#accelerator-doc&#34;&gt;DaoCloud 加速器&lt;/a&gt; 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 &lt;a href=&#34;../install/mirror.md&#34;&gt;安装 Docker&lt;/a&gt;  一节中有详细的配置方法。&lt;/p&gt;

&lt;p&gt;国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 &lt;a href=&#34;https://hub.tenxcloud.com/&#34;&gt;时速云镜像仓库&lt;/a&gt;、&lt;a href=&#34;https://c.163.com/hub#/m/library/&#34;&gt;网易云镜像服务&lt;/a&gt;、&lt;a href=&#34;https://hub.daocloud.io/&#34;&gt;DaoCloud 镜像市场&lt;/a&gt;、&lt;a href=&#34;https://cr.console.aliyun.com&#34;&gt;阿里云镜像库&lt;/a&gt; 等。&lt;/p&gt;

&lt;h3 id=&#34;私有-docker-registry:c1314578dde76a3a394a9042c269f756&#34;&gt;私有 Docker Registry&lt;/h3&gt;

&lt;p&gt;除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 &lt;a href=&#34;https://hub.docker.com/_/registry/&#34;&gt;Docker Registry&lt;/a&gt; 镜像，可以直接使用做为私有 Registry 服务。在 &lt;a href=&#34;../repository/registry.md&#34;&gt;私有仓库&lt;/a&gt; 一节中，会有进一步的搭建私有 Registry 服务的讲解。&lt;/p&gt;

&lt;p&gt;开源的 Docker Registry 镜像只提供了 &lt;a href=&#34;https://docs.docker.com/registry/spec/api/&#34;&gt;Docker Registry API&lt;/a&gt; 的服务端实现，足以支持 &lt;code&gt;docker&lt;/code&gt; 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 &lt;a href=&#34;https://docs.docker.com/datacenter/dtr/2.0/&#34;&gt;Docker Trusted Registry&lt;/a&gt; 中，提供了这些高级功能。&lt;/p&gt;

&lt;p&gt;除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，&lt;a href=&#34;https://github.com/goharbor/harbor&#34;&gt;Harbor&lt;/a&gt; 和 &lt;a href=&#34;../repository/nexus3_registry.md&#34;&gt;Sonatype Nexus&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;为什么要使用-docker:c1314578dde76a3a394a9042c269f756&#34;&gt;为什么要使用 Docker？&lt;/h2&gt;

&lt;p&gt;作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。&lt;/p&gt;

&lt;h3 id=&#34;更高效的利用系统资源:c1314578dde76a3a394a9042c269f756&#34;&gt;更高效的利用系统资源&lt;/h3&gt;

&lt;p&gt;由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。&lt;/p&gt;

&lt;h3 id=&#34;更快速的启动时间:c1314578dde76a3a394a9042c269f756&#34;&gt;更快速的启动时间&lt;/h3&gt;

&lt;p&gt;传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。&lt;/p&gt;

&lt;h3 id=&#34;一致的运行环境:c1314578dde76a3a394a9042c269f756&#34;&gt;一致的运行环境&lt;/h3&gt;

&lt;p&gt;开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 &lt;em&gt;「这段代码在我机器上没问题啊」&lt;/em&gt; 这类问题。&lt;/p&gt;

&lt;h3 id=&#34;持续交付和部署:c1314578dde76a3a394a9042c269f756&#34;&gt;持续交付和部署&lt;/h3&gt;

&lt;p&gt;对开发和运维（&lt;a href=&#34;https://zh.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt;）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。&lt;/p&gt;

&lt;p&gt;使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 &lt;a href=&#34;../image/dockerfile/&#34;&gt;Dockerfile&lt;/a&gt; 来进行镜像构建，并结合 &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;持续集成(Continuous Integration)&lt;/a&gt; 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;持续部署(Continuous Delivery/Deployment)&lt;/a&gt; 系统进行自动部署。&lt;/p&gt;

&lt;p&gt;而且使用 &lt;code&gt;Dockerfile&lt;/code&gt; 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。&lt;/p&gt;

&lt;h3 id=&#34;更轻松的迁移:c1314578dde76a3a394a9042c269f756&#34;&gt;更轻松的迁移&lt;/h3&gt;

&lt;p&gt;由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。&lt;/p&gt;

&lt;h3 id=&#34;更轻松的维护和扩展:c1314578dde76a3a394a9042c269f756&#34;&gt;更轻松的维护和扩展&lt;/h3&gt;

&lt;p&gt;Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 &lt;a href=&#34;https://hub.docker.com/search/?type=image&amp;amp;image_filter=official&#34;&gt;官方镜像&lt;/a&gt;，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。&lt;/p&gt;

&lt;h3 id=&#34;对比传统虚拟机总结:c1314578dde76a3a394a9042c269f756&#34;&gt;对比传统虚拟机总结&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;特性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;容器&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;启动&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;秒级&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;硬盘使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;MB&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;GB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;性能&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;接近原生&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弱于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;系统支持量&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>