<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contain on Hello Bibo</title>
    <link>https://bibo19842003.github.io/tags/contain/</link>
    <description>Recent content in Contain on Hello Bibo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>bibo19842003@163.com (bibo)</managingEditor>
    <webMaster>bibo19842003@163.com (bibo)</webMaster>
    <lastBuildDate>Thu, 28 Mar 2019 14:10:30 +0800</lastBuildDate>
    <atom:link href="https://bibo19842003.github.io/tags/contain/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker contain</title>
      <link>https://bibo19842003.github.io/docker/docker-contain/</link>
      <pubDate>Thu, 28 Mar 2019 14:10:30 +0800</pubDate>
      <author>bibo19842003@163.com (bibo)</author>
      <guid>https://bibo19842003.github.io/docker/docker-contain/</guid>
      <description>

&lt;h1 id=&#34;操作-docker-容器&#34;&gt;操作 Docker 容器&lt;/h1&gt;

&lt;p&gt;容器是 Docker 又一核心概念。&lt;/p&gt;

&lt;p&gt;简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。&lt;/p&gt;

&lt;p&gt;本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。&lt;/p&gt;

&lt;h2 id=&#34;启动容器&#34;&gt;启动容器&lt;/h2&gt;

&lt;p&gt;启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（&lt;code&gt;stopped&lt;/code&gt;）的容器重新启动。&lt;/p&gt;

&lt;p&gt;因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。&lt;/p&gt;

&lt;h3 id=&#34;新建并启动&#34;&gt;新建并启动&lt;/h3&gt;

&lt;p&gt;所需要的命令主要为 &lt;code&gt;docker run&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如，下面的命令输出一个 “Hello World”，之后终止容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run ubuntu:18.04 /bin/echo &#39;Hello world&#39;
Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这跟在本地直接执行 &lt;code&gt;/bin/echo &#39;hello world&#39;&lt;/code&gt; 几乎感觉不出任何区别。&lt;/p&gt;

&lt;p&gt;下面的命令则启动一个 bash 终端，允许用户进行交互。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -t -i ubuntu:18.04 /bin/bash
root@af8bae53bdd3:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;-t&lt;/code&gt; 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， &lt;code&gt;-i&lt;/code&gt; 则让容器的标准输入保持打开。&lt;/p&gt;

&lt;p&gt;在交互模式下，用户可以通过所创建的终端来输入命令，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@af8bae53bdd3:/# pwd
/
root@af8bae53bdd3:/# ls
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当利用 &lt;code&gt;docker run&lt;/code&gt; 来创建容器时，Docker 在后台运行的标准操作包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检查本地是否存在指定的镜像，不存在就从公有仓库下载&lt;/li&gt;
&lt;li&gt;利用镜像创建并启动一个容器&lt;/li&gt;
&lt;li&gt;分配一个文件系统，并在只读的镜像层外面挂载一层可读写层&lt;/li&gt;
&lt;li&gt;从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去&lt;/li&gt;
&lt;li&gt;从地址池配置一个 ip 地址给容器&lt;/li&gt;
&lt;li&gt;执行用户指定的应用程序&lt;/li&gt;
&lt;li&gt;执行完毕后容器被终止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;启动已终止容器&#34;&gt;启动已终止容器&lt;/h3&gt;

&lt;p&gt;可以利用 &lt;code&gt;docker container start&lt;/code&gt; 命令，直接将一个已经终止的容器启动运行。&lt;/p&gt;

&lt;p&gt;容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 &lt;code&gt;ps&lt;/code&gt; 或 &lt;code&gt;top&lt;/code&gt; 来查看进程信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@ba267838cc1b:/# ps
  PID TTY          TIME CMD
    1 ?        00:00:00 bash
   11 ?        00:00:00 ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。&lt;/p&gt;

&lt;h2 id=&#34;后台运行&#34;&gt;后台运行&lt;/h2&gt;

&lt;p&gt;更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 &lt;code&gt;-d&lt;/code&gt; 参数来实现。&lt;/p&gt;

&lt;p&gt;下面举两个例子来说明一下。&lt;/p&gt;

&lt;p&gt;如果不使用 &lt;code&gt;-d&lt;/code&gt; 参数运行容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run ubuntu:18.04 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
hello world
hello world
hello world
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容器会把输出的结果 (STDOUT) 打印到宿主机上面&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code&gt;-d&lt;/code&gt; 参数运行容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d ubuntu:18.04 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 &lt;code&gt;docker logs&lt;/code&gt; 查看)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 容器是否会长久运行，是和 &lt;code&gt;docker run&lt;/code&gt; 指定的命令有关，和 &lt;code&gt;-d&lt;/code&gt; 参数无关。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;-d&lt;/code&gt; 参数启动后会返回一个唯一的 id，也可以通过 &lt;code&gt;docker container ls&lt;/code&gt; 命令来查看容器信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker container ls
CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES
77b2dc01fe0f  ubuntu:18.04  /bin/sh -c &#39;while tr  2 minutes ago  Up 1 minute        agitated_wright
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要获取容器的输出信息，可以通过 &lt;code&gt;docker container logs&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container logs [container ID or NAMES]
hello world
hello world
hello world
. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;终止容器&#34;&gt;终止容器&lt;/h2&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker container stop&lt;/code&gt; 来终止一个运行中的容器。&lt;/p&gt;

&lt;p&gt;此外，当 Docker 容器中指定的应用终结时，容器也自动终止。&lt;/p&gt;

&lt;p&gt;例如对于上一章节中只启动了一个终端的容器，用户通过 &lt;code&gt;exit&lt;/code&gt; 命令或 &lt;code&gt;Ctrl+d&lt;/code&gt; 来退出终端时，所创建的容器立刻终止。&lt;/p&gt;

&lt;p&gt;终止状态的容器可以用 &lt;code&gt;docker container ls -a&lt;/code&gt; 命令看到。例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container ls -a
CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES
ba267838cc1b        ubuntu:18.04             &amp;quot;/bin/bash&amp;quot;            30 minutes ago      Exited (0) About a minute ago                       trusting_newton
98e5efa7d997        training/webapp:latest   &amp;quot;python app.py&amp;quot;        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;处于终止状态的容器，可以通过 &lt;code&gt;docker container start&lt;/code&gt; 命令来重新启动。&lt;/p&gt;

&lt;p&gt;此外，&lt;code&gt;docker container restart&lt;/code&gt; 命令会将一个运行态的容器终止，然后再重新启动它。&lt;/p&gt;

&lt;h2 id=&#34;进入容器&#34;&gt;进入容器&lt;/h2&gt;

&lt;p&gt;在使用 &lt;code&gt;-d&lt;/code&gt; 参数时，容器启动后会进入后台。&lt;/p&gt;

&lt;p&gt;某些时候需要进入容器进行操作，包括使用 &lt;code&gt;docker attach&lt;/code&gt; 命令或 &lt;code&gt;docker exec&lt;/code&gt; 命令，推荐大家使用 &lt;code&gt;docker exec&lt;/code&gt; 命令，原因会在下面说明。&lt;/p&gt;

&lt;h3 id=&#34;attach-命令&#34;&gt;&lt;code&gt;attach&lt;/code&gt; 命令&lt;/h3&gt;

&lt;p&gt;下面示例如何使用 &lt;code&gt;docker attach&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit ubuntu
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550

$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
243c32535da7        ubuntu:latest       &amp;quot;/bin/bash&amp;quot;         18 seconds ago      Up 17 seconds                           nostalgic_hypatia

$ docker attach 243c
root@243c32535da7:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：&lt;/em&gt; 如果从这个 stdin 中 exit，会导致容器的停止。&lt;/p&gt;

&lt;h3 id=&#34;exec-命令&#34;&gt;&lt;code&gt;exec&lt;/code&gt; 命令&lt;/h3&gt;

&lt;h4 id=&#34;i-t-参数&#34;&gt;-i -t 参数&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;docker exec&lt;/code&gt; 后边可以跟多个参数，这里主要说明 &lt;code&gt;-i&lt;/code&gt; &lt;code&gt;-t&lt;/code&gt; 参数。&lt;/p&gt;

&lt;p&gt;只用 &lt;code&gt;-i&lt;/code&gt; 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。&lt;/p&gt;

&lt;p&gt;当 &lt;code&gt;-i&lt;/code&gt; &lt;code&gt;-t&lt;/code&gt; 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit ubuntu
69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6

$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
69d137adef7a        ubuntu:latest       &amp;quot;/bin/bash&amp;quot;         18 seconds ago      Up 17 seconds                           zealous_swirles

$ docker exec -i 69d1 bash
ls
bin
boot
dev
...

$ docker exec -it 69d1 bash
root@69d137adef7a:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 &lt;code&gt;docker exec&lt;/code&gt; 的原因。&lt;/p&gt;

&lt;p&gt;更多参数说明请使用 &lt;code&gt;docker exec --help&lt;/code&gt; 查看。&lt;/p&gt;

&lt;h2 id=&#34;导出和导入容器&#34;&gt;导出和导入容器&lt;/h2&gt;

&lt;h3 id=&#34;导出容器&#34;&gt;导出容器&lt;/h3&gt;

&lt;p&gt;如果要导出本地某个容器，可以使用 &lt;code&gt;docker export&lt;/code&gt; 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
7691a814370e        ubuntu:18.04        &amp;quot;/bin/bash&amp;quot;         36 hours ago        Exited (0) 21 hours ago                       test
$ docker export 7691a814370e &amp;gt; ubuntu.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样将导出容器快照到本地文件。&lt;/p&gt;

&lt;h3 id=&#34;导入容器快照&#34;&gt;导入容器快照&lt;/h3&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker import&lt;/code&gt; 从容器快照文件中再导入为镜像，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat ubuntu.tar | docker import - test/ubuntu:v1.0
$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
test/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此外，也可以通过指定 URL 或者某个目录来导入，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker import http://example.com/exampleimage.tgz example/imagerepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注：用户既可以使用 &lt;code&gt;docker load&lt;/code&gt; 来导入镜像存储文件到本地镜像库，也可以使用 &lt;code&gt;docker import&lt;/code&gt; 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除容器&#34;&gt;删除容器&lt;/h2&gt;

&lt;p&gt;可以使用 &lt;code&gt;docker container rm&lt;/code&gt; 来删除一个处于终止状态的容器。例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container rm  trusting_newton
trusting_newton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要删除一个运行中的容器，可以添加 &lt;code&gt;-f&lt;/code&gt; 参数。Docker 会发送 &lt;code&gt;SIGKILL&lt;/code&gt; 信号给容器。&lt;/p&gt;

&lt;h2 id=&#34;清理所有处于终止状态的容器&#34;&gt;清理所有处于终止状态的容器&lt;/h2&gt;

&lt;p&gt;用 &lt;code&gt;docker container ls -a&lt;/code&gt; 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker container prune
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转至:&lt;a href=&#34;https://github.com/yeasy/docker_practice&#34;&gt;https://github.com/yeasy/docker_practice&lt;/a&gt;   d3c197ddfcc89aab5736b2a2eeb118f76e2588ba&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>